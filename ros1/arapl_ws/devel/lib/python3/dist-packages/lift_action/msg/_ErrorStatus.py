# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lift_action/ErrorStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ErrorStatus(genpy.Message):
  _md5sum = "0ad64508a47bfdb3b3558cc9de515c2e"
  _type = "lift_action/ErrorStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool lifterFault
bool extractorFault
bool turnTableFault
bool swingArmFault
bool emergencyPBfault
bool swingArmSensorZeroFault
bool swingArmSensorNinetyFault
bool turntableSensorZeroFault
bool extractorSensorLaserFault"""
  __slots__ = ['lifterFault','extractorFault','turnTableFault','swingArmFault','emergencyPBfault','swingArmSensorZeroFault','swingArmSensorNinetyFault','turntableSensorZeroFault','extractorSensorLaserFault']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lifterFault,extractorFault,turnTableFault,swingArmFault,emergencyPBfault,swingArmSensorZeroFault,swingArmSensorNinetyFault,turntableSensorZeroFault,extractorSensorLaserFault

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ErrorStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lifterFault is None:
        self.lifterFault = False
      if self.extractorFault is None:
        self.extractorFault = False
      if self.turnTableFault is None:
        self.turnTableFault = False
      if self.swingArmFault is None:
        self.swingArmFault = False
      if self.emergencyPBfault is None:
        self.emergencyPBfault = False
      if self.swingArmSensorZeroFault is None:
        self.swingArmSensorZeroFault = False
      if self.swingArmSensorNinetyFault is None:
        self.swingArmSensorNinetyFault = False
      if self.turntableSensorZeroFault is None:
        self.turntableSensorZeroFault = False
      if self.extractorSensorLaserFault is None:
        self.extractorSensorLaserFault = False
    else:
      self.lifterFault = False
      self.extractorFault = False
      self.turnTableFault = False
      self.swingArmFault = False
      self.emergencyPBfault = False
      self.swingArmSensorZeroFault = False
      self.swingArmSensorNinetyFault = False
      self.turntableSensorZeroFault = False
      self.extractorSensorLaserFault = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.lifterFault, _x.extractorFault, _x.turnTableFault, _x.swingArmFault, _x.emergencyPBfault, _x.swingArmSensorZeroFault, _x.swingArmSensorNinetyFault, _x.turntableSensorZeroFault, _x.extractorSensorLaserFault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.lifterFault, _x.extractorFault, _x.turnTableFault, _x.swingArmFault, _x.emergencyPBfault, _x.swingArmSensorZeroFault, _x.swingArmSensorNinetyFault, _x.turntableSensorZeroFault, _x.extractorSensorLaserFault,) = _get_struct_9B().unpack(str[start:end])
      self.lifterFault = bool(self.lifterFault)
      self.extractorFault = bool(self.extractorFault)
      self.turnTableFault = bool(self.turnTableFault)
      self.swingArmFault = bool(self.swingArmFault)
      self.emergencyPBfault = bool(self.emergencyPBfault)
      self.swingArmSensorZeroFault = bool(self.swingArmSensorZeroFault)
      self.swingArmSensorNinetyFault = bool(self.swingArmSensorNinetyFault)
      self.turntableSensorZeroFault = bool(self.turntableSensorZeroFault)
      self.extractorSensorLaserFault = bool(self.extractorSensorLaserFault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.lifterFault, _x.extractorFault, _x.turnTableFault, _x.swingArmFault, _x.emergencyPBfault, _x.swingArmSensorZeroFault, _x.swingArmSensorNinetyFault, _x.turntableSensorZeroFault, _x.extractorSensorLaserFault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.lifterFault, _x.extractorFault, _x.turnTableFault, _x.swingArmFault, _x.emergencyPBfault, _x.swingArmSensorZeroFault, _x.swingArmSensorNinetyFault, _x.turntableSensorZeroFault, _x.extractorSensorLaserFault,) = _get_struct_9B().unpack(str[start:end])
      self.lifterFault = bool(self.lifterFault)
      self.extractorFault = bool(self.extractorFault)
      self.turnTableFault = bool(self.turnTableFault)
      self.swingArmFault = bool(self.swingArmFault)
      self.emergencyPBfault = bool(self.emergencyPBfault)
      self.swingArmSensorZeroFault = bool(self.swingArmSensorZeroFault)
      self.swingArmSensorNinetyFault = bool(self.swingArmSensorNinetyFault)
      self.turntableSensorZeroFault = bool(self.turntableSensorZeroFault)
      self.extractorSensorLaserFault = bool(self.extractorSensorLaserFault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
