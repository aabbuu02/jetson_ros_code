# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graph_msgs/Edge.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import graph_msgs.msg
import std_msgs.msg

class Edge(genpy.Message):
  _md5sum = "7db65fe0ed203a54cf7e26bd678adbcf"
  _type = "graph_msgs/Edge"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Edge types
uint8 STRAIGHT_LINE=0
uint8 CUBIC_BEZIER=1

# Edge direction types
uint8 FORWARD=0
uint8 REVERSE=1
uint8 BIDIRECTIONAL=2

# Creation types 
uint8 CREATED=0     # The edge is created
uint8 GENERATED=1   # The edge is generated

string name
string alias
uint8 type
uint8 edge_direction_type
uint8 creation_type         #FIXME: This creation type is not required. The graph data structure should be able to handle both
uint32 source_vertex_id
uint32 target_vertex_id
float64 length
float64 cost_factor         # A factor by which the traversal cost is multiplied. In this case the length of the edge
bool bidirectional
bool independent_orientation
geometry_msgs/Pose[] control_points
geometry_msgs/Pose control_orientation
geometry_msgs/PoseArray poses   # Can contain the poses for the curve
Property[] properties
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: graph_msgs/Property
string key
string value"""
  # Pseudo-constants
  STRAIGHT_LINE = 0
  CUBIC_BEZIER = 1
  FORWARD = 0
  REVERSE = 1
  BIDIRECTIONAL = 2
  CREATED = 0
  GENERATED = 1

  __slots__ = ['name','alias','type','edge_direction_type','creation_type','source_vertex_id','target_vertex_id','length','cost_factor','bidirectional','independent_orientation','control_points','control_orientation','poses','properties']
  _slot_types = ['string','string','uint8','uint8','uint8','uint32','uint32','float64','float64','bool','bool','geometry_msgs/Pose[]','geometry_msgs/Pose','geometry_msgs/PoseArray','graph_msgs/Property[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,alias,type,edge_direction_type,creation_type,source_vertex_id,target_vertex_id,length,cost_factor,bidirectional,independent_orientation,control_points,control_orientation,poses,properties

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Edge, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.alias is None:
        self.alias = ''
      if self.type is None:
        self.type = 0
      if self.edge_direction_type is None:
        self.edge_direction_type = 0
      if self.creation_type is None:
        self.creation_type = 0
      if self.source_vertex_id is None:
        self.source_vertex_id = 0
      if self.target_vertex_id is None:
        self.target_vertex_id = 0
      if self.length is None:
        self.length = 0.
      if self.cost_factor is None:
        self.cost_factor = 0.
      if self.bidirectional is None:
        self.bidirectional = False
      if self.independent_orientation is None:
        self.independent_orientation = False
      if self.control_points is None:
        self.control_points = []
      if self.control_orientation is None:
        self.control_orientation = geometry_msgs.msg.Pose()
      if self.poses is None:
        self.poses = geometry_msgs.msg.PoseArray()
      if self.properties is None:
        self.properties = []
    else:
      self.name = ''
      self.alias = ''
      self.type = 0
      self.edge_direction_type = 0
      self.creation_type = 0
      self.source_vertex_id = 0
      self.target_vertex_id = 0
      self.length = 0.
      self.cost_factor = 0.
      self.bidirectional = False
      self.independent_orientation = False
      self.control_points = []
      self.control_orientation = geometry_msgs.msg.Pose()
      self.poses = geometry_msgs.msg.PoseArray()
      self.properties = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.alias
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B2I2d2B().pack(_x.type, _x.edge_direction_type, _x.creation_type, _x.source_vertex_id, _x.target_vertex_id, _x.length, _x.cost_factor, _x.bidirectional, _x.independent_orientation))
      length = len(self.control_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.control_points:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.control_orientation.position.x, _x.control_orientation.position.y, _x.control_orientation.position.z, _x.control_orientation.orientation.x, _x.control_orientation.orientation.y, _x.control_orientation.orientation.z, _x.control_orientation.orientation.w, _x.poses.header.seq, _x.poses.header.stamp.secs, _x.poses.header.stamp.nsecs))
      _x = self.poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.poses.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses.poses:
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.orientation
        _x = _v4
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.properties)
      buff.write(_struct_I.pack(length))
      for val1 in self.properties:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.control_points is None:
        self.control_points = None
      if self.control_orientation is None:
        self.control_orientation = geometry_msgs.msg.Pose()
      if self.poses is None:
        self.poses = geometry_msgs.msg.PoseArray()
      if self.properties is None:
        self.properties = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.alias = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.alias = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.type, _x.edge_direction_type, _x.creation_type, _x.source_vertex_id, _x.target_vertex_id, _x.length, _x.cost_factor, _x.bidirectional, _x.independent_orientation,) = _get_struct_3B2I2d2B().unpack(str[start:end])
      self.bidirectional = bool(self.bidirectional)
      self.independent_orientation = bool(self.independent_orientation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.control_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v5 = val1.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.control_points.append(val1)
      _x = self
      start = end
      end += 68
      (_x.control_orientation.position.x, _x.control_orientation.position.y, _x.control_orientation.position.z, _x.control_orientation.orientation.x, _x.control_orientation.orientation.y, _x.control_orientation.orientation.z, _x.control_orientation.orientation.w, _x.poses.header.seq, _x.poses.header.stamp.secs, _x.poses.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poses.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.poses.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.poses.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.properties = []
      for i in range(0, length):
        val1 = graph_msgs.msg.Property()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.properties.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.alias
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B2I2d2B().pack(_x.type, _x.edge_direction_type, _x.creation_type, _x.source_vertex_id, _x.target_vertex_id, _x.length, _x.cost_factor, _x.bidirectional, _x.independent_orientation))
      length = len(self.control_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.control_points:
        _v9 = val1.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.control_orientation.position.x, _x.control_orientation.position.y, _x.control_orientation.position.z, _x.control_orientation.orientation.x, _x.control_orientation.orientation.y, _x.control_orientation.orientation.z, _x.control_orientation.orientation.w, _x.poses.header.seq, _x.poses.header.stamp.secs, _x.poses.header.stamp.nsecs))
      _x = self.poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.poses.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses.poses:
        _v11 = val1.position
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.orientation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.properties)
      buff.write(_struct_I.pack(length))
      for val1 in self.properties:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.control_points is None:
        self.control_points = None
      if self.control_orientation is None:
        self.control_orientation = geometry_msgs.msg.Pose()
      if self.poses is None:
        self.poses = geometry_msgs.msg.PoseArray()
      if self.properties is None:
        self.properties = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.alias = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.alias = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.type, _x.edge_direction_type, _x.creation_type, _x.source_vertex_id, _x.target_vertex_id, _x.length, _x.cost_factor, _x.bidirectional, _x.independent_orientation,) = _get_struct_3B2I2d2B().unpack(str[start:end])
      self.bidirectional = bool(self.bidirectional)
      self.independent_orientation = bool(self.independent_orientation)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.control_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v13 = val1.position
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.orientation
        _x = _v14
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.control_points.append(val1)
      _x = self
      start = end
      end += 68
      (_x.control_orientation.position.x, _x.control_orientation.position.y, _x.control_orientation.position.z, _x.control_orientation.orientation.x, _x.control_orientation.orientation.y, _x.control_orientation.orientation.z, _x.control_orientation.orientation.w, _x.poses.header.seq, _x.poses.header.stamp.secs, _x.poses.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.poses.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.poses.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v15 = val1.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.poses.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.properties = []
      for i in range(0, length):
        val1 = graph_msgs.msg.Property()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.properties.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B2I2d2B = None
def _get_struct_3B2I2d2B():
    global _struct_3B2I2d2B
    if _struct_3B2I2d2B is None:
        _struct_3B2I2d2B = struct.Struct("<3B2I2d2B")
    return _struct_3B2I2d2B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
