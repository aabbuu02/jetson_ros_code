# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/ACRModuleGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import anscer_msgs.msg

class ACRModuleGoal(genpy.Message):
  _md5sum = "dff17f295ad0f39ca1837d79706b9a4c"
  _type = "anscer_msgs/ACRModuleGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
ACRControl control_input


================================================================================
MSG: anscer_msgs/ACRControl
#mission status
int32 PICKUP =0
int32 DROPOFF =1

int16 acr_shelf
int16 target_shelf
int16 acr_action
int64 bar_code_number
int64 whole_bin_number
"""
  __slots__ = ['control_input']
  _slot_types = ['anscer_msgs/ACRControl']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ACRModuleGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.control_input is None:
        self.control_input = anscer_msgs.msg.ACRControl()
    else:
      self.control_input = anscer_msgs.msg.ACRControl()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3h2q().pack(_x.control_input.acr_shelf, _x.control_input.target_shelf, _x.control_input.acr_action, _x.control_input.bar_code_number, _x.control_input.whole_bin_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.control_input is None:
        self.control_input = anscer_msgs.msg.ACRControl()
      end = 0
      _x = self
      start = end
      end += 22
      (_x.control_input.acr_shelf, _x.control_input.target_shelf, _x.control_input.acr_action, _x.control_input.bar_code_number, _x.control_input.whole_bin_number,) = _get_struct_3h2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3h2q().pack(_x.control_input.acr_shelf, _x.control_input.target_shelf, _x.control_input.acr_action, _x.control_input.bar_code_number, _x.control_input.whole_bin_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.control_input is None:
        self.control_input = anscer_msgs.msg.ACRControl()
      end = 0
      _x = self
      start = end
      end += 22
      (_x.control_input.acr_shelf, _x.control_input.target_shelf, _x.control_input.acr_action, _x.control_input.bar_code_number, _x.control_input.whole_bin_number,) = _get_struct_3h2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3h2q = None
def _get_struct_3h2q():
    global _struct_3h2q
    if _struct_3h2q is None:
        _struct_3h2q = struct.Struct("<3h2q")
    return _struct_3h2q
