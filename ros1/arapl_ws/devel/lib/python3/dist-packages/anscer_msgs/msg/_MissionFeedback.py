# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/MissionFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import anscer_msgs.msg

class MissionFeedback(genpy.Message):
  _md5sum = "0a3149ea484a6d0f88c761618ba5e6b0"
  _type = "anscer_msgs/MissionFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
anscer_msgs/Feedback mission_feedback


================================================================================
MSG: anscer_msgs/Feedback
#mission status
int32 IDLE =0
int32 ACTIVE =1
int32 SUCCESS =2
int32 ABORTED =3
int32 PAUSED =4


string index
string mission_id
int16 number
int16 status
anscer_msgs/ChargeInfo charge_info
float32 completion_percentage
int32 time_elapsed
int32 priority_level

================================================================================
MSG: anscer_msgs/ChargeInfo
uint8 CONNECTED=1
uint8 DISCONNECTED=2
uint8 OVERRIDE=3

bool charger_activate
int32 charge_time
bool ignore_time
float32 charge_percentage
bool ignore_percentage
"""
  __slots__ = ['mission_feedback']
  _slot_types = ['anscer_msgs/Feedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mission_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MissionFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mission_feedback is None:
        self.mission_feedback = anscer_msgs.msg.Feedback()
    else:
      self.mission_feedback = anscer_msgs.msg.Feedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.mission_feedback.index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mission_feedback.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hBiBfBf2i().pack(_x.mission_feedback.number, _x.mission_feedback.status, _x.mission_feedback.charge_info.charger_activate, _x.mission_feedback.charge_info.charge_time, _x.mission_feedback.charge_info.ignore_time, _x.mission_feedback.charge_info.charge_percentage, _x.mission_feedback.charge_info.ignore_percentage, _x.mission_feedback.completion_percentage, _x.mission_feedback.time_elapsed, _x.mission_feedback.priority_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.mission_feedback is None:
        self.mission_feedback = anscer_msgs.msg.Feedback()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_feedback.index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mission_feedback.index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_feedback.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mission_feedback.mission_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.mission_feedback.number, _x.mission_feedback.status, _x.mission_feedback.charge_info.charger_activate, _x.mission_feedback.charge_info.charge_time, _x.mission_feedback.charge_info.ignore_time, _x.mission_feedback.charge_info.charge_percentage, _x.mission_feedback.charge_info.ignore_percentage, _x.mission_feedback.completion_percentage, _x.mission_feedback.time_elapsed, _x.mission_feedback.priority_level,) = _get_struct_2hBiBfBf2i().unpack(str[start:end])
      self.mission_feedback.charge_info.charger_activate = bool(self.mission_feedback.charge_info.charger_activate)
      self.mission_feedback.charge_info.ignore_time = bool(self.mission_feedback.charge_info.ignore_time)
      self.mission_feedback.charge_info.ignore_percentage = bool(self.mission_feedback.charge_info.ignore_percentage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.mission_feedback.index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mission_feedback.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hBiBfBf2i().pack(_x.mission_feedback.number, _x.mission_feedback.status, _x.mission_feedback.charge_info.charger_activate, _x.mission_feedback.charge_info.charge_time, _x.mission_feedback.charge_info.ignore_time, _x.mission_feedback.charge_info.charge_percentage, _x.mission_feedback.charge_info.ignore_percentage, _x.mission_feedback.completion_percentage, _x.mission_feedback.time_elapsed, _x.mission_feedback.priority_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.mission_feedback is None:
        self.mission_feedback = anscer_msgs.msg.Feedback()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_feedback.index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mission_feedback.index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_feedback.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mission_feedback.mission_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.mission_feedback.number, _x.mission_feedback.status, _x.mission_feedback.charge_info.charger_activate, _x.mission_feedback.charge_info.charge_time, _x.mission_feedback.charge_info.ignore_time, _x.mission_feedback.charge_info.charge_percentage, _x.mission_feedback.charge_info.ignore_percentage, _x.mission_feedback.completion_percentage, _x.mission_feedback.time_elapsed, _x.mission_feedback.priority_level,) = _get_struct_2hBiBfBf2i().unpack(str[start:end])
      self.mission_feedback.charge_info.charger_activate = bool(self.mission_feedback.charge_info.charger_activate)
      self.mission_feedback.charge_info.ignore_time = bool(self.mission_feedback.charge_info.ignore_time)
      self.mission_feedback.charge_info.ignore_percentage = bool(self.mission_feedback.charge_info.ignore_percentage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2hBiBfBf2i = None
def _get_struct_2hBiBfBf2i():
    global _struct_2hBiBfBf2i
    if _struct_2hBiBfBf2i is None:
        _struct_2hBiBfBf2i = struct.Struct("<2hBiBfBf2i")
    return _struct_2hBiBfBf2i
