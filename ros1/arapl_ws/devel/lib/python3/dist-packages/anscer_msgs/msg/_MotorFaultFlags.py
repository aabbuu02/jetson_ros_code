# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/MotorFaultFlags.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorFaultFlags(genpy.Message):
  _md5sum = "5204cec7a2d19b97b19f5f360556d07a"
  _type = "anscer_msgs/MotorFaultFlags"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool overheat
bool overvoltage
bool undervoltage
bool short_circuit
bool emergency_stop
bool motor_setup_fault
bool mosfet_failure
bool default_configuration
"""
  __slots__ = ['overheat','overvoltage','undervoltage','short_circuit','emergency_stop','motor_setup_fault','mosfet_failure','default_configuration']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       overheat,overvoltage,undervoltage,short_circuit,emergency_stop,motor_setup_fault,mosfet_failure,default_configuration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorFaultFlags, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.overheat is None:
        self.overheat = False
      if self.overvoltage is None:
        self.overvoltage = False
      if self.undervoltage is None:
        self.undervoltage = False
      if self.short_circuit is None:
        self.short_circuit = False
      if self.emergency_stop is None:
        self.emergency_stop = False
      if self.motor_setup_fault is None:
        self.motor_setup_fault = False
      if self.mosfet_failure is None:
        self.mosfet_failure = False
      if self.default_configuration is None:
        self.default_configuration = False
    else:
      self.overheat = False
      self.overvoltage = False
      self.undervoltage = False
      self.short_circuit = False
      self.emergency_stop = False
      self.motor_setup_fault = False
      self.mosfet_failure = False
      self.default_configuration = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.overheat, _x.overvoltage, _x.undervoltage, _x.short_circuit, _x.emergency_stop, _x.motor_setup_fault, _x.mosfet_failure, _x.default_configuration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.overheat, _x.overvoltage, _x.undervoltage, _x.short_circuit, _x.emergency_stop, _x.motor_setup_fault, _x.mosfet_failure, _x.default_configuration,) = _get_struct_8B().unpack(str[start:end])
      self.overheat = bool(self.overheat)
      self.overvoltage = bool(self.overvoltage)
      self.undervoltage = bool(self.undervoltage)
      self.short_circuit = bool(self.short_circuit)
      self.emergency_stop = bool(self.emergency_stop)
      self.motor_setup_fault = bool(self.motor_setup_fault)
      self.mosfet_failure = bool(self.mosfet_failure)
      self.default_configuration = bool(self.default_configuration)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.overheat, _x.overvoltage, _x.undervoltage, _x.short_circuit, _x.emergency_stop, _x.motor_setup_fault, _x.mosfet_failure, _x.default_configuration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.overheat, _x.overvoltage, _x.undervoltage, _x.short_circuit, _x.emergency_stop, _x.motor_setup_fault, _x.mosfet_failure, _x.default_configuration,) = _get_struct_8B().unpack(str[start:end])
      self.overheat = bool(self.overheat)
      self.overvoltage = bool(self.overvoltage)
      self.undervoltage = bool(self.undervoltage)
      self.short_circuit = bool(self.short_circuit)
      self.emergency_stop = bool(self.emergency_stop)
      self.motor_setup_fault = bool(self.motor_setup_fault)
      self.mosfet_failure = bool(self.mosfet_failure)
      self.default_configuration = bool(self.default_configuration)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
