# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/SafetyFields.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import anscer_msgs.msg

class SafetyFields(genpy.Message):
  _md5sum = "a7a9ac03c2713cea077fbfe497276db8"
  _type = "anscer_msgs/SafetyFields"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """anscer_msgs/SafetyField[] warning
anscer_msgs/SafetyField[] safety

================================================================================
MSG: anscer_msgs/SafetyField
int8 field_id
bool is_front
bool is_rear
"""
  __slots__ = ['warning','safety']
  _slot_types = ['anscer_msgs/SafetyField[]','anscer_msgs/SafetyField[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       warning,safety

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyFields, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.warning is None:
        self.warning = []
      if self.safety is None:
        self.safety = []
    else:
      self.warning = []
      self.safety = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.warning)
      buff.write(_struct_I.pack(length))
      for val1 in self.warning:
        _x = val1
        buff.write(_get_struct_b2B().pack(_x.field_id, _x.is_front, _x.is_rear))
      length = len(self.safety)
      buff.write(_struct_I.pack(length))
      for val1 in self.safety:
        _x = val1
        buff.write(_get_struct_b2B().pack(_x.field_id, _x.is_front, _x.is_rear))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.warning is None:
        self.warning = None
      if self.safety is None:
        self.safety = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.warning = []
      for i in range(0, length):
        val1 = anscer_msgs.msg.SafetyField()
        _x = val1
        start = end
        end += 3
        (_x.field_id, _x.is_front, _x.is_rear,) = _get_struct_b2B().unpack(str[start:end])
        val1.is_front = bool(val1.is_front)
        val1.is_rear = bool(val1.is_rear)
        self.warning.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.safety = []
      for i in range(0, length):
        val1 = anscer_msgs.msg.SafetyField()
        _x = val1
        start = end
        end += 3
        (_x.field_id, _x.is_front, _x.is_rear,) = _get_struct_b2B().unpack(str[start:end])
        val1.is_front = bool(val1.is_front)
        val1.is_rear = bool(val1.is_rear)
        self.safety.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.warning)
      buff.write(_struct_I.pack(length))
      for val1 in self.warning:
        _x = val1
        buff.write(_get_struct_b2B().pack(_x.field_id, _x.is_front, _x.is_rear))
      length = len(self.safety)
      buff.write(_struct_I.pack(length))
      for val1 in self.safety:
        _x = val1
        buff.write(_get_struct_b2B().pack(_x.field_id, _x.is_front, _x.is_rear))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.warning is None:
        self.warning = None
      if self.safety is None:
        self.safety = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.warning = []
      for i in range(0, length):
        val1 = anscer_msgs.msg.SafetyField()
        _x = val1
        start = end
        end += 3
        (_x.field_id, _x.is_front, _x.is_rear,) = _get_struct_b2B().unpack(str[start:end])
        val1.is_front = bool(val1.is_front)
        val1.is_rear = bool(val1.is_rear)
        self.warning.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.safety = []
      for i in range(0, length):
        val1 = anscer_msgs.msg.SafetyField()
        _x = val1
        start = end
        end += 3
        (_x.field_id, _x.is_front, _x.is_rear,) = _get_struct_b2B().unpack(str[start:end])
        val1.is_front = bool(val1.is_front)
        val1.is_rear = bool(val1.is_rear)
        self.safety.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b2B = None
def _get_struct_b2B():
    global _struct_b2B
    if _struct_b2B is None:
        _struct_b2B = struct.Struct("<b2B")
    return _struct_b2B
