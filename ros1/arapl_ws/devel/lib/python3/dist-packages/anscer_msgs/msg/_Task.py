# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/Task.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import anscer_msgs.msg

class Task(genpy.Message):
  _md5sum = "a8514c525e421060a8b705e1ac323b92"
  _type = "anscer_msgs/Task"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string index
int16 waypoint_index
int16 number
bool activate
anscer_msgs/ACRControl acr_info
anscer_msgs/ChargeInfo charge_info

================================================================================
MSG: anscer_msgs/ACRControl
#mission status
int32 PICKUP =0
int32 DROPOFF =1

int16 acr_shelf
int16 target_shelf
int16 acr_action
int64 bar_code_number
int64 whole_bin_number

================================================================================
MSG: anscer_msgs/ChargeInfo
uint8 CONNECTED=1
uint8 DISCONNECTED=2
uint8 OVERRIDE=3

bool charger_activate
int32 charge_time
bool ignore_time
float32 charge_percentage
bool ignore_percentage
"""
  __slots__ = ['index','waypoint_index','number','activate','acr_info','charge_info']
  _slot_types = ['string','int16','int16','bool','anscer_msgs/ACRControl','anscer_msgs/ChargeInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,waypoint_index,number,activate,acr_info,charge_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Task, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = ''
      if self.waypoint_index is None:
        self.waypoint_index = 0
      if self.number is None:
        self.number = 0
      if self.activate is None:
        self.activate = False
      if self.acr_info is None:
        self.acr_info = anscer_msgs.msg.ACRControl()
      if self.charge_info is None:
        self.charge_info = anscer_msgs.msg.ChargeInfo()
    else:
      self.index = ''
      self.waypoint_index = 0
      self.number = 0
      self.activate = False
      self.acr_info = anscer_msgs.msg.ACRControl()
      self.charge_info = anscer_msgs.msg.ChargeInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hB3h2qBiBfB().pack(_x.waypoint_index, _x.number, _x.activate, _x.acr_info.acr_shelf, _x.acr_info.target_shelf, _x.acr_info.acr_action, _x.acr_info.bar_code_number, _x.acr_info.whole_bin_number, _x.charge_info.charger_activate, _x.charge_info.charge_time, _x.charge_info.ignore_time, _x.charge_info.charge_percentage, _x.charge_info.ignore_percentage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.acr_info is None:
        self.acr_info = anscer_msgs.msg.ACRControl()
      if self.charge_info is None:
        self.charge_info = anscer_msgs.msg.ChargeInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.index = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.waypoint_index, _x.number, _x.activate, _x.acr_info.acr_shelf, _x.acr_info.target_shelf, _x.acr_info.acr_action, _x.acr_info.bar_code_number, _x.acr_info.whole_bin_number, _x.charge_info.charger_activate, _x.charge_info.charge_time, _x.charge_info.ignore_time, _x.charge_info.charge_percentage, _x.charge_info.ignore_percentage,) = _get_struct_2hB3h2qBiBfB().unpack(str[start:end])
      self.activate = bool(self.activate)
      self.charge_info.charger_activate = bool(self.charge_info.charger_activate)
      self.charge_info.ignore_time = bool(self.charge_info.ignore_time)
      self.charge_info.ignore_percentage = bool(self.charge_info.ignore_percentage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hB3h2qBiBfB().pack(_x.waypoint_index, _x.number, _x.activate, _x.acr_info.acr_shelf, _x.acr_info.target_shelf, _x.acr_info.acr_action, _x.acr_info.bar_code_number, _x.acr_info.whole_bin_number, _x.charge_info.charger_activate, _x.charge_info.charge_time, _x.charge_info.ignore_time, _x.charge_info.charge_percentage, _x.charge_info.ignore_percentage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.acr_info is None:
        self.acr_info = anscer_msgs.msg.ACRControl()
      if self.charge_info is None:
        self.charge_info = anscer_msgs.msg.ChargeInfo()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.index = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.waypoint_index, _x.number, _x.activate, _x.acr_info.acr_shelf, _x.acr_info.target_shelf, _x.acr_info.acr_action, _x.acr_info.bar_code_number, _x.acr_info.whole_bin_number, _x.charge_info.charger_activate, _x.charge_info.charge_time, _x.charge_info.ignore_time, _x.charge_info.charge_percentage, _x.charge_info.ignore_percentage,) = _get_struct_2hB3h2qBiBfB().unpack(str[start:end])
      self.activate = bool(self.activate)
      self.charge_info.charger_activate = bool(self.charge_info.charger_activate)
      self.charge_info.ignore_time = bool(self.charge_info.ignore_time)
      self.charge_info.ignore_percentage = bool(self.charge_info.ignore_percentage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2hB3h2qBiBfB = None
def _get_struct_2hB3h2qBiBfB():
    global _struct_2hB3h2qBiBfB
    if _struct_2hB3h2qBiBfB is None:
        _struct_2hB3h2qBiBfB = struct.Struct("<2hB3h2qBiBfB")
    return _struct_2hB3h2qBiBfB
