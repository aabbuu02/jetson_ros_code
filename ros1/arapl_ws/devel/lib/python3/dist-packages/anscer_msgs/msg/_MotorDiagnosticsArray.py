# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/MotorDiagnosticsArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import anscer_msgs.msg

class MotorDiagnosticsArray(genpy.Message):
  _md5sum = "e04d5a81a4ba18dbd66dc15d7fdf969a"
  _type = "anscer_msgs/MotorDiagnosticsArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """MotorDiagnostics[] motor_diagnostics

================================================================================
MSG: anscer_msgs/MotorDiagnostics
string name
MotorFaultFlags fault_flags
MotorStatusFlags status_flags

================================================================================
MSG: anscer_msgs/MotorFaultFlags
bool overheat
bool overvoltage
bool undervoltage
bool short_circuit
bool emergency_stop
bool motor_setup_fault
bool mosfet_failure
bool default_configuration

================================================================================
MSG: anscer_msgs/MotorStatusFlags
bool serial_mode
bool pulse_mode
bool analog_mode
bool power_stage_off
bool stall_detected
bool at_limit
bool unused
bool micro_basic_script_running
bool motor_tuning_mode
"""
  __slots__ = ['motor_diagnostics']
  _slot_types = ['anscer_msgs/MotorDiagnostics[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_diagnostics

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorDiagnosticsArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motor_diagnostics is None:
        self.motor_diagnostics = []
    else:
      self.motor_diagnostics = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.motor_diagnostics)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor_diagnostics:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.fault_flags
        _x = _v1
        buff.write(_get_struct_8B().pack(_x.overheat, _x.overvoltage, _x.undervoltage, _x.short_circuit, _x.emergency_stop, _x.motor_setup_fault, _x.mosfet_failure, _x.default_configuration))
        _v2 = val1.status_flags
        _x = _v2
        buff.write(_get_struct_9B().pack(_x.serial_mode, _x.pulse_mode, _x.analog_mode, _x.power_stage_off, _x.stall_detected, _x.at_limit, _x.unused, _x.micro_basic_script_running, _x.motor_tuning_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor_diagnostics is None:
        self.motor_diagnostics = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor_diagnostics = []
      for i in range(0, length):
        val1 = anscer_msgs.msg.MotorDiagnostics()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v3 = val1.fault_flags
        _x = _v3
        start = end
        end += 8
        (_x.overheat, _x.overvoltage, _x.undervoltage, _x.short_circuit, _x.emergency_stop, _x.motor_setup_fault, _x.mosfet_failure, _x.default_configuration,) = _get_struct_8B().unpack(str[start:end])
        _v3.overheat = bool(_v3.overheat)
        _v3.overvoltage = bool(_v3.overvoltage)
        _v3.undervoltage = bool(_v3.undervoltage)
        _v3.short_circuit = bool(_v3.short_circuit)
        _v3.emergency_stop = bool(_v3.emergency_stop)
        _v3.motor_setup_fault = bool(_v3.motor_setup_fault)
        _v3.mosfet_failure = bool(_v3.mosfet_failure)
        _v3.default_configuration = bool(_v3.default_configuration)
        _v4 = val1.status_flags
        _x = _v4
        start = end
        end += 9
        (_x.serial_mode, _x.pulse_mode, _x.analog_mode, _x.power_stage_off, _x.stall_detected, _x.at_limit, _x.unused, _x.micro_basic_script_running, _x.motor_tuning_mode,) = _get_struct_9B().unpack(str[start:end])
        _v4.serial_mode = bool(_v4.serial_mode)
        _v4.pulse_mode = bool(_v4.pulse_mode)
        _v4.analog_mode = bool(_v4.analog_mode)
        _v4.power_stage_off = bool(_v4.power_stage_off)
        _v4.stall_detected = bool(_v4.stall_detected)
        _v4.at_limit = bool(_v4.at_limit)
        _v4.unused = bool(_v4.unused)
        _v4.micro_basic_script_running = bool(_v4.micro_basic_script_running)
        _v4.motor_tuning_mode = bool(_v4.motor_tuning_mode)
        self.motor_diagnostics.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.motor_diagnostics)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor_diagnostics:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = val1.fault_flags
        _x = _v5
        buff.write(_get_struct_8B().pack(_x.overheat, _x.overvoltage, _x.undervoltage, _x.short_circuit, _x.emergency_stop, _x.motor_setup_fault, _x.mosfet_failure, _x.default_configuration))
        _v6 = val1.status_flags
        _x = _v6
        buff.write(_get_struct_9B().pack(_x.serial_mode, _x.pulse_mode, _x.analog_mode, _x.power_stage_off, _x.stall_detected, _x.at_limit, _x.unused, _x.micro_basic_script_running, _x.motor_tuning_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor_diagnostics is None:
        self.motor_diagnostics = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor_diagnostics = []
      for i in range(0, length):
        val1 = anscer_msgs.msg.MotorDiagnostics()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v7 = val1.fault_flags
        _x = _v7
        start = end
        end += 8
        (_x.overheat, _x.overvoltage, _x.undervoltage, _x.short_circuit, _x.emergency_stop, _x.motor_setup_fault, _x.mosfet_failure, _x.default_configuration,) = _get_struct_8B().unpack(str[start:end])
        _v7.overheat = bool(_v7.overheat)
        _v7.overvoltage = bool(_v7.overvoltage)
        _v7.undervoltage = bool(_v7.undervoltage)
        _v7.short_circuit = bool(_v7.short_circuit)
        _v7.emergency_stop = bool(_v7.emergency_stop)
        _v7.motor_setup_fault = bool(_v7.motor_setup_fault)
        _v7.mosfet_failure = bool(_v7.mosfet_failure)
        _v7.default_configuration = bool(_v7.default_configuration)
        _v8 = val1.status_flags
        _x = _v8
        start = end
        end += 9
        (_x.serial_mode, _x.pulse_mode, _x.analog_mode, _x.power_stage_off, _x.stall_detected, _x.at_limit, _x.unused, _x.micro_basic_script_running, _x.motor_tuning_mode,) = _get_struct_9B().unpack(str[start:end])
        _v8.serial_mode = bool(_v8.serial_mode)
        _v8.pulse_mode = bool(_v8.pulse_mode)
        _v8.analog_mode = bool(_v8.analog_mode)
        _v8.power_stage_off = bool(_v8.power_stage_off)
        _v8.stall_detected = bool(_v8.stall_detected)
        _v8.at_limit = bool(_v8.at_limit)
        _v8.unused = bool(_v8.unused)
        _v8.micro_basic_script_running = bool(_v8.micro_basic_script_running)
        _v8.motor_tuning_mode = bool(_v8.motor_tuning_mode)
        self.motor_diagnostics.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
