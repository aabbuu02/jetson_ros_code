# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/MotorStatusFlags.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorStatusFlags(genpy.Message):
  _md5sum = "4d1ef401a01f21abeee2855174e79d1f"
  _type = "anscer_msgs/MotorStatusFlags"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool serial_mode
bool pulse_mode
bool analog_mode
bool power_stage_off
bool stall_detected
bool at_limit
bool unused
bool micro_basic_script_running
bool motor_tuning_mode
"""
  __slots__ = ['serial_mode','pulse_mode','analog_mode','power_stage_off','stall_detected','at_limit','unused','micro_basic_script_running','motor_tuning_mode']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       serial_mode,pulse_mode,analog_mode,power_stage_off,stall_detected,at_limit,unused,micro_basic_script_running,motor_tuning_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorStatusFlags, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.serial_mode is None:
        self.serial_mode = False
      if self.pulse_mode is None:
        self.pulse_mode = False
      if self.analog_mode is None:
        self.analog_mode = False
      if self.power_stage_off is None:
        self.power_stage_off = False
      if self.stall_detected is None:
        self.stall_detected = False
      if self.at_limit is None:
        self.at_limit = False
      if self.unused is None:
        self.unused = False
      if self.micro_basic_script_running is None:
        self.micro_basic_script_running = False
      if self.motor_tuning_mode is None:
        self.motor_tuning_mode = False
    else:
      self.serial_mode = False
      self.pulse_mode = False
      self.analog_mode = False
      self.power_stage_off = False
      self.stall_detected = False
      self.at_limit = False
      self.unused = False
      self.micro_basic_script_running = False
      self.motor_tuning_mode = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.serial_mode, _x.pulse_mode, _x.analog_mode, _x.power_stage_off, _x.stall_detected, _x.at_limit, _x.unused, _x.micro_basic_script_running, _x.motor_tuning_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.serial_mode, _x.pulse_mode, _x.analog_mode, _x.power_stage_off, _x.stall_detected, _x.at_limit, _x.unused, _x.micro_basic_script_running, _x.motor_tuning_mode,) = _get_struct_9B().unpack(str[start:end])
      self.serial_mode = bool(self.serial_mode)
      self.pulse_mode = bool(self.pulse_mode)
      self.analog_mode = bool(self.analog_mode)
      self.power_stage_off = bool(self.power_stage_off)
      self.stall_detected = bool(self.stall_detected)
      self.at_limit = bool(self.at_limit)
      self.unused = bool(self.unused)
      self.micro_basic_script_running = bool(self.micro_basic_script_running)
      self.motor_tuning_mode = bool(self.motor_tuning_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.serial_mode, _x.pulse_mode, _x.analog_mode, _x.power_stage_off, _x.stall_detected, _x.at_limit, _x.unused, _x.micro_basic_script_running, _x.motor_tuning_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.serial_mode, _x.pulse_mode, _x.analog_mode, _x.power_stage_off, _x.stall_detected, _x.at_limit, _x.unused, _x.micro_basic_script_running, _x.motor_tuning_mode,) = _get_struct_9B().unpack(str[start:end])
      self.serial_mode = bool(self.serial_mode)
      self.pulse_mode = bool(self.pulse_mode)
      self.analog_mode = bool(self.analog_mode)
      self.power_stage_off = bool(self.power_stage_off)
      self.stall_detected = bool(self.stall_detected)
      self.at_limit = bool(self.at_limit)
      self.unused = bool(self.unused)
      self.micro_basic_script_running = bool(self.micro_basic_script_running)
      self.motor_tuning_mode = bool(self.motor_tuning_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
