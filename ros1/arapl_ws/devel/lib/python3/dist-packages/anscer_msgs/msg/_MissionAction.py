# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/MissionAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import anscer_msgs.msg
import genpy
import std_msgs.msg

class MissionAction(genpy.Message):
  _md5sum = "460bbf90a43af8cb5031074e67b99306"
  _type = "anscer_msgs/MissionAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

MissionActionGoal action_goal
MissionActionResult action_result
MissionActionFeedback action_feedback

================================================================================
MSG: anscer_msgs/MissionActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MissionGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: anscer_msgs/MissionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
int16 loop_number
string mission_id
anscer_msgs/Task[] mission_list


================================================================================
MSG: anscer_msgs/Task
string index
int16 waypoint_index
int16 number
bool activate
anscer_msgs/ACRControl acr_info
anscer_msgs/ChargeInfo charge_info

================================================================================
MSG: anscer_msgs/ACRControl
#mission status
int32 PICKUP =0
int32 DROPOFF =1

int16 acr_shelf
int16 target_shelf
int16 acr_action
int64 bar_code_number
int64 whole_bin_number

================================================================================
MSG: anscer_msgs/ChargeInfo
uint8 CONNECTED=1
uint8 DISCONNECTED=2
uint8 OVERRIDE=3

bool charger_activate
int32 charge_time
bool ignore_time
float32 charge_percentage
bool ignore_percentage

================================================================================
MSG: anscer_msgs/MissionActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MissionResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: anscer_msgs/MissionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
bool is_success
string mission_id

================================================================================
MSG: anscer_msgs/MissionActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MissionFeedback feedback

================================================================================
MSG: anscer_msgs/MissionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
anscer_msgs/Feedback mission_feedback


================================================================================
MSG: anscer_msgs/Feedback
#mission status
int32 IDLE =0
int32 ACTIVE =1
int32 SUCCESS =2
int32 ABORTED =3
int32 PAUSED =4


string index
string mission_id
int16 number
int16 status
anscer_msgs/ChargeInfo charge_info
float32 completion_percentage
int32 time_elapsed
int32 priority_level
"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['anscer_msgs/MissionActionGoal','anscer_msgs/MissionActionResult','anscer_msgs/MissionActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MissionAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = anscer_msgs.msg.MissionActionGoal()
      if self.action_result is None:
        self.action_result = anscer_msgs.msg.MissionActionResult()
      if self.action_feedback is None:
        self.action_feedback = anscer_msgs.msg.MissionActionFeedback()
    else:
      self.action_goal = anscer_msgs.msg.MissionActionGoal()
      self.action_result = anscer_msgs.msg.MissionActionResult()
      self.action_feedback = anscer_msgs.msg.MissionActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.loop_number
      buff.write(_get_struct_h().pack(_x))
      _x = self.action_goal.goal.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.mission_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.mission_list:
        _x = val1.index
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2hB().pack(_x.waypoint_index, _x.number, _x.activate))
        _v1 = val1.acr_info
        _x = _v1
        buff.write(_get_struct_3h2q().pack(_x.acr_shelf, _x.target_shelf, _x.acr_action, _x.bar_code_number, _x.whole_bin_number))
        _v2 = val1.charge_info
        _x = _v2
        buff.write(_get_struct_BiBfB().pack(_x.charger_activate, _x.charge_time, _x.ignore_time, _x.charge_percentage, _x.ignore_percentage))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.result.is_success
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.result.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.mission_feedback.index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.mission_feedback.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hBiBfBf2i().pack(_x.action_feedback.feedback.mission_feedback.number, _x.action_feedback.feedback.mission_feedback.status, _x.action_feedback.feedback.mission_feedback.charge_info.charger_activate, _x.action_feedback.feedback.mission_feedback.charge_info.charge_time, _x.action_feedback.feedback.mission_feedback.charge_info.ignore_time, _x.action_feedback.feedback.mission_feedback.charge_info.charge_percentage, _x.action_feedback.feedback.mission_feedback.charge_info.ignore_percentage, _x.action_feedback.feedback.mission_feedback.completion_percentage, _x.action_feedback.feedback.mission_feedback.time_elapsed, _x.action_feedback.feedback.mission_feedback.priority_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = anscer_msgs.msg.MissionActionGoal()
      if self.action_result is None:
        self.action_result = anscer_msgs.msg.MissionActionResult()
      if self.action_feedback is None:
        self.action_feedback = anscer_msgs.msg.MissionActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 2
      (self.action_goal.goal.loop_number,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.mission_list = []
      for i in range(0, length):
        val1 = anscer_msgs.msg.Task()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.index = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.index = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.waypoint_index, _x.number, _x.activate,) = _get_struct_2hB().unpack(str[start:end])
        val1.activate = bool(val1.activate)
        _v3 = val1.acr_info
        _x = _v3
        start = end
        end += 22
        (_x.acr_shelf, _x.target_shelf, _x.acr_action, _x.bar_code_number, _x.whole_bin_number,) = _get_struct_3h2q().unpack(str[start:end])
        _v4 = val1.charge_info
        _x = _v4
        start = end
        end += 11
        (_x.charger_activate, _x.charge_time, _x.ignore_time, _x.charge_percentage, _x.ignore_percentage,) = _get_struct_BiBfB().unpack(str[start:end])
        _v4.charger_activate = bool(_v4.charger_activate)
        _v4.ignore_time = bool(_v4.ignore_time)
        _v4.ignore_percentage = bool(_v4.ignore_percentage)
        self.action_goal.goal.mission_list.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 1
      (self.action_result.result.is_success,) = _get_struct_B().unpack(str[start:end])
      self.action_result.result.is_success = bool(self.action_result.result.is_success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.mission_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.mission_feedback.index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.mission_feedback.index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.mission_feedback.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.mission_feedback.mission_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.action_feedback.feedback.mission_feedback.number, _x.action_feedback.feedback.mission_feedback.status, _x.action_feedback.feedback.mission_feedback.charge_info.charger_activate, _x.action_feedback.feedback.mission_feedback.charge_info.charge_time, _x.action_feedback.feedback.mission_feedback.charge_info.ignore_time, _x.action_feedback.feedback.mission_feedback.charge_info.charge_percentage, _x.action_feedback.feedback.mission_feedback.charge_info.ignore_percentage, _x.action_feedback.feedback.mission_feedback.completion_percentage, _x.action_feedback.feedback.mission_feedback.time_elapsed, _x.action_feedback.feedback.mission_feedback.priority_level,) = _get_struct_2hBiBfBf2i().unpack(str[start:end])
      self.action_feedback.feedback.mission_feedback.charge_info.charger_activate = bool(self.action_feedback.feedback.mission_feedback.charge_info.charger_activate)
      self.action_feedback.feedback.mission_feedback.charge_info.ignore_time = bool(self.action_feedback.feedback.mission_feedback.charge_info.ignore_time)
      self.action_feedback.feedback.mission_feedback.charge_info.ignore_percentage = bool(self.action_feedback.feedback.mission_feedback.charge_info.ignore_percentage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.loop_number
      buff.write(_get_struct_h().pack(_x))
      _x = self.action_goal.goal.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.mission_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.mission_list:
        _x = val1.index
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2hB().pack(_x.waypoint_index, _x.number, _x.activate))
        _v5 = val1.acr_info
        _x = _v5
        buff.write(_get_struct_3h2q().pack(_x.acr_shelf, _x.target_shelf, _x.acr_action, _x.bar_code_number, _x.whole_bin_number))
        _v6 = val1.charge_info
        _x = _v6
        buff.write(_get_struct_BiBfB().pack(_x.charger_activate, _x.charge_time, _x.ignore_time, _x.charge_percentage, _x.ignore_percentage))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.result.is_success
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.result.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.mission_feedback.index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.mission_feedback.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hBiBfBf2i().pack(_x.action_feedback.feedback.mission_feedback.number, _x.action_feedback.feedback.mission_feedback.status, _x.action_feedback.feedback.mission_feedback.charge_info.charger_activate, _x.action_feedback.feedback.mission_feedback.charge_info.charge_time, _x.action_feedback.feedback.mission_feedback.charge_info.ignore_time, _x.action_feedback.feedback.mission_feedback.charge_info.charge_percentage, _x.action_feedback.feedback.mission_feedback.charge_info.ignore_percentage, _x.action_feedback.feedback.mission_feedback.completion_percentage, _x.action_feedback.feedback.mission_feedback.time_elapsed, _x.action_feedback.feedback.mission_feedback.priority_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = anscer_msgs.msg.MissionActionGoal()
      if self.action_result is None:
        self.action_result = anscer_msgs.msg.MissionActionResult()
      if self.action_feedback is None:
        self.action_feedback = anscer_msgs.msg.MissionActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 2
      (self.action_goal.goal.loop_number,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.mission_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.mission_list = []
      for i in range(0, length):
        val1 = anscer_msgs.msg.Task()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.index = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.index = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.waypoint_index, _x.number, _x.activate,) = _get_struct_2hB().unpack(str[start:end])
        val1.activate = bool(val1.activate)
        _v7 = val1.acr_info
        _x = _v7
        start = end
        end += 22
        (_x.acr_shelf, _x.target_shelf, _x.acr_action, _x.bar_code_number, _x.whole_bin_number,) = _get_struct_3h2q().unpack(str[start:end])
        _v8 = val1.charge_info
        _x = _v8
        start = end
        end += 11
        (_x.charger_activate, _x.charge_time, _x.ignore_time, _x.charge_percentage, _x.ignore_percentage,) = _get_struct_BiBfB().unpack(str[start:end])
        _v8.charger_activate = bool(_v8.charger_activate)
        _v8.ignore_time = bool(_v8.ignore_time)
        _v8.ignore_percentage = bool(_v8.ignore_percentage)
        self.action_goal.goal.mission_list.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 1
      (self.action_result.result.is_success,) = _get_struct_B().unpack(str[start:end])
      self.action_result.result.is_success = bool(self.action_result.result.is_success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.mission_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.mission_feedback.index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.mission_feedback.index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.mission_feedback.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.mission_feedback.mission_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.action_feedback.feedback.mission_feedback.number, _x.action_feedback.feedback.mission_feedback.status, _x.action_feedback.feedback.mission_feedback.charge_info.charger_activate, _x.action_feedback.feedback.mission_feedback.charge_info.charge_time, _x.action_feedback.feedback.mission_feedback.charge_info.ignore_time, _x.action_feedback.feedback.mission_feedback.charge_info.charge_percentage, _x.action_feedback.feedback.mission_feedback.charge_info.ignore_percentage, _x.action_feedback.feedback.mission_feedback.completion_percentage, _x.action_feedback.feedback.mission_feedback.time_elapsed, _x.action_feedback.feedback.mission_feedback.priority_level,) = _get_struct_2hBiBfBf2i().unpack(str[start:end])
      self.action_feedback.feedback.mission_feedback.charge_info.charger_activate = bool(self.action_feedback.feedback.mission_feedback.charge_info.charger_activate)
      self.action_feedback.feedback.mission_feedback.charge_info.ignore_time = bool(self.action_feedback.feedback.mission_feedback.charge_info.ignore_time)
      self.action_feedback.feedback.mission_feedback.charge_info.ignore_percentage = bool(self.action_feedback.feedback.mission_feedback.charge_info.ignore_percentage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2hB = None
def _get_struct_2hB():
    global _struct_2hB
    if _struct_2hB is None:
        _struct_2hB = struct.Struct("<2hB")
    return _struct_2hB
_struct_2hBiBfBf2i = None
def _get_struct_2hBiBfBf2i():
    global _struct_2hBiBfBf2i
    if _struct_2hBiBfBf2i is None:
        _struct_2hBiBfBf2i = struct.Struct("<2hBiBfBf2i")
    return _struct_2hBiBfBf2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3h2q = None
def _get_struct_3h2q():
    global _struct_3h2q
    if _struct_3h2q is None:
        _struct_3h2q = struct.Struct("<3h2q")
    return _struct_3h2q
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BiBfB = None
def _get_struct_BiBfB():
    global _struct_BiBfB
    if _struct_BiBfB is None:
        _struct_BiBfB = struct.Struct("<BiBfB")
    return _struct_BiBfB
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
