# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anscer_msgs/MotorDiagnostics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import anscer_msgs.msg

class MotorDiagnostics(genpy.Message):
  _md5sum = "0632e6a21795b5a1cc88be69506a4af5"
  _type = "anscer_msgs/MotorDiagnostics"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
MotorFaultFlags fault_flags
MotorStatusFlags status_flags

================================================================================
MSG: anscer_msgs/MotorFaultFlags
bool overheat
bool overvoltage
bool undervoltage
bool short_circuit
bool emergency_stop
bool motor_setup_fault
bool mosfet_failure
bool default_configuration

================================================================================
MSG: anscer_msgs/MotorStatusFlags
bool serial_mode
bool pulse_mode
bool analog_mode
bool power_stage_off
bool stall_detected
bool at_limit
bool unused
bool micro_basic_script_running
bool motor_tuning_mode
"""
  __slots__ = ['name','fault_flags','status_flags']
  _slot_types = ['string','anscer_msgs/MotorFaultFlags','anscer_msgs/MotorStatusFlags']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,fault_flags,status_flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorDiagnostics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.fault_flags is None:
        self.fault_flags = anscer_msgs.msg.MotorFaultFlags()
      if self.status_flags is None:
        self.status_flags = anscer_msgs.msg.MotorStatusFlags()
    else:
      self.name = ''
      self.fault_flags = anscer_msgs.msg.MotorFaultFlags()
      self.status_flags = anscer_msgs.msg.MotorStatusFlags()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17B().pack(_x.fault_flags.overheat, _x.fault_flags.overvoltage, _x.fault_flags.undervoltage, _x.fault_flags.short_circuit, _x.fault_flags.emergency_stop, _x.fault_flags.motor_setup_fault, _x.fault_flags.mosfet_failure, _x.fault_flags.default_configuration, _x.status_flags.serial_mode, _x.status_flags.pulse_mode, _x.status_flags.analog_mode, _x.status_flags.power_stage_off, _x.status_flags.stall_detected, _x.status_flags.at_limit, _x.status_flags.unused, _x.status_flags.micro_basic_script_running, _x.status_flags.motor_tuning_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fault_flags is None:
        self.fault_flags = anscer_msgs.msg.MotorFaultFlags()
      if self.status_flags is None:
        self.status_flags = anscer_msgs.msg.MotorStatusFlags()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.fault_flags.overheat, _x.fault_flags.overvoltage, _x.fault_flags.undervoltage, _x.fault_flags.short_circuit, _x.fault_flags.emergency_stop, _x.fault_flags.motor_setup_fault, _x.fault_flags.mosfet_failure, _x.fault_flags.default_configuration, _x.status_flags.serial_mode, _x.status_flags.pulse_mode, _x.status_flags.analog_mode, _x.status_flags.power_stage_off, _x.status_flags.stall_detected, _x.status_flags.at_limit, _x.status_flags.unused, _x.status_flags.micro_basic_script_running, _x.status_flags.motor_tuning_mode,) = _get_struct_17B().unpack(str[start:end])
      self.fault_flags.overheat = bool(self.fault_flags.overheat)
      self.fault_flags.overvoltage = bool(self.fault_flags.overvoltage)
      self.fault_flags.undervoltage = bool(self.fault_flags.undervoltage)
      self.fault_flags.short_circuit = bool(self.fault_flags.short_circuit)
      self.fault_flags.emergency_stop = bool(self.fault_flags.emergency_stop)
      self.fault_flags.motor_setup_fault = bool(self.fault_flags.motor_setup_fault)
      self.fault_flags.mosfet_failure = bool(self.fault_flags.mosfet_failure)
      self.fault_flags.default_configuration = bool(self.fault_flags.default_configuration)
      self.status_flags.serial_mode = bool(self.status_flags.serial_mode)
      self.status_flags.pulse_mode = bool(self.status_flags.pulse_mode)
      self.status_flags.analog_mode = bool(self.status_flags.analog_mode)
      self.status_flags.power_stage_off = bool(self.status_flags.power_stage_off)
      self.status_flags.stall_detected = bool(self.status_flags.stall_detected)
      self.status_flags.at_limit = bool(self.status_flags.at_limit)
      self.status_flags.unused = bool(self.status_flags.unused)
      self.status_flags.micro_basic_script_running = bool(self.status_flags.micro_basic_script_running)
      self.status_flags.motor_tuning_mode = bool(self.status_flags.motor_tuning_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17B().pack(_x.fault_flags.overheat, _x.fault_flags.overvoltage, _x.fault_flags.undervoltage, _x.fault_flags.short_circuit, _x.fault_flags.emergency_stop, _x.fault_flags.motor_setup_fault, _x.fault_flags.mosfet_failure, _x.fault_flags.default_configuration, _x.status_flags.serial_mode, _x.status_flags.pulse_mode, _x.status_flags.analog_mode, _x.status_flags.power_stage_off, _x.status_flags.stall_detected, _x.status_flags.at_limit, _x.status_flags.unused, _x.status_flags.micro_basic_script_running, _x.status_flags.motor_tuning_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fault_flags is None:
        self.fault_flags = anscer_msgs.msg.MotorFaultFlags()
      if self.status_flags is None:
        self.status_flags = anscer_msgs.msg.MotorStatusFlags()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.fault_flags.overheat, _x.fault_flags.overvoltage, _x.fault_flags.undervoltage, _x.fault_flags.short_circuit, _x.fault_flags.emergency_stop, _x.fault_flags.motor_setup_fault, _x.fault_flags.mosfet_failure, _x.fault_flags.default_configuration, _x.status_flags.serial_mode, _x.status_flags.pulse_mode, _x.status_flags.analog_mode, _x.status_flags.power_stage_off, _x.status_flags.stall_detected, _x.status_flags.at_limit, _x.status_flags.unused, _x.status_flags.micro_basic_script_running, _x.status_flags.motor_tuning_mode,) = _get_struct_17B().unpack(str[start:end])
      self.fault_flags.overheat = bool(self.fault_flags.overheat)
      self.fault_flags.overvoltage = bool(self.fault_flags.overvoltage)
      self.fault_flags.undervoltage = bool(self.fault_flags.undervoltage)
      self.fault_flags.short_circuit = bool(self.fault_flags.short_circuit)
      self.fault_flags.emergency_stop = bool(self.fault_flags.emergency_stop)
      self.fault_flags.motor_setup_fault = bool(self.fault_flags.motor_setup_fault)
      self.fault_flags.mosfet_failure = bool(self.fault_flags.mosfet_failure)
      self.fault_flags.default_configuration = bool(self.fault_flags.default_configuration)
      self.status_flags.serial_mode = bool(self.status_flags.serial_mode)
      self.status_flags.pulse_mode = bool(self.status_flags.pulse_mode)
      self.status_flags.analog_mode = bool(self.status_flags.analog_mode)
      self.status_flags.power_stage_off = bool(self.status_flags.power_stage_off)
      self.status_flags.stall_detected = bool(self.status_flags.stall_detected)
      self.status_flags.at_limit = bool(self.status_flags.at_limit)
      self.status_flags.unused = bool(self.status_flags.unused)
      self.status_flags.micro_basic_script_running = bool(self.status_flags.micro_basic_script_running)
      self.status_flags.motor_tuning_mode = bool(self.status_flags.motor_tuning_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17B = None
def _get_struct_17B():
    global _struct_17B
    if _struct_17B is None:
        _struct_17B = struct.Struct("<17B")
    return _struct_17B
