# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wms_data/WMSData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WMSData(genpy.Message):
  _md5sum = "338f7a7211a5e9f2655096004ac2e21e"
  _type = "wms_data/WMSData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string unique_id
string date
int16 priority
int16 rack
int16 shelf
int16 bin
bool action
bool status
string ean_code
string putaway_code
int16 acr_shelf
string whole_bin_no
string core
string level
string year
string date_data
string serial_no
"""
  __slots__ = ['unique_id','date','priority','rack','shelf','bin','action','status','ean_code','putaway_code','acr_shelf','whole_bin_no','core','level','year','date_data','serial_no']
  _slot_types = ['string','string','int16','int16','int16','int16','bool','bool','string','string','int16','string','string','string','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       unique_id,date,priority,rack,shelf,bin,action,status,ean_code,putaway_code,acr_shelf,whole_bin_no,core,level,year,date_data,serial_no

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WMSData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.unique_id is None:
        self.unique_id = ''
      if self.date is None:
        self.date = ''
      if self.priority is None:
        self.priority = 0
      if self.rack is None:
        self.rack = 0
      if self.shelf is None:
        self.shelf = 0
      if self.bin is None:
        self.bin = 0
      if self.action is None:
        self.action = False
      if self.status is None:
        self.status = False
      if self.ean_code is None:
        self.ean_code = ''
      if self.putaway_code is None:
        self.putaway_code = ''
      if self.acr_shelf is None:
        self.acr_shelf = 0
      if self.whole_bin_no is None:
        self.whole_bin_no = ''
      if self.core is None:
        self.core = ''
      if self.level is None:
        self.level = ''
      if self.year is None:
        self.year = ''
      if self.date_data is None:
        self.date_data = ''
      if self.serial_no is None:
        self.serial_no = ''
    else:
      self.unique_id = ''
      self.date = ''
      self.priority = 0
      self.rack = 0
      self.shelf = 0
      self.bin = 0
      self.action = False
      self.status = False
      self.ean_code = ''
      self.putaway_code = ''
      self.acr_shelf = 0
      self.whole_bin_no = ''
      self.core = ''
      self.level = ''
      self.year = ''
      self.date_data = ''
      self.serial_no = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.unique_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4h2B().pack(_x.priority, _x.rack, _x.shelf, _x.bin, _x.action, _x.status))
      _x = self.ean_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.putaway_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.acr_shelf
      buff.write(_get_struct_h().pack(_x))
      _x = self.whole_bin_no
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.core
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.level
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.year
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.date_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.serial_no
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.unique_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.date = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.priority, _x.rack, _x.shelf, _x.bin, _x.action, _x.status,) = _get_struct_4h2B().unpack(str[start:end])
      self.action = bool(self.action)
      self.status = bool(self.status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ean_code = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ean_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.putaway_code = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.putaway_code = str[start:end]
      start = end
      end += 2
      (self.acr_shelf,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.whole_bin_no = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.whole_bin_no = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.core = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.core = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.level = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.level = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.year = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.year = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.date_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serial_no = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.serial_no = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.unique_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.date
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4h2B().pack(_x.priority, _x.rack, _x.shelf, _x.bin, _x.action, _x.status))
      _x = self.ean_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.putaway_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.acr_shelf
      buff.write(_get_struct_h().pack(_x))
      _x = self.whole_bin_no
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.core
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.level
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.year
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.date_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.serial_no
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.unique_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.date = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.priority, _x.rack, _x.shelf, _x.bin, _x.action, _x.status,) = _get_struct_4h2B().unpack(str[start:end])
      self.action = bool(self.action)
      self.status = bool(self.status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ean_code = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ean_code = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.putaway_code = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.putaway_code = str[start:end]
      start = end
      end += 2
      (self.acr_shelf,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.whole_bin_no = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.whole_bin_no = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.core = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.core = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.level = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.level = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.year = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.year = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.date_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.date_data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serial_no = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.serial_no = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4h2B = None
def _get_struct_4h2B():
    global _struct_4h2B
    if _struct_4h2B is None:
        _struct_4h2B = struct.Struct("<4h2B")
    return _struct_4h2B
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
