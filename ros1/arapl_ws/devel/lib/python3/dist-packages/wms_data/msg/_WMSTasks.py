# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wms_data/WMSTasks.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import wms_data.msg

class WMSTasks(genpy.Message):
  _md5sum = "e9c22e6c13dccc15f5397cda86a34fd5"
  _type = "wms_data/WMSTasks"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """wms_data/WMSData[] tasks

================================================================================
MSG: wms_data/WMSData
string unique_id
string date
int16 priority
int16 rack
int16 shelf
int16 bin
bool action
bool status
string ean_code
string putaway_code
int16 acr_shelf
string whole_bin_no
string core
string level
string year
string date_data
string serial_no
"""
  __slots__ = ['tasks']
  _slot_types = ['wms_data/WMSData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tasks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WMSTasks, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tasks is None:
        self.tasks = []
    else:
      self.tasks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tasks:
        _x = val1.unique_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.date
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4h2B().pack(_x.priority, _x.rack, _x.shelf, _x.bin, _x.action, _x.status))
        _x = val1.ean_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.putaway_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.acr_shelf
        buff.write(_get_struct_h().pack(_x))
        _x = val1.whole_bin_no
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.core
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.level
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.year
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.date_data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.serial_no
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tasks is None:
        self.tasks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tasks = []
      for i in range(0, length):
        val1 = wms_data.msg.WMSData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.unique_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.unique_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.date = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.date = str[start:end]
        _x = val1
        start = end
        end += 10
        (_x.priority, _x.rack, _x.shelf, _x.bin, _x.action, _x.status,) = _get_struct_4h2B().unpack(str[start:end])
        val1.action = bool(val1.action)
        val1.status = bool(val1.status)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ean_code = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ean_code = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.putaway_code = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.putaway_code = str[start:end]
        start = end
        end += 2
        (val1.acr_shelf,) = _get_struct_h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.whole_bin_no = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.whole_bin_no = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.core = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.core = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.level = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.level = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.year = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.year = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.date_data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.date_data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.serial_no = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.serial_no = str[start:end]
        self.tasks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tasks:
        _x = val1.unique_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.date
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4h2B().pack(_x.priority, _x.rack, _x.shelf, _x.bin, _x.action, _x.status))
        _x = val1.ean_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.putaway_code
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.acr_shelf
        buff.write(_get_struct_h().pack(_x))
        _x = val1.whole_bin_no
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.core
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.level
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.year
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.date_data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.serial_no
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tasks is None:
        self.tasks = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tasks = []
      for i in range(0, length):
        val1 = wms_data.msg.WMSData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.unique_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.unique_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.date = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.date = str[start:end]
        _x = val1
        start = end
        end += 10
        (_x.priority, _x.rack, _x.shelf, _x.bin, _x.action, _x.status,) = _get_struct_4h2B().unpack(str[start:end])
        val1.action = bool(val1.action)
        val1.status = bool(val1.status)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ean_code = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ean_code = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.putaway_code = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.putaway_code = str[start:end]
        start = end
        end += 2
        (val1.acr_shelf,) = _get_struct_h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.whole_bin_no = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.whole_bin_no = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.core = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.core = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.level = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.level = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.year = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.year = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.date_data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.date_data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.serial_no = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.serial_no = str[start:end]
        self.tasks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4h2B = None
def _get_struct_4h2B():
    global _struct_4h2B
    if _struct_4h2B is None:
        _struct_4h2B = struct.Struct("<4h2B")
    return _struct_4h2B
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
