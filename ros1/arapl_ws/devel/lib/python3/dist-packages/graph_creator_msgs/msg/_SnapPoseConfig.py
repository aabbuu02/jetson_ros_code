# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graph_creator_msgs/SnapPoseConfig.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SnapPoseConfig(genpy.Message):
  _md5sum = "523ee3105beaf49ae3b84f7e22ff96ed"
  _type = "graph_creator_msgs/SnapPoseConfig"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool enable_for_vertices            # Enable snap position and orientation for vertices
bool enable_for_edges               # Enable snap position and orientation for edge elements

bool enable_position_snap           # Whether to enable position snap
bool enable_orientation_snap        # Whether to enable orientation snap

float64 position_snap_grid_size     # Position snap grid size in meters
float64 orientation_snap_angle      # Orientation snap angle in radians """
  __slots__ = ['enable_for_vertices','enable_for_edges','enable_position_snap','enable_orientation_snap','position_snap_grid_size','orientation_snap_angle']
  _slot_types = ['bool','bool','bool','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enable_for_vertices,enable_for_edges,enable_position_snap,enable_orientation_snap,position_snap_grid_size,orientation_snap_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SnapPoseConfig, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enable_for_vertices is None:
        self.enable_for_vertices = False
      if self.enable_for_edges is None:
        self.enable_for_edges = False
      if self.enable_position_snap is None:
        self.enable_position_snap = False
      if self.enable_orientation_snap is None:
        self.enable_orientation_snap = False
      if self.position_snap_grid_size is None:
        self.position_snap_grid_size = 0.
      if self.orientation_snap_angle is None:
        self.orientation_snap_angle = 0.
    else:
      self.enable_for_vertices = False
      self.enable_for_edges = False
      self.enable_position_snap = False
      self.enable_orientation_snap = False
      self.position_snap_grid_size = 0.
      self.orientation_snap_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B2d().pack(_x.enable_for_vertices, _x.enable_for_edges, _x.enable_position_snap, _x.enable_orientation_snap, _x.position_snap_grid_size, _x.orientation_snap_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.enable_for_vertices, _x.enable_for_edges, _x.enable_position_snap, _x.enable_orientation_snap, _x.position_snap_grid_size, _x.orientation_snap_angle,) = _get_struct_4B2d().unpack(str[start:end])
      self.enable_for_vertices = bool(self.enable_for_vertices)
      self.enable_for_edges = bool(self.enable_for_edges)
      self.enable_position_snap = bool(self.enable_position_snap)
      self.enable_orientation_snap = bool(self.enable_orientation_snap)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B2d().pack(_x.enable_for_vertices, _x.enable_for_edges, _x.enable_position_snap, _x.enable_orientation_snap, _x.position_snap_grid_size, _x.orientation_snap_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.enable_for_vertices, _x.enable_for_edges, _x.enable_position_snap, _x.enable_orientation_snap, _x.position_snap_grid_size, _x.orientation_snap_angle,) = _get_struct_4B2d().unpack(str[start:end])
      self.enable_for_vertices = bool(self.enable_for_vertices)
      self.enable_for_edges = bool(self.enable_for_edges)
      self.enable_position_snap = bool(self.enable_position_snap)
      self.enable_orientation_snap = bool(self.enable_orientation_snap)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B2d = None
def _get_struct_4B2d():
    global _struct_4B2d
    if _struct_4B2d is None:
        _struct_4B2d = struct.Struct("<4B2d")
    return _struct_4B2d
