# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graph_creator_msgs/GraphGeneratorConfig.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import graph_creator_msgs.msg

class GraphGeneratorConfig(genpy.Message):
  _md5sum = "d549626c784b6f02d6bb8ede7bb25247"
  _type = "graph_creator_msgs/GraphGeneratorConfig"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 GRAPH_GENERATION_TYPE_GRID=0
uint8 GRAPH_GENERATION_TYPE_DXF=1

uint8 generation_type
EdgeCreationType edge_creation_type
EdgeDirectionCreationType edge_direction_type
bool ignore_vertex_orientation                      # Ignore vertex orientation
bool use_edge_count_threshold                       # Use edge count threshold to ignore orientation
uint32 edge_count_threshold                         # Edge count threshold

# For generating graph from DXF files
string dxf_file_path                                # File paths can be either relative to a package or absolute
float32 scale_x
float32 scale_y

# For generating grid graphs
geometry_msgs/Pose start_pose
uint32 rows                                         # Rows are along Y-axis
uint32 columns                                      # Columns are along X-axis
float32 row_spacing                                 # Spacing between two vertices along the Y-axis
float32 column_spacing                              # Spacing between two vertics along the X-axis

================================================================================
MSG: graph_creator_msgs/EdgeCreationType
uint8 EDGE_CREATION_TYPE_STRAIGHT_LINE=0
uint8 EDGE_CREATION_TYPE_CUBIC_BEZIER=1

uint8 type
================================================================================
MSG: graph_creator_msgs/EdgeDirectionCreationType
uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0
uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1
uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2

uint8 direction_type


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  GRAPH_GENERATION_TYPE_GRID = 0
  GRAPH_GENERATION_TYPE_DXF = 1

  __slots__ = ['generation_type','edge_creation_type','edge_direction_type','ignore_vertex_orientation','use_edge_count_threshold','edge_count_threshold','dxf_file_path','scale_x','scale_y','start_pose','rows','columns','row_spacing','column_spacing']
  _slot_types = ['uint8','graph_creator_msgs/EdgeCreationType','graph_creator_msgs/EdgeDirectionCreationType','bool','bool','uint32','string','float32','float32','geometry_msgs/Pose','uint32','uint32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       generation_type,edge_creation_type,edge_direction_type,ignore_vertex_orientation,use_edge_count_threshold,edge_count_threshold,dxf_file_path,scale_x,scale_y,start_pose,rows,columns,row_spacing,column_spacing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraphGeneratorConfig, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.generation_type is None:
        self.generation_type = 0
      if self.edge_creation_type is None:
        self.edge_creation_type = graph_creator_msgs.msg.EdgeCreationType()
      if self.edge_direction_type is None:
        self.edge_direction_type = graph_creator_msgs.msg.EdgeDirectionCreationType()
      if self.ignore_vertex_orientation is None:
        self.ignore_vertex_orientation = False
      if self.use_edge_count_threshold is None:
        self.use_edge_count_threshold = False
      if self.edge_count_threshold is None:
        self.edge_count_threshold = 0
      if self.dxf_file_path is None:
        self.dxf_file_path = ''
      if self.scale_x is None:
        self.scale_x = 0.
      if self.scale_y is None:
        self.scale_y = 0.
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.Pose()
      if self.rows is None:
        self.rows = 0
      if self.columns is None:
        self.columns = 0
      if self.row_spacing is None:
        self.row_spacing = 0.
      if self.column_spacing is None:
        self.column_spacing = 0.
    else:
      self.generation_type = 0
      self.edge_creation_type = graph_creator_msgs.msg.EdgeCreationType()
      self.edge_direction_type = graph_creator_msgs.msg.EdgeDirectionCreationType()
      self.ignore_vertex_orientation = False
      self.use_edge_count_threshold = False
      self.edge_count_threshold = 0
      self.dxf_file_path = ''
      self.scale_x = 0.
      self.scale_y = 0.
      self.start_pose = geometry_msgs.msg.Pose()
      self.rows = 0
      self.columns = 0
      self.row_spacing = 0.
      self.column_spacing = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5BI().pack(_x.generation_type, _x.edge_creation_type.type, _x.edge_direction_type.direction_type, _x.ignore_vertex_orientation, _x.use_edge_count_threshold, _x.edge_count_threshold))
      _x = self.dxf_file_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f7d2I2f().pack(_x.scale_x, _x.scale_y, _x.start_pose.position.x, _x.start_pose.position.y, _x.start_pose.position.z, _x.start_pose.orientation.x, _x.start_pose.orientation.y, _x.start_pose.orientation.z, _x.start_pose.orientation.w, _x.rows, _x.columns, _x.row_spacing, _x.column_spacing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.edge_creation_type is None:
        self.edge_creation_type = graph_creator_msgs.msg.EdgeCreationType()
      if self.edge_direction_type is None:
        self.edge_direction_type = graph_creator_msgs.msg.EdgeDirectionCreationType()
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.generation_type, _x.edge_creation_type.type, _x.edge_direction_type.direction_type, _x.ignore_vertex_orientation, _x.use_edge_count_threshold, _x.edge_count_threshold,) = _get_struct_5BI().unpack(str[start:end])
      self.ignore_vertex_orientation = bool(self.ignore_vertex_orientation)
      self.use_edge_count_threshold = bool(self.use_edge_count_threshold)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dxf_file_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dxf_file_path = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.scale_x, _x.scale_y, _x.start_pose.position.x, _x.start_pose.position.y, _x.start_pose.position.z, _x.start_pose.orientation.x, _x.start_pose.orientation.y, _x.start_pose.orientation.z, _x.start_pose.orientation.w, _x.rows, _x.columns, _x.row_spacing, _x.column_spacing,) = _get_struct_2f7d2I2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5BI().pack(_x.generation_type, _x.edge_creation_type.type, _x.edge_direction_type.direction_type, _x.ignore_vertex_orientation, _x.use_edge_count_threshold, _x.edge_count_threshold))
      _x = self.dxf_file_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f7d2I2f().pack(_x.scale_x, _x.scale_y, _x.start_pose.position.x, _x.start_pose.position.y, _x.start_pose.position.z, _x.start_pose.orientation.x, _x.start_pose.orientation.y, _x.start_pose.orientation.z, _x.start_pose.orientation.w, _x.rows, _x.columns, _x.row_spacing, _x.column_spacing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.edge_creation_type is None:
        self.edge_creation_type = graph_creator_msgs.msg.EdgeCreationType()
      if self.edge_direction_type is None:
        self.edge_direction_type = graph_creator_msgs.msg.EdgeDirectionCreationType()
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.generation_type, _x.edge_creation_type.type, _x.edge_direction_type.direction_type, _x.ignore_vertex_orientation, _x.use_edge_count_threshold, _x.edge_count_threshold,) = _get_struct_5BI().unpack(str[start:end])
      self.ignore_vertex_orientation = bool(self.ignore_vertex_orientation)
      self.use_edge_count_threshold = bool(self.use_edge_count_threshold)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dxf_file_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.dxf_file_path = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.scale_x, _x.scale_y, _x.start_pose.position.x, _x.start_pose.position.y, _x.start_pose.position.z, _x.start_pose.orientation.x, _x.start_pose.orientation.y, _x.start_pose.orientation.z, _x.start_pose.orientation.w, _x.rows, _x.columns, _x.row_spacing, _x.column_spacing,) = _get_struct_2f7d2I2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f7d2I2f = None
def _get_struct_2f7d2I2f():
    global _struct_2f7d2I2f
    if _struct_2f7d2I2f is None:
        _struct_2f7d2I2f = struct.Struct("<2f7d2I2f")
    return _struct_2f7d2I2f
_struct_5BI = None
def _get_struct_5BI():
    global _struct_5BI
    if _struct_5BI is None:
        _struct_5BI = struct.Struct("<5BI")
    return _struct_5BI
