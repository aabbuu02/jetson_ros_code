# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graph_creator_msgs/GetGraphCreatorStateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetGraphCreatorStateRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "graph_creator_msgs/GetGraphCreatorStateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetGraphCreatorStateRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graph_creator_msgs/GetGraphCreatorStateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import graph_creator_msgs.msg

class GetGraphCreatorStateResponse(genpy.Message):
  _md5sum = "258429896b8cdbd7d95bd163ecc5ab51"
  _type = "graph_creator_msgs/GetGraphCreatorStateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """graph_creator_msgs/GraphCreatorState state

bool success
string message

================================================================================
MSG: graph_creator_msgs/GraphCreatorState
graph_creator_msgs/GraphCreatorMode graph_creator_mode
graph_creator_msgs/EdgeCreationType edge_creation_type
graph_creator_msgs/EdgeDirectionCreationType edge_direction_creation_type
graph_creator_msgs/SnapPoseConfig snap_pose_config
bool all_vertices_locked
bool all_edges_locked
================================================================================
MSG: graph_creator_msgs/GraphCreatorMode
uint8 GRAPH_CREATOR_MODE_CREATE_VERTICES=0
uint8 GRAPH_CREATOR_MODE_CREATE_EDGES=1

uint8 mode

================================================================================
MSG: graph_creator_msgs/EdgeCreationType
uint8 EDGE_CREATION_TYPE_STRAIGHT_LINE=0
uint8 EDGE_CREATION_TYPE_CUBIC_BEZIER=1

uint8 type
================================================================================
MSG: graph_creator_msgs/EdgeDirectionCreationType
uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0
uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1
uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2

uint8 direction_type


================================================================================
MSG: graph_creator_msgs/SnapPoseConfig
bool enable_for_vertices            # Enable snap position and orientation for vertices
bool enable_for_edges               # Enable snap position and orientation for edge elements

bool enable_position_snap           # Whether to enable position snap
bool enable_orientation_snap        # Whether to enable orientation snap

float64 position_snap_grid_size     # Position snap grid size in meters
float64 orientation_snap_angle      # Orientation snap angle in radians """
  __slots__ = ['state','success','message']
  _slot_types = ['graph_creator_msgs/GraphCreatorState','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,success,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetGraphCreatorStateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = graph_creator_msgs.msg.GraphCreatorState()
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
    else:
      self.state = graph_creator_msgs.msg.GraphCreatorState()
      self.success = False
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B2d3B().pack(_x.state.graph_creator_mode.mode, _x.state.edge_creation_type.type, _x.state.edge_direction_creation_type.direction_type, _x.state.snap_pose_config.enable_for_vertices, _x.state.snap_pose_config.enable_for_edges, _x.state.snap_pose_config.enable_position_snap, _x.state.snap_pose_config.enable_orientation_snap, _x.state.snap_pose_config.position_snap_grid_size, _x.state.snap_pose_config.orientation_snap_angle, _x.state.all_vertices_locked, _x.state.all_edges_locked, _x.success))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = graph_creator_msgs.msg.GraphCreatorState()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.state.graph_creator_mode.mode, _x.state.edge_creation_type.type, _x.state.edge_direction_creation_type.direction_type, _x.state.snap_pose_config.enable_for_vertices, _x.state.snap_pose_config.enable_for_edges, _x.state.snap_pose_config.enable_position_snap, _x.state.snap_pose_config.enable_orientation_snap, _x.state.snap_pose_config.position_snap_grid_size, _x.state.snap_pose_config.orientation_snap_angle, _x.state.all_vertices_locked, _x.state.all_edges_locked, _x.success,) = _get_struct_7B2d3B().unpack(str[start:end])
      self.state.snap_pose_config.enable_for_vertices = bool(self.state.snap_pose_config.enable_for_vertices)
      self.state.snap_pose_config.enable_for_edges = bool(self.state.snap_pose_config.enable_for_edges)
      self.state.snap_pose_config.enable_position_snap = bool(self.state.snap_pose_config.enable_position_snap)
      self.state.snap_pose_config.enable_orientation_snap = bool(self.state.snap_pose_config.enable_orientation_snap)
      self.state.all_vertices_locked = bool(self.state.all_vertices_locked)
      self.state.all_edges_locked = bool(self.state.all_edges_locked)
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B2d3B().pack(_x.state.graph_creator_mode.mode, _x.state.edge_creation_type.type, _x.state.edge_direction_creation_type.direction_type, _x.state.snap_pose_config.enable_for_vertices, _x.state.snap_pose_config.enable_for_edges, _x.state.snap_pose_config.enable_position_snap, _x.state.snap_pose_config.enable_orientation_snap, _x.state.snap_pose_config.position_snap_grid_size, _x.state.snap_pose_config.orientation_snap_angle, _x.state.all_vertices_locked, _x.state.all_edges_locked, _x.success))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = graph_creator_msgs.msg.GraphCreatorState()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.state.graph_creator_mode.mode, _x.state.edge_creation_type.type, _x.state.edge_direction_creation_type.direction_type, _x.state.snap_pose_config.enable_for_vertices, _x.state.snap_pose_config.enable_for_edges, _x.state.snap_pose_config.enable_position_snap, _x.state.snap_pose_config.enable_orientation_snap, _x.state.snap_pose_config.position_snap_grid_size, _x.state.snap_pose_config.orientation_snap_angle, _x.state.all_vertices_locked, _x.state.all_edges_locked, _x.success,) = _get_struct_7B2d3B().unpack(str[start:end])
      self.state.snap_pose_config.enable_for_vertices = bool(self.state.snap_pose_config.enable_for_vertices)
      self.state.snap_pose_config.enable_for_edges = bool(self.state.snap_pose_config.enable_for_edges)
      self.state.snap_pose_config.enable_position_snap = bool(self.state.snap_pose_config.enable_position_snap)
      self.state.snap_pose_config.enable_orientation_snap = bool(self.state.snap_pose_config.enable_orientation_snap)
      self.state.all_vertices_locked = bool(self.state.all_vertices_locked)
      self.state.all_edges_locked = bool(self.state.all_edges_locked)
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B2d3B = None
def _get_struct_7B2d3B():
    global _struct_7B2d3B
    if _struct_7B2d3B is None:
        _struct_7B2d3B = struct.Struct("<7B2d3B")
    return _struct_7B2d3B
class GetGraphCreatorState(object):
  _type          = 'graph_creator_msgs/GetGraphCreatorState'
  _md5sum = '258429896b8cdbd7d95bd163ecc5ab51'
  _request_class  = GetGraphCreatorStateRequest
  _response_class = GetGraphCreatorStateResponse
