# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graph_creator_msgs/GenerateGraphRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import graph_creator_msgs.msg

class GenerateGraphRequest(genpy.Message):
  _md5sum = "536767deea0d0151bb7f511a9b5ef5d6"
  _type = "graph_creator_msgs/GenerateGraphRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """GraphGeneratorConfig graph_generator_config

================================================================================
MSG: graph_creator_msgs/GraphGeneratorConfig
uint8 GRAPH_GENERATION_TYPE_GRID=0
uint8 GRAPH_GENERATION_TYPE_DXF=1

uint8 generation_type
EdgeCreationType edge_creation_type
EdgeDirectionCreationType edge_direction_type
bool ignore_vertex_orientation                      # Ignore vertex orientation
bool use_edge_count_threshold                       # Use edge count threshold to ignore orientation
uint32 edge_count_threshold                         # Edge count threshold

# For generating graph from DXF files
string dxf_file_path                                # File paths can be either relative to a package or absolute
float32 scale_x
float32 scale_y

# For generating grid graphs
geometry_msgs/Pose start_pose
uint32 rows                                         # Rows are along Y-axis
uint32 columns                                      # Columns are along X-axis
float32 row_spacing                                 # Spacing between two vertices along the Y-axis
float32 column_spacing                              # Spacing between two vertics along the X-axis

================================================================================
MSG: graph_creator_msgs/EdgeCreationType
uint8 EDGE_CREATION_TYPE_STRAIGHT_LINE=0
uint8 EDGE_CREATION_TYPE_CUBIC_BEZIER=1

uint8 type
================================================================================
MSG: graph_creator_msgs/EdgeDirectionCreationType
uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0
uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1
uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2

uint8 direction_type


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['graph_generator_config']
  _slot_types = ['graph_creator_msgs/GraphGeneratorConfig']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       graph_generator_config

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GenerateGraphRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.graph_generator_config is None:
        self.graph_generator_config = graph_creator_msgs.msg.GraphGeneratorConfig()
    else:
      self.graph_generator_config = graph_creator_msgs.msg.GraphGeneratorConfig()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5BI().pack(_x.graph_generator_config.generation_type, _x.graph_generator_config.edge_creation_type.type, _x.graph_generator_config.edge_direction_type.direction_type, _x.graph_generator_config.ignore_vertex_orientation, _x.graph_generator_config.use_edge_count_threshold, _x.graph_generator_config.edge_count_threshold))
      _x = self.graph_generator_config.dxf_file_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f7d2I2f().pack(_x.graph_generator_config.scale_x, _x.graph_generator_config.scale_y, _x.graph_generator_config.start_pose.position.x, _x.graph_generator_config.start_pose.position.y, _x.graph_generator_config.start_pose.position.z, _x.graph_generator_config.start_pose.orientation.x, _x.graph_generator_config.start_pose.orientation.y, _x.graph_generator_config.start_pose.orientation.z, _x.graph_generator_config.start_pose.orientation.w, _x.graph_generator_config.rows, _x.graph_generator_config.columns, _x.graph_generator_config.row_spacing, _x.graph_generator_config.column_spacing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.graph_generator_config is None:
        self.graph_generator_config = graph_creator_msgs.msg.GraphGeneratorConfig()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.graph_generator_config.generation_type, _x.graph_generator_config.edge_creation_type.type, _x.graph_generator_config.edge_direction_type.direction_type, _x.graph_generator_config.ignore_vertex_orientation, _x.graph_generator_config.use_edge_count_threshold, _x.graph_generator_config.edge_count_threshold,) = _get_struct_5BI().unpack(str[start:end])
      self.graph_generator_config.ignore_vertex_orientation = bool(self.graph_generator_config.ignore_vertex_orientation)
      self.graph_generator_config.use_edge_count_threshold = bool(self.graph_generator_config.use_edge_count_threshold)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.graph_generator_config.dxf_file_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.graph_generator_config.dxf_file_path = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.graph_generator_config.scale_x, _x.graph_generator_config.scale_y, _x.graph_generator_config.start_pose.position.x, _x.graph_generator_config.start_pose.position.y, _x.graph_generator_config.start_pose.position.z, _x.graph_generator_config.start_pose.orientation.x, _x.graph_generator_config.start_pose.orientation.y, _x.graph_generator_config.start_pose.orientation.z, _x.graph_generator_config.start_pose.orientation.w, _x.graph_generator_config.rows, _x.graph_generator_config.columns, _x.graph_generator_config.row_spacing, _x.graph_generator_config.column_spacing,) = _get_struct_2f7d2I2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5BI().pack(_x.graph_generator_config.generation_type, _x.graph_generator_config.edge_creation_type.type, _x.graph_generator_config.edge_direction_type.direction_type, _x.graph_generator_config.ignore_vertex_orientation, _x.graph_generator_config.use_edge_count_threshold, _x.graph_generator_config.edge_count_threshold))
      _x = self.graph_generator_config.dxf_file_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f7d2I2f().pack(_x.graph_generator_config.scale_x, _x.graph_generator_config.scale_y, _x.graph_generator_config.start_pose.position.x, _x.graph_generator_config.start_pose.position.y, _x.graph_generator_config.start_pose.position.z, _x.graph_generator_config.start_pose.orientation.x, _x.graph_generator_config.start_pose.orientation.y, _x.graph_generator_config.start_pose.orientation.z, _x.graph_generator_config.start_pose.orientation.w, _x.graph_generator_config.rows, _x.graph_generator_config.columns, _x.graph_generator_config.row_spacing, _x.graph_generator_config.column_spacing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.graph_generator_config is None:
        self.graph_generator_config = graph_creator_msgs.msg.GraphGeneratorConfig()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.graph_generator_config.generation_type, _x.graph_generator_config.edge_creation_type.type, _x.graph_generator_config.edge_direction_type.direction_type, _x.graph_generator_config.ignore_vertex_orientation, _x.graph_generator_config.use_edge_count_threshold, _x.graph_generator_config.edge_count_threshold,) = _get_struct_5BI().unpack(str[start:end])
      self.graph_generator_config.ignore_vertex_orientation = bool(self.graph_generator_config.ignore_vertex_orientation)
      self.graph_generator_config.use_edge_count_threshold = bool(self.graph_generator_config.use_edge_count_threshold)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.graph_generator_config.dxf_file_path = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.graph_generator_config.dxf_file_path = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.graph_generator_config.scale_x, _x.graph_generator_config.scale_y, _x.graph_generator_config.start_pose.position.x, _x.graph_generator_config.start_pose.position.y, _x.graph_generator_config.start_pose.position.z, _x.graph_generator_config.start_pose.orientation.x, _x.graph_generator_config.start_pose.orientation.y, _x.graph_generator_config.start_pose.orientation.z, _x.graph_generator_config.start_pose.orientation.w, _x.graph_generator_config.rows, _x.graph_generator_config.columns, _x.graph_generator_config.row_spacing, _x.graph_generator_config.column_spacing,) = _get_struct_2f7d2I2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f7d2I2f = None
def _get_struct_2f7d2I2f():
    global _struct_2f7d2I2f
    if _struct_2f7d2I2f is None:
        _struct_2f7d2I2f = struct.Struct("<2f7d2I2f")
    return _struct_2f7d2I2f
_struct_5BI = None
def _get_struct_5BI():
    global _struct_5BI
    if _struct_5BI is None:
        _struct_5BI = struct.Struct("<5BI")
    return _struct_5BI
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graph_creator_msgs/GenerateGraphResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GenerateGraphResponse(genpy.Message):
  _md5sum = "937c9679a518e3a18d831e57125ea522"
  _type = "graph_creator_msgs/GenerateGraphResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
string message
"""
  __slots__ = ['success','message']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GenerateGraphResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
    else:
      self.success = False
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class GenerateGraph(object):
  _type          = 'graph_creator_msgs/GenerateGraph'
  _md5sum = 'd85b195d5e52e94013ad042183fa42f4'
  _request_class  = GenerateGraphRequest
  _response_class = GenerateGraphResponse
