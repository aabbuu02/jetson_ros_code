// Auto-generated. Do not edit!

// (in-package anscer_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class LiftFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.lifter_feedback = null;
      this.lifter_status = null;
    }
    else {
      if (initObj.hasOwnProperty('lifter_feedback')) {
        this.lifter_feedback = initObj.lifter_feedback
      }
      else {
        this.lifter_feedback = 0;
      }
      if (initObj.hasOwnProperty('lifter_status')) {
        this.lifter_status = initObj.lifter_status
      }
      else {
        this.lifter_status = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type LiftFeedback
    // Serialize message field [lifter_feedback]
    bufferOffset = _serializer.int8(obj.lifter_feedback, buffer, bufferOffset);
    // Serialize message field [lifter_status]
    bufferOffset = _serializer.string(obj.lifter_status, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type LiftFeedback
    let len;
    let data = new LiftFeedback(null);
    // Deserialize message field [lifter_feedback]
    data.lifter_feedback = _deserializer.int8(buffer, bufferOffset);
    // Deserialize message field [lifter_status]
    data.lifter_status = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.lifter_status);
    return length + 5;
  }

  static datatype() {
    // Returns string type for a message object
    return 'anscer_msgs/LiftFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a765dd01ba96de06700d031b9da4b369';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #feedback
    int8 lifter_feedback
    string lifter_status
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new LiftFeedback(null);
    if (msg.lifter_feedback !== undefined) {
      resolved.lifter_feedback = msg.lifter_feedback;
    }
    else {
      resolved.lifter_feedback = 0
    }

    if (msg.lifter_status !== undefined) {
      resolved.lifter_status = msg.lifter_status;
    }
    else {
      resolved.lifter_status = ''
    }

    return resolved;
    }
};

module.exports = LiftFeedback;
