// Auto-generated. Do not edit!

// (in-package anscer_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let Task = require('./Task.js');

//-----------------------------------------------------------

class MissionGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.loop_number = null;
      this.mission_id = null;
      this.mission_list = null;
    }
    else {
      if (initObj.hasOwnProperty('loop_number')) {
        this.loop_number = initObj.loop_number
      }
      else {
        this.loop_number = 0;
      }
      if (initObj.hasOwnProperty('mission_id')) {
        this.mission_id = initObj.mission_id
      }
      else {
        this.mission_id = '';
      }
      if (initObj.hasOwnProperty('mission_list')) {
        this.mission_list = initObj.mission_list
      }
      else {
        this.mission_list = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MissionGoal
    // Serialize message field [loop_number]
    bufferOffset = _serializer.int16(obj.loop_number, buffer, bufferOffset);
    // Serialize message field [mission_id]
    bufferOffset = _serializer.string(obj.mission_id, buffer, bufferOffset);
    // Serialize message field [mission_list]
    // Serialize the length for message field [mission_list]
    bufferOffset = _serializer.uint32(obj.mission_list.length, buffer, bufferOffset);
    obj.mission_list.forEach((val) => {
      bufferOffset = Task.serialize(val, buffer, bufferOffset);
    });
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MissionGoal
    let len;
    let data = new MissionGoal(null);
    // Deserialize message field [loop_number]
    data.loop_number = _deserializer.int16(buffer, bufferOffset);
    // Deserialize message field [mission_id]
    data.mission_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [mission_list]
    // Deserialize array length for message field [mission_list]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.mission_list = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.mission_list[i] = Task.deserialize(buffer, bufferOffset)
    }
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.mission_id);
    object.mission_list.forEach((val) => {
      length += Task.getMessageSize(val);
    });
    return length + 10;
  }

  static datatype() {
    // Returns string type for a message object
    return 'anscer_msgs/MissionGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'e8e79e699c93e0b90d6531d349813016';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    int16 loop_number
    string mission_id
    anscer_msgs/Task[] mission_list
    
    
    ================================================================================
    MSG: anscer_msgs/Task
    string index
    int16 waypoint_index
    int16 number
    bool activate
    anscer_msgs/ACRControl acr_info
    anscer_msgs/ChargeInfo charge_info
    
    ================================================================================
    MSG: anscer_msgs/ACRControl
    #mission status
    int32 PICKUP =0
    int32 DROPOFF =1
    
    int16 acr_shelf
    int16 target_shelf
    int16 acr_action
    int64 bar_code_number
    int64 whole_bin_number
    
    ================================================================================
    MSG: anscer_msgs/ChargeInfo
    uint8 CONNECTED=1
    uint8 DISCONNECTED=2
    uint8 OVERRIDE=3
    
    bool charger_activate
    int32 charge_time
    bool ignore_time
    float32 charge_percentage
    bool ignore_percentage
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MissionGoal(null);
    if (msg.loop_number !== undefined) {
      resolved.loop_number = msg.loop_number;
    }
    else {
      resolved.loop_number = 0
    }

    if (msg.mission_id !== undefined) {
      resolved.mission_id = msg.mission_id;
    }
    else {
      resolved.mission_id = ''
    }

    if (msg.mission_list !== undefined) {
      resolved.mission_list = new Array(msg.mission_list.length);
      for (let i = 0; i < resolved.mission_list.length; ++i) {
        resolved.mission_list[i] = Task.Resolve(msg.mission_list[i]);
      }
    }
    else {
      resolved.mission_list = []
    }

    return resolved;
    }
};

module.exports = MissionGoal;
