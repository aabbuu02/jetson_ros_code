;; Auto-generated. Do not edit!


(when (boundp 'anscer_msgs::MissionGoal)
  (if (not (find-package "ANSCER_MSGS"))
    (make-package "ANSCER_MSGS"))
  (shadow 'MissionGoal (find-package "ANSCER_MSGS")))
(unless (find-package "ANSCER_MSGS::MISSIONGOAL")
  (make-package "ANSCER_MSGS::MISSIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude MissionGoal.msg.html


(defclass anscer_msgs::MissionGoal
  :super ros::object
  :slots (_loop_number _mission_id _mission_list ))

(defmethod anscer_msgs::MissionGoal
  (:init
   (&key
    ((:loop_number __loop_number) 0)
    ((:mission_id __mission_id) "")
    ((:mission_list __mission_list) ())
    )
   (send-super :init)
   (setq _loop_number (round __loop_number))
   (setq _mission_id (string __mission_id))
   (setq _mission_list __mission_list)
   self)
  (:loop_number
   (&optional __loop_number)
   (if __loop_number (setq _loop_number __loop_number)) _loop_number)
  (:mission_id
   (&optional __mission_id)
   (if __mission_id (setq _mission_id __mission_id)) _mission_id)
  (:mission_list
   (&rest __mission_list)
   (if (keywordp (car __mission_list))
       (send* _mission_list __mission_list)
     (progn
       (if __mission_list (setq _mission_list (car __mission_list)))
       _mission_list)))
  (:serialization-length
   ()
   (+
    ;; int16 _loop_number
    2
    ;; string _mission_id
    4 (length _mission_id)
    ;; anscer_msgs/Task[] _mission_list
    (apply #'+ (send-all _mission_list :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int16 _loop_number
       (write-word _loop_number s)
     ;; string _mission_id
       (write-long (length _mission_id) s) (princ _mission_id s)
     ;; anscer_msgs/Task[] _mission_list
     (write-long (length _mission_list) s)
     (dolist (elem _mission_list)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int16 _loop_number
     (setq _loop_number (sys::peek buf ptr- :short)) (incf ptr- 2)
   ;; string _mission_id
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _mission_id (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; anscer_msgs/Task[] _mission_list
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _mission_list (let (r) (dotimes (i n) (push (instance anscer_msgs::Task :init) r)) r))
     (dolist (elem- _mission_list)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get anscer_msgs::MissionGoal :md5sum-) "e8e79e699c93e0b90d6531d349813016")
(setf (get anscer_msgs::MissionGoal :datatype-) "anscer_msgs/MissionGoal")
(setf (get anscer_msgs::MissionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
int16 loop_number
string mission_id
anscer_msgs/Task[] mission_list


================================================================================
MSG: anscer_msgs/Task
string index
int16 waypoint_index
int16 number
bool activate
anscer_msgs/ACRControl acr_info
anscer_msgs/ChargeInfo charge_info

================================================================================
MSG: anscer_msgs/ACRControl
#mission status
int32 PICKUP =0
int32 DROPOFF =1

int16 acr_shelf
int16 target_shelf
int16 acr_action
int64 bar_code_number
int64 whole_bin_number

================================================================================
MSG: anscer_msgs/ChargeInfo
uint8 CONNECTED=1
uint8 DISCONNECTED=2
uint8 OVERRIDE=3

bool charger_activate
int32 charge_time
bool ignore_time
float32 charge_percentage
bool ignore_percentage

")



(provide :anscer_msgs/MissionGoal "e8e79e699c93e0b90d6531d349813016")


