// Generated by gencpp from file lift_action/ErrorStatus.msg
// DO NOT EDIT!


#ifndef LIFT_ACTION_MESSAGE_ERRORSTATUS_H
#define LIFT_ACTION_MESSAGE_ERRORSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lift_action
{
template <class ContainerAllocator>
struct ErrorStatus_
{
  typedef ErrorStatus_<ContainerAllocator> Type;

  ErrorStatus_()
    : lifterFault(false)
    , extractorFault(false)
    , turnTableFault(false)
    , swingArmFault(false)
    , emergencyPBfault(false)
    , swingArmSensorZeroFault(false)
    , swingArmSensorNinetyFault(false)
    , turntableSensorZeroFault(false)
    , extractorSensorLaserFault(false)  {
    }
  ErrorStatus_(const ContainerAllocator& _alloc)
    : lifterFault(false)
    , extractorFault(false)
    , turnTableFault(false)
    , swingArmFault(false)
    , emergencyPBfault(false)
    , swingArmSensorZeroFault(false)
    , swingArmSensorNinetyFault(false)
    , turntableSensorZeroFault(false)
    , extractorSensorLaserFault(false)  {
  (void)_alloc;
    }



   typedef uint8_t _lifterFault_type;
  _lifterFault_type lifterFault;

   typedef uint8_t _extractorFault_type;
  _extractorFault_type extractorFault;

   typedef uint8_t _turnTableFault_type;
  _turnTableFault_type turnTableFault;

   typedef uint8_t _swingArmFault_type;
  _swingArmFault_type swingArmFault;

   typedef uint8_t _emergencyPBfault_type;
  _emergencyPBfault_type emergencyPBfault;

   typedef uint8_t _swingArmSensorZeroFault_type;
  _swingArmSensorZeroFault_type swingArmSensorZeroFault;

   typedef uint8_t _swingArmSensorNinetyFault_type;
  _swingArmSensorNinetyFault_type swingArmSensorNinetyFault;

   typedef uint8_t _turntableSensorZeroFault_type;
  _turntableSensorZeroFault_type turntableSensorZeroFault;

   typedef uint8_t _extractorSensorLaserFault_type;
  _extractorSensorLaserFault_type extractorSensorLaserFault;





  typedef boost::shared_ptr< ::lift_action::ErrorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lift_action::ErrorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorStatus_

typedef ::lift_action::ErrorStatus_<std::allocator<void> > ErrorStatus;

typedef boost::shared_ptr< ::lift_action::ErrorStatus > ErrorStatusPtr;
typedef boost::shared_ptr< ::lift_action::ErrorStatus const> ErrorStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lift_action::ErrorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lift_action::ErrorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lift_action::ErrorStatus_<ContainerAllocator1> & lhs, const ::lift_action::ErrorStatus_<ContainerAllocator2> & rhs)
{
  return lhs.lifterFault == rhs.lifterFault &&
    lhs.extractorFault == rhs.extractorFault &&
    lhs.turnTableFault == rhs.turnTableFault &&
    lhs.swingArmFault == rhs.swingArmFault &&
    lhs.emergencyPBfault == rhs.emergencyPBfault &&
    lhs.swingArmSensorZeroFault == rhs.swingArmSensorZeroFault &&
    lhs.swingArmSensorNinetyFault == rhs.swingArmSensorNinetyFault &&
    lhs.turntableSensorZeroFault == rhs.turntableSensorZeroFault &&
    lhs.extractorSensorLaserFault == rhs.extractorSensorLaserFault;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lift_action::ErrorStatus_<ContainerAllocator1> & lhs, const ::lift_action::ErrorStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lift_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lift_action::ErrorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lift_action::ErrorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lift_action::ErrorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lift_action::ErrorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lift_action::ErrorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lift_action::ErrorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lift_action::ErrorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ad64508a47bfdb3b3558cc9de515c2e";
  }

  static const char* value(const ::lift_action::ErrorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ad64508a47bfdb3ULL;
  static const uint64_t static_value2 = 0xb3558cc9de515c2eULL;
};

template<class ContainerAllocator>
struct DataType< ::lift_action::ErrorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lift_action/ErrorStatus";
  }

  static const char* value(const ::lift_action::ErrorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lift_action::ErrorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool lifterFault\n"
"bool extractorFault\n"
"bool turnTableFault\n"
"bool swingArmFault\n"
"bool emergencyPBfault\n"
"bool swingArmSensorZeroFault\n"
"bool swingArmSensorNinetyFault\n"
"bool turntableSensorZeroFault\n"
"bool extractorSensorLaserFault\n"
;
  }

  static const char* value(const ::lift_action::ErrorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lift_action::ErrorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lifterFault);
      stream.next(m.extractorFault);
      stream.next(m.turnTableFault);
      stream.next(m.swingArmFault);
      stream.next(m.emergencyPBfault);
      stream.next(m.swingArmSensorZeroFault);
      stream.next(m.swingArmSensorNinetyFault);
      stream.next(m.turntableSensorZeroFault);
      stream.next(m.extractorSensorLaserFault);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lift_action::ErrorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lift_action::ErrorStatus_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "lifterFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lifterFault);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "extractorFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extractorFault);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "turnTableFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turnTableFault);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "swingArmFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swingArmFault);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "emergencyPBfault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergencyPBfault);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "swingArmSensorZeroFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swingArmSensorZeroFault);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "swingArmSensorNinetyFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swingArmSensorNinetyFault);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "turntableSensorZeroFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turntableSensorZeroFault);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "extractorSensorLaserFault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extractorSensorLaserFault);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIFT_ACTION_MESSAGE_ERRORSTATUS_H
