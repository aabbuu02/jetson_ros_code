// Generated by gencpp from file lift_action/LiftAction.msg
// DO NOT EDIT!


#ifndef LIFT_ACTION_MESSAGE_LIFTACTION_H
#define LIFT_ACTION_MESSAGE_LIFTACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lift_action
{
template <class ContainerAllocator>
struct LiftAction_
{
  typedef LiftAction_<ContainerAllocator> Type;

  LiftAction_()
    : unique_id()
    , reached(false)
    , rack(0)
    , shelf(0)
    , acr_shelf(0)
    , action(0)
    , whole_bin_no()
    , putaway_barcode()  {
    }
  LiftAction_(const ContainerAllocator& _alloc)
    : unique_id(_alloc)
    , reached(false)
    , rack(0)
    , shelf(0)
    , acr_shelf(0)
    , action(0)
    , whole_bin_no(_alloc)
    , putaway_barcode(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _unique_id_type;
  _unique_id_type unique_id;

   typedef uint8_t _reached_type;
  _reached_type reached;

   typedef int16_t _rack_type;
  _rack_type rack;

   typedef int16_t _shelf_type;
  _shelf_type shelf;

   typedef int16_t _acr_shelf_type;
  _acr_shelf_type acr_shelf;

   typedef int16_t _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _whole_bin_no_type;
  _whole_bin_no_type whole_bin_no;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _putaway_barcode_type;
  _putaway_barcode_type putaway_barcode;





  typedef boost::shared_ptr< ::lift_action::LiftAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lift_action::LiftAction_<ContainerAllocator> const> ConstPtr;

}; // struct LiftAction_

typedef ::lift_action::LiftAction_<std::allocator<void> > LiftAction;

typedef boost::shared_ptr< ::lift_action::LiftAction > LiftActionPtr;
typedef boost::shared_ptr< ::lift_action::LiftAction const> LiftActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lift_action::LiftAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lift_action::LiftAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lift_action::LiftAction_<ContainerAllocator1> & lhs, const ::lift_action::LiftAction_<ContainerAllocator2> & rhs)
{
  return lhs.unique_id == rhs.unique_id &&
    lhs.reached == rhs.reached &&
    lhs.rack == rhs.rack &&
    lhs.shelf == rhs.shelf &&
    lhs.acr_shelf == rhs.acr_shelf &&
    lhs.action == rhs.action &&
    lhs.whole_bin_no == rhs.whole_bin_no &&
    lhs.putaway_barcode == rhs.putaway_barcode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lift_action::LiftAction_<ContainerAllocator1> & lhs, const ::lift_action::LiftAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lift_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lift_action::LiftAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lift_action::LiftAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lift_action::LiftAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lift_action::LiftAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lift_action::LiftAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lift_action::LiftAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lift_action::LiftAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74abac7a70a7dbf2314bec741f0342c4";
  }

  static const char* value(const ::lift_action::LiftAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74abac7a70a7dbf2ULL;
  static const uint64_t static_value2 = 0x314bec741f0342c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::lift_action::LiftAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lift_action/LiftAction";
  }

  static const char* value(const ::lift_action::LiftAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lift_action::LiftAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string unique_id\n"
"bool reached\n"
"int16 rack\n"
"int16 shelf\n"
"int16 acr_shelf\n"
"int16 action\n"
"string whole_bin_no\n"
"string putaway_barcode\n"
;
  }

  static const char* value(const ::lift_action::LiftAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lift_action::LiftAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.reached);
      stream.next(m.rack);
      stream.next(m.shelf);
      stream.next(m.acr_shelf);
      stream.next(m.action);
      stream.next(m.whole_bin_no);
      stream.next(m.putaway_barcode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LiftAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lift_action::LiftAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lift_action::LiftAction_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "unique_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.unique_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reached);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rack: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rack);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "shelf: ";
    Printer<int16_t>::stream(s, indent + "  ", v.shelf);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "acr_shelf: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acr_shelf);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "action: ";
    Printer<int16_t>::stream(s, indent + "  ", v.action);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "whole_bin_no: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.whole_bin_no);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "putaway_barcode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.putaway_barcode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIFT_ACTION_MESSAGE_LIFTACTION_H
