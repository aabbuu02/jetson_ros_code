// Generated by gencpp from file lift_action/UI_Interface.msg
// DO NOT EDIT!


#ifndef LIFT_ACTION_MESSAGE_UI_INTERFACE_H
#define LIFT_ACTION_MESSAGE_UI_INTERFACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lift_action
{
template <class ContainerAllocator>
struct UI_Interface_
{
  typedef UI_Interface_<ContainerAllocator> Type;

  UI_Interface_()
    : process()
    , button(false)
    , direction(0)  {
    }
  UI_Interface_(const ContainerAllocator& _alloc)
    : process(_alloc)
    , button(false)
    , direction(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _process_type;
  _process_type process;

   typedef uint8_t _button_type;
  _button_type button;

   typedef int16_t _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::lift_action::UI_Interface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lift_action::UI_Interface_<ContainerAllocator> const> ConstPtr;

}; // struct UI_Interface_

typedef ::lift_action::UI_Interface_<std::allocator<void> > UI_Interface;

typedef boost::shared_ptr< ::lift_action::UI_Interface > UI_InterfacePtr;
typedef boost::shared_ptr< ::lift_action::UI_Interface const> UI_InterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lift_action::UI_Interface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lift_action::UI_Interface_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lift_action::UI_Interface_<ContainerAllocator1> & lhs, const ::lift_action::UI_Interface_<ContainerAllocator2> & rhs)
{
  return lhs.process == rhs.process &&
    lhs.button == rhs.button &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lift_action::UI_Interface_<ContainerAllocator1> & lhs, const ::lift_action::UI_Interface_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lift_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lift_action::UI_Interface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lift_action::UI_Interface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lift_action::UI_Interface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lift_action::UI_Interface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lift_action::UI_Interface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lift_action::UI_Interface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lift_action::UI_Interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d42888895ca2661e28199a8a1f1bb9a";
  }

  static const char* value(const ::lift_action::UI_Interface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d42888895ca2661ULL;
  static const uint64_t static_value2 = 0xe28199a8a1f1bb9aULL;
};

template<class ContainerAllocator>
struct DataType< ::lift_action::UI_Interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lift_action/UI_Interface";
  }

  static const char* value(const ::lift_action::UI_Interface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lift_action::UI_Interface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string process\n"
"bool button\n"
"int16 direction\n"
;
  }

  static const char* value(const ::lift_action::UI_Interface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lift_action::UI_Interface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.process);
      stream.next(m.button);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UI_Interface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lift_action::UI_Interface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lift_action::UI_Interface_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "process: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.process);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "direction: ";
    Printer<int16_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIFT_ACTION_MESSAGE_UI_INTERFACE_H
