// Generated by gencpp from file lift_action/Homing_status.msg
// DO NOT EDIT!


#ifndef LIFT_ACTION_MESSAGE_HOMING_STATUS_H
#define LIFT_ACTION_MESSAGE_HOMING_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lift_action
{
template <class ContainerAllocator>
struct Homing_status_
{
  typedef Homing_status_<ContainerAllocator> Type;

  Homing_status_()
    : lifterStatus(false)
    , extractorSatus(false)
    , turnTableStatus(false)
    , isHomed(false)  {
    }
  Homing_status_(const ContainerAllocator& _alloc)
    : lifterStatus(false)
    , extractorSatus(false)
    , turnTableStatus(false)
    , isHomed(false)  {
  (void)_alloc;
    }



   typedef uint8_t _lifterStatus_type;
  _lifterStatus_type lifterStatus;

   typedef uint8_t _extractorSatus_type;
  _extractorSatus_type extractorSatus;

   typedef uint8_t _turnTableStatus_type;
  _turnTableStatus_type turnTableStatus;

   typedef uint8_t _isHomed_type;
  _isHomed_type isHomed;





  typedef boost::shared_ptr< ::lift_action::Homing_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lift_action::Homing_status_<ContainerAllocator> const> ConstPtr;

}; // struct Homing_status_

typedef ::lift_action::Homing_status_<std::allocator<void> > Homing_status;

typedef boost::shared_ptr< ::lift_action::Homing_status > Homing_statusPtr;
typedef boost::shared_ptr< ::lift_action::Homing_status const> Homing_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lift_action::Homing_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lift_action::Homing_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lift_action::Homing_status_<ContainerAllocator1> & lhs, const ::lift_action::Homing_status_<ContainerAllocator2> & rhs)
{
  return lhs.lifterStatus == rhs.lifterStatus &&
    lhs.extractorSatus == rhs.extractorSatus &&
    lhs.turnTableStatus == rhs.turnTableStatus &&
    lhs.isHomed == rhs.isHomed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lift_action::Homing_status_<ContainerAllocator1> & lhs, const ::lift_action::Homing_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lift_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lift_action::Homing_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lift_action::Homing_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lift_action::Homing_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lift_action::Homing_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lift_action::Homing_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lift_action::Homing_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lift_action::Homing_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ca3915b4946dfb69c51af3e4d1a0401";
  }

  static const char* value(const ::lift_action::Homing_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ca3915b4946dfb6ULL;
  static const uint64_t static_value2 = 0x9c51af3e4d1a0401ULL;
};

template<class ContainerAllocator>
struct DataType< ::lift_action::Homing_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lift_action/Homing_status";
  }

  static const char* value(const ::lift_action::Homing_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lift_action::Homing_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool lifterStatus\n"
"bool extractorSatus\n"
"bool turnTableStatus\n"
"bool isHomed\n"
;
  }

  static const char* value(const ::lift_action::Homing_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lift_action::Homing_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lifterStatus);
      stream.next(m.extractorSatus);
      stream.next(m.turnTableStatus);
      stream.next(m.isHomed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Homing_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lift_action::Homing_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lift_action::Homing_status_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "lifterStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lifterStatus);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "extractorSatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extractorSatus);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "turnTableStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turnTableStatus);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "isHomed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isHomed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIFT_ACTION_MESSAGE_HOMING_STATUS_H
