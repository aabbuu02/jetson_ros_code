// Generated by gencpp from file wms_data/Feedback.msg
// DO NOT EDIT!


#ifndef WMS_DATA_MESSAGE_FEEDBACK_H
#define WMS_DATA_MESSAGE_FEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wms_data
{
template <class ContainerAllocator>
struct Feedback_
{
  typedef Feedback_<ContainerAllocator> Type;

  Feedback_()
    : unique_id()
    , acr_shelf(0)
    , action(0)
    , status(false)
    , failStatus(false)  {
    }
  Feedback_(const ContainerAllocator& _alloc)
    : unique_id(_alloc)
    , acr_shelf(0)
    , action(0)
    , status(false)
    , failStatus(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _unique_id_type;
  _unique_id_type unique_id;

   typedef int16_t _acr_shelf_type;
  _acr_shelf_type acr_shelf;

   typedef int16_t _action_type;
  _action_type action;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _failStatus_type;
  _failStatus_type failStatus;





  typedef boost::shared_ptr< ::wms_data::Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wms_data::Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct Feedback_

typedef ::wms_data::Feedback_<std::allocator<void> > Feedback;

typedef boost::shared_ptr< ::wms_data::Feedback > FeedbackPtr;
typedef boost::shared_ptr< ::wms_data::Feedback const> FeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wms_data::Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wms_data::Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wms_data::Feedback_<ContainerAllocator1> & lhs, const ::wms_data::Feedback_<ContainerAllocator2> & rhs)
{
  return lhs.unique_id == rhs.unique_id &&
    lhs.acr_shelf == rhs.acr_shelf &&
    lhs.action == rhs.action &&
    lhs.status == rhs.status &&
    lhs.failStatus == rhs.failStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wms_data::Feedback_<ContainerAllocator1> & lhs, const ::wms_data::Feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wms_data

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wms_data::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wms_data::Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wms_data::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wms_data::Feedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wms_data::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wms_data::Feedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wms_data::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6588a9452ee8a183f42490d3b437bdbe";
  }

  static const char* value(const ::wms_data::Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6588a9452ee8a183ULL;
  static const uint64_t static_value2 = 0xf42490d3b437bdbeULL;
};

template<class ContainerAllocator>
struct DataType< ::wms_data::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wms_data/Feedback";
  }

  static const char* value(const ::wms_data::Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wms_data::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string unique_id\n"
"int16 acr_shelf\n"
"int16 action\n"
"bool status\n"
"bool failStatus\n"
;
  }

  static const char* value(const ::wms_data::Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wms_data::Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.acr_shelf);
      stream.next(m.action);
      stream.next(m.status);
      stream.next(m.failStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wms_data::Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wms_data::Feedback_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "unique_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.unique_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "acr_shelf: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acr_shelf);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "action: ";
    Printer<int16_t>::stream(s, indent + "  ", v.action);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "failStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WMS_DATA_MESSAGE_FEEDBACK_H
