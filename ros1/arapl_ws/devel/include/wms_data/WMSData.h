// Generated by gencpp from file wms_data/WMSData.msg
// DO NOT EDIT!


#ifndef WMS_DATA_MESSAGE_WMSDATA_H
#define WMS_DATA_MESSAGE_WMSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wms_data
{
template <class ContainerAllocator>
struct WMSData_
{
  typedef WMSData_<ContainerAllocator> Type;

  WMSData_()
    : unique_id()
    , date()
    , priority(0)
    , rack(0)
    , shelf(0)
    , bin(0)
    , action(false)
    , status(false)
    , ean_code()
    , putaway_code()
    , acr_shelf(0)
    , whole_bin_no()
    , core()
    , level()
    , year()
    , date_data()
    , serial_no()  {
    }
  WMSData_(const ContainerAllocator& _alloc)
    : unique_id(_alloc)
    , date(_alloc)
    , priority(0)
    , rack(0)
    , shelf(0)
    , bin(0)
    , action(false)
    , status(false)
    , ean_code(_alloc)
    , putaway_code(_alloc)
    , acr_shelf(0)
    , whole_bin_no(_alloc)
    , core(_alloc)
    , level(_alloc)
    , year(_alloc)
    , date_data(_alloc)
    , serial_no(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _unique_id_type;
  _unique_id_type unique_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _date_type;
  _date_type date;

   typedef int16_t _priority_type;
  _priority_type priority;

   typedef int16_t _rack_type;
  _rack_type rack;

   typedef int16_t _shelf_type;
  _shelf_type shelf;

   typedef int16_t _bin_type;
  _bin_type bin;

   typedef uint8_t _action_type;
  _action_type action;

   typedef uint8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ean_code_type;
  _ean_code_type ean_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _putaway_code_type;
  _putaway_code_type putaway_code;

   typedef int16_t _acr_shelf_type;
  _acr_shelf_type acr_shelf;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _whole_bin_no_type;
  _whole_bin_no_type whole_bin_no;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _core_type;
  _core_type core;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _level_type;
  _level_type level;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _year_type;
  _year_type year;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _date_data_type;
  _date_data_type date_data;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _serial_no_type;
  _serial_no_type serial_no;





  typedef boost::shared_ptr< ::wms_data::WMSData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wms_data::WMSData_<ContainerAllocator> const> ConstPtr;

}; // struct WMSData_

typedef ::wms_data::WMSData_<std::allocator<void> > WMSData;

typedef boost::shared_ptr< ::wms_data::WMSData > WMSDataPtr;
typedef boost::shared_ptr< ::wms_data::WMSData const> WMSDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wms_data::WMSData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wms_data::WMSData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wms_data::WMSData_<ContainerAllocator1> & lhs, const ::wms_data::WMSData_<ContainerAllocator2> & rhs)
{
  return lhs.unique_id == rhs.unique_id &&
    lhs.date == rhs.date &&
    lhs.priority == rhs.priority &&
    lhs.rack == rhs.rack &&
    lhs.shelf == rhs.shelf &&
    lhs.bin == rhs.bin &&
    lhs.action == rhs.action &&
    lhs.status == rhs.status &&
    lhs.ean_code == rhs.ean_code &&
    lhs.putaway_code == rhs.putaway_code &&
    lhs.acr_shelf == rhs.acr_shelf &&
    lhs.whole_bin_no == rhs.whole_bin_no &&
    lhs.core == rhs.core &&
    lhs.level == rhs.level &&
    lhs.year == rhs.year &&
    lhs.date_data == rhs.date_data &&
    lhs.serial_no == rhs.serial_no;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wms_data::WMSData_<ContainerAllocator1> & lhs, const ::wms_data::WMSData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wms_data

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wms_data::WMSData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wms_data::WMSData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wms_data::WMSData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wms_data::WMSData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wms_data::WMSData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wms_data::WMSData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wms_data::WMSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "338f7a7211a5e9f2655096004ac2e21e";
  }

  static const char* value(const ::wms_data::WMSData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x338f7a7211a5e9f2ULL;
  static const uint64_t static_value2 = 0x655096004ac2e21eULL;
};

template<class ContainerAllocator>
struct DataType< ::wms_data::WMSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wms_data/WMSData";
  }

  static const char* value(const ::wms_data::WMSData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wms_data::WMSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string unique_id\n"
"string date\n"
"int16 priority\n"
"int16 rack\n"
"int16 shelf\n"
"int16 bin\n"
"bool action\n"
"bool status\n"
"string ean_code\n"
"string putaway_code\n"
"int16 acr_shelf\n"
"string whole_bin_no\n"
"string core\n"
"string level\n"
"string year\n"
"string date_data\n"
"string serial_no\n"
;
  }

  static const char* value(const ::wms_data::WMSData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wms_data::WMSData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.date);
      stream.next(m.priority);
      stream.next(m.rack);
      stream.next(m.shelf);
      stream.next(m.bin);
      stream.next(m.action);
      stream.next(m.status);
      stream.next(m.ean_code);
      stream.next(m.putaway_code);
      stream.next(m.acr_shelf);
      stream.next(m.whole_bin_no);
      stream.next(m.core);
      stream.next(m.level);
      stream.next(m.year);
      stream.next(m.date_data);
      stream.next(m.serial_no);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WMSData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wms_data::WMSData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wms_data::WMSData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "unique_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.unique_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.date);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "priority: ";
    Printer<int16_t>::stream(s, indent + "  ", v.priority);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rack: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rack);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "shelf: ";
    Printer<int16_t>::stream(s, indent + "  ", v.shelf);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ean_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ean_code);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "putaway_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.putaway_code);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "acr_shelf: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acr_shelf);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "whole_bin_no: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.whole_bin_no);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "core: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.core);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "level: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.level);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "year: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.year);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "date_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.date_data);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "serial_no: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.serial_no);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WMS_DATA_MESSAGE_WMSDATA_H
