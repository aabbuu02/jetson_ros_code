// Generated by gencpp from file wms_data/WMSTasks.msg
// DO NOT EDIT!


#ifndef WMS_DATA_MESSAGE_WMSTASKS_H
#define WMS_DATA_MESSAGE_WMSTASKS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <wms_data/WMSData.h>

namespace wms_data
{
template <class ContainerAllocator>
struct WMSTasks_
{
  typedef WMSTasks_<ContainerAllocator> Type;

  WMSTasks_()
    : tasks()  {
    }
  WMSTasks_(const ContainerAllocator& _alloc)
    : tasks(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::wms_data::WMSData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::wms_data::WMSData_<ContainerAllocator> >> _tasks_type;
  _tasks_type tasks;





  typedef boost::shared_ptr< ::wms_data::WMSTasks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wms_data::WMSTasks_<ContainerAllocator> const> ConstPtr;

}; // struct WMSTasks_

typedef ::wms_data::WMSTasks_<std::allocator<void> > WMSTasks;

typedef boost::shared_ptr< ::wms_data::WMSTasks > WMSTasksPtr;
typedef boost::shared_ptr< ::wms_data::WMSTasks const> WMSTasksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wms_data::WMSTasks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wms_data::WMSTasks_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wms_data::WMSTasks_<ContainerAllocator1> & lhs, const ::wms_data::WMSTasks_<ContainerAllocator2> & rhs)
{
  return lhs.tasks == rhs.tasks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wms_data::WMSTasks_<ContainerAllocator1> & lhs, const ::wms_data::WMSTasks_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wms_data

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wms_data::WMSTasks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wms_data::WMSTasks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wms_data::WMSTasks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wms_data::WMSTasks_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wms_data::WMSTasks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wms_data::WMSTasks_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wms_data::WMSTasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9c22e6c13dccc15f5397cda86a34fd5";
  }

  static const char* value(const ::wms_data::WMSTasks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9c22e6c13dccc15ULL;
  static const uint64_t static_value2 = 0xf5397cda86a34fd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::wms_data::WMSTasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wms_data/WMSTasks";
  }

  static const char* value(const ::wms_data::WMSTasks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wms_data::WMSTasks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wms_data/WMSData[] tasks\n"
"\n"
"================================================================================\n"
"MSG: wms_data/WMSData\n"
"string unique_id\n"
"string date\n"
"int16 priority\n"
"int16 rack\n"
"int16 shelf\n"
"int16 bin\n"
"bool action\n"
"bool status\n"
"string ean_code\n"
"string putaway_code\n"
"int16 acr_shelf\n"
"string whole_bin_no\n"
"string core\n"
"string level\n"
"string year\n"
"string date_data\n"
"string serial_no\n"
;
  }

  static const char* value(const ::wms_data::WMSTasks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wms_data::WMSTasks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tasks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WMSTasks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wms_data::WMSTasks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wms_data::WMSTasks_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "tasks: ";
    if (v.tasks.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.tasks.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::wms_data::WMSData_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.tasks[i]);
    }
    if (v.tasks.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // WMS_DATA_MESSAGE_WMSTASKS_H
