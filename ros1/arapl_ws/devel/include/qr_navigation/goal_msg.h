// Generated by gencpp from file qr_navigation/goal_msg.msg
// DO NOT EDIT!


#ifndef QR_NAVIGATION_MESSAGE_GOAL_MSG_H
#define QR_NAVIGATION_MESSAGE_GOAL_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qr_navigation
{
template <class ContainerAllocator>
struct goal_msg_
{
  typedef goal_msg_<ContainerAllocator> Type;

  goal_msg_()
    : pose()
    , start()
    , goal()
    , operation()  {
    }
  goal_msg_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , start(_alloc)
    , goal(_alloc)
    , operation(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _pose_type;
  _pose_type pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _start_type;
  _start_type start;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _goal_type;
  _goal_type goal;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _operation_type;
  _operation_type operation;





  typedef boost::shared_ptr< ::qr_navigation::goal_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qr_navigation::goal_msg_<ContainerAllocator> const> ConstPtr;

}; // struct goal_msg_

typedef ::qr_navigation::goal_msg_<std::allocator<void> > goal_msg;

typedef boost::shared_ptr< ::qr_navigation::goal_msg > goal_msgPtr;
typedef boost::shared_ptr< ::qr_navigation::goal_msg const> goal_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qr_navigation::goal_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qr_navigation::goal_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qr_navigation::goal_msg_<ContainerAllocator1> & lhs, const ::qr_navigation::goal_msg_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.start == rhs.start &&
    lhs.goal == rhs.goal &&
    lhs.operation == rhs.operation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qr_navigation::goal_msg_<ContainerAllocator1> & lhs, const ::qr_navigation::goal_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qr_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qr_navigation::goal_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qr_navigation::goal_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qr_navigation::goal_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qr_navigation::goal_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qr_navigation::goal_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qr_navigation::goal_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qr_navigation::goal_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65096d2f7dc9c44846c54d624fa429e2";
  }

  static const char* value(const ::qr_navigation::goal_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65096d2f7dc9c448ULL;
  static const uint64_t static_value2 = 0x46c54d624fa429e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::qr_navigation::goal_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qr_navigation/goal_msg";
  }

  static const char* value(const ::qr_navigation::goal_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qr_navigation::goal_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string pose\n"
"float64[] start\n"
"float64[] goal\n"
"string operation\n"
;
  }

  static const char* value(const ::qr_navigation::goal_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qr_navigation::goal_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.operation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goal_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qr_navigation::goal_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qr_navigation::goal_msg_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "pose: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.pose);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "start: ";
    if (v.start.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.start.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.start[i]);
    }
    if (v.start.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "goal: ";
    if (v.goal.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.goal[i]);
    }
    if (v.goal.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "operation: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.operation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QR_NAVIGATION_MESSAGE_GOAL_MSG_H
