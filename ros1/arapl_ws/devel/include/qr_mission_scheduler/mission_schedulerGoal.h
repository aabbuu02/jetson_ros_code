// Generated by gencpp from file qr_mission_scheduler/mission_schedulerGoal.msg
// DO NOT EDIT!


#ifndef QR_MISSION_SCHEDULER_MESSAGE_MISSION_SCHEDULERGOAL_H
#define QR_MISSION_SCHEDULER_MESSAGE_MISSION_SCHEDULERGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <qr_mission_scheduler/goalMsg.h>

namespace qr_mission_scheduler
{
template <class ContainerAllocator>
struct mission_schedulerGoal_
{
  typedef mission_schedulerGoal_<ContainerAllocator> Type;

  mission_schedulerGoal_()
    : goalType()  {
    }
  mission_schedulerGoal_(const ContainerAllocator& _alloc)
    : goalType(_alloc)  {
  (void)_alloc;
    }



   typedef  ::qr_mission_scheduler::goalMsg_<ContainerAllocator>  _goalType_type;
  _goalType_type goalType;





  typedef boost::shared_ptr< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct mission_schedulerGoal_

typedef ::qr_mission_scheduler::mission_schedulerGoal_<std::allocator<void> > mission_schedulerGoal;

typedef boost::shared_ptr< ::qr_mission_scheduler::mission_schedulerGoal > mission_schedulerGoalPtr;
typedef boost::shared_ptr< ::qr_mission_scheduler::mission_schedulerGoal const> mission_schedulerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator1> & lhs, const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goalType == rhs.goalType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator1> & lhs, const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qr_mission_scheduler

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfdc3603f5a1118fa217fb2b770cd9e4";
  }

  static const char* value(const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfdc3603f5a1118fULL;
  static const uint64_t static_value2 = 0xa217fb2b770cd9e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qr_mission_scheduler/mission_schedulerGoal";
  }

  static const char* value(const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"goalMsg goalType\n"
"\n"
"================================================================================\n"
"MSG: qr_mission_scheduler/goalMsg\n"
"string goalType\n"
"\n"
"float64 source\n"
"float64 destination\n"
"\n"
;
  }

  static const char* value(const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goalType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mission_schedulerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qr_mission_scheduler::mission_schedulerGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "goalType: ";
    Printer< ::qr_mission_scheduler::goalMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.goalType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QR_MISSION_SCHEDULER_MESSAGE_MISSION_SCHEDULERGOAL_H
