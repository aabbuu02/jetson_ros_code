// Generated by gencpp from file anscer_msgs/SafetyZoneRequest.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_SAFETYZONEREQUEST_H
#define ANSCER_MSGS_MESSAGE_SAFETYZONEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct SafetyZoneRequest_
{
  typedef SafetyZoneRequest_<ContainerAllocator> Type;

  SafetyZoneRequest_()
    : safety_zone(0.0)  {
    }
  SafetyZoneRequest_(const ContainerAllocator& _alloc)
    : safety_zone(0.0)  {
  (void)_alloc;
    }



   typedef float _safety_zone_type;
  _safety_zone_type safety_zone;





  typedef boost::shared_ptr< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyZoneRequest_

typedef ::anscer_msgs::SafetyZoneRequest_<std::allocator<void> > SafetyZoneRequest;

typedef boost::shared_ptr< ::anscer_msgs::SafetyZoneRequest > SafetyZoneRequestPtr;
typedef boost::shared_ptr< ::anscer_msgs::SafetyZoneRequest const> SafetyZoneRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator1> & lhs, const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator2> & rhs)
{
  return lhs.safety_zone == rhs.safety_zone;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator1> & lhs, const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3dfa5a05dd5746de1f5b03b04e0274d1";
  }

  static const char* value(const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3dfa5a05dd5746deULL;
  static const uint64_t static_value2 = 0x1f5b03b04e0274d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/SafetyZoneRequest";
  }

  static const char* value(const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 safety_zone\n"
;
  }

  static const char* value(const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.safety_zone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyZoneRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::SafetyZoneRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "safety_zone: ";
    Printer<float>::stream(s, indent + "  ", v.safety_zone);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_SAFETYZONEREQUEST_H
