// Generated by gencpp from file anscer_msgs/ChargeInfo.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_CHARGEINFO_H
#define ANSCER_MSGS_MESSAGE_CHARGEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct ChargeInfo_
{
  typedef ChargeInfo_<ContainerAllocator> Type;

  ChargeInfo_()
    : charger_activate(false)
    , charge_time(0)
    , ignore_time(false)
    , charge_percentage(0.0)
    , ignore_percentage(false)  {
    }
  ChargeInfo_(const ContainerAllocator& _alloc)
    : charger_activate(false)
    , charge_time(0)
    , ignore_time(false)
    , charge_percentage(0.0)
    , ignore_percentage(false)  {
  (void)_alloc;
    }



   typedef uint8_t _charger_activate_type;
  _charger_activate_type charger_activate;

   typedef int32_t _charge_time_type;
  _charge_time_type charge_time;

   typedef uint8_t _ignore_time_type;
  _ignore_time_type ignore_time;

   typedef float _charge_percentage_type;
  _charge_percentage_type charge_percentage;

   typedef uint8_t _ignore_percentage_type;
  _ignore_percentage_type ignore_percentage;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CONNECTED)
  #undef CONNECTED
#endif
#if defined(_WIN32) && defined(DISCONNECTED)
  #undef DISCONNECTED
#endif
#if defined(_WIN32) && defined(OVERRIDE)
  #undef OVERRIDE
#endif

  enum {
    CONNECTED = 1u,
    DISCONNECTED = 2u,
    OVERRIDE = 3u,
  };


  typedef boost::shared_ptr< ::anscer_msgs::ChargeInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::ChargeInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ChargeInfo_

typedef ::anscer_msgs::ChargeInfo_<std::allocator<void> > ChargeInfo;

typedef boost::shared_ptr< ::anscer_msgs::ChargeInfo > ChargeInfoPtr;
typedef boost::shared_ptr< ::anscer_msgs::ChargeInfo const> ChargeInfoConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::ChargeInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::ChargeInfo_<ContainerAllocator1> & lhs, const ::anscer_msgs::ChargeInfo_<ContainerAllocator2> & rhs)
{
  return lhs.charger_activate == rhs.charger_activate &&
    lhs.charge_time == rhs.charge_time &&
    lhs.ignore_time == rhs.ignore_time &&
    lhs.charge_percentage == rhs.charge_percentage &&
    lhs.ignore_percentage == rhs.ignore_percentage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::ChargeInfo_<ContainerAllocator1> & lhs, const ::anscer_msgs::ChargeInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ChargeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ChargeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ChargeInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07a5813f322d0f1699de1925e6361210";
  }

  static const char* value(const ::anscer_msgs::ChargeInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07a5813f322d0f16ULL;
  static const uint64_t static_value2 = 0x99de1925e6361210ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/ChargeInfo";
  }

  static const char* value(const ::anscer_msgs::ChargeInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CONNECTED=1\n"
"uint8 DISCONNECTED=2\n"
"uint8 OVERRIDE=3\n"
"\n"
"bool charger_activate\n"
"int32 charge_time\n"
"bool ignore_time\n"
"float32 charge_percentage\n"
"bool ignore_percentage\n"
;
  }

  static const char* value(const ::anscer_msgs::ChargeInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.charger_activate);
      stream.next(m.charge_time);
      stream.next(m.ignore_time);
      stream.next(m.charge_percentage);
      stream.next(m.ignore_percentage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChargeInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::ChargeInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "charger_activate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charger_activate);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "charge_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.charge_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ignore_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "charge_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.charge_percentage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ignore_percentage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_percentage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_CHARGEINFO_H
