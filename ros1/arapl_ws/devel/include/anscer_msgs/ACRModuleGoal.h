// Generated by gencpp from file anscer_msgs/ACRModuleGoal.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_ACRMODULEGOAL_H
#define ANSCER_MSGS_MESSAGE_ACRMODULEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/ACRControl.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct ACRModuleGoal_
{
  typedef ACRModuleGoal_<ContainerAllocator> Type;

  ACRModuleGoal_()
    : control_input()  {
    }
  ACRModuleGoal_(const ContainerAllocator& _alloc)
    : control_input(_alloc)  {
  (void)_alloc;
    }



   typedef  ::anscer_msgs::ACRControl_<ContainerAllocator>  _control_input_type;
  _control_input_type control_input;





  typedef boost::shared_ptr< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ACRModuleGoal_

typedef ::anscer_msgs::ACRModuleGoal_<std::allocator<void> > ACRModuleGoal;

typedef boost::shared_ptr< ::anscer_msgs::ACRModuleGoal > ACRModuleGoalPtr;
typedef boost::shared_ptr< ::anscer_msgs::ACRModuleGoal const> ACRModuleGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator1> & lhs, const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator2> & rhs)
{
  return lhs.control_input == rhs.control_input;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator1> & lhs, const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dff17f295ad0f39ca1837d79706b9a4c";
  }

  static const char* value(const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdff17f295ad0f39cULL;
  static const uint64_t static_value2 = 0xa1837d79706b9a4cULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/ACRModuleGoal";
  }

  static const char* value(const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"ACRControl control_input\n"
"\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/ACRControl\n"
"#mission status\n"
"int32 PICKUP =0\n"
"int32 DROPOFF =1\n"
"\n"
"int16 acr_shelf\n"
"int16 target_shelf\n"
"int16 acr_action\n"
"int64 bar_code_number\n"
"int64 whole_bin_number\n"
;
  }

  static const char* value(const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ACRModuleGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::ACRModuleGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::ACRModuleGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "control_input: ";
    Printer< ::anscer_msgs::ACRControl_<ContainerAllocator> >::stream(s, indent + "  ", v.control_input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_ACRMODULEGOAL_H
