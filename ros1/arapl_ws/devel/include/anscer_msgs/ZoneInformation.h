// Generated by gencpp from file anscer_msgs/ZoneInformation.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_ZONEINFORMATION_H
#define ANSCER_MSGS_MESSAGE_ZONEINFORMATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/Indication.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct ZoneInformation_
{
  typedef ZoneInformation_<ContainerAllocator> Type;

  ZoneInformation_()
    : indication_info()
    , speed_factor(0.0)  {
    }
  ZoneInformation_(const ContainerAllocator& _alloc)
    : indication_info(_alloc)
    , speed_factor(0.0)  {
  (void)_alloc;
    }



   typedef  ::anscer_msgs::Indication_<ContainerAllocator>  _indication_info_type;
  _indication_info_type indication_info;

   typedef float _speed_factor_type;
  _speed_factor_type speed_factor;





  typedef boost::shared_ptr< ::anscer_msgs::ZoneInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::ZoneInformation_<ContainerAllocator> const> ConstPtr;

}; // struct ZoneInformation_

typedef ::anscer_msgs::ZoneInformation_<std::allocator<void> > ZoneInformation;

typedef boost::shared_ptr< ::anscer_msgs::ZoneInformation > ZoneInformationPtr;
typedef boost::shared_ptr< ::anscer_msgs::ZoneInformation const> ZoneInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::ZoneInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::ZoneInformation_<ContainerAllocator1> & lhs, const ::anscer_msgs::ZoneInformation_<ContainerAllocator2> & rhs)
{
  return lhs.indication_info == rhs.indication_info &&
    lhs.speed_factor == rhs.speed_factor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::ZoneInformation_<ContainerAllocator1> & lhs, const ::anscer_msgs::ZoneInformation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ZoneInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ZoneInformation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ZoneInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37c3f4225b2755242cf0813eaae1cb1a";
  }

  static const char* value(const ::anscer_msgs::ZoneInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37c3f4225b275524ULL;
  static const uint64_t static_value2 = 0x2cf0813eaae1cb1aULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/ZoneInformation";
  }

  static const char* value(const ::anscer_msgs::ZoneInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/Indication indication_info\n"
"float32 speed_factor\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/Indication\n"
"string color\n"
"int8 color_mode\n"
"bool buzzer\n"
"int8 buzzer_mode\n"
"int16 priority\n"
"\n"
"\n"
;
  }

  static const char* value(const ::anscer_msgs::ZoneInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.indication_info);
      stream.next(m.speed_factor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ZoneInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::ZoneInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::ZoneInformation_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "indication_info: ";
    Printer< ::anscer_msgs::Indication_<ContainerAllocator> >::stream(s, indent + "  ", v.indication_info);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed_factor: ";
    Printer<float>::stream(s, indent + "  ", v.speed_factor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_ZONEINFORMATION_H
