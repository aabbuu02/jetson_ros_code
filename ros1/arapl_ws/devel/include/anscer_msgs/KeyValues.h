// Generated by gencpp from file anscer_msgs/KeyValues.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_KEYVALUES_H
#define ANSCER_MSGS_MESSAGE_KEYVALUES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/KeyValue.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct KeyValues_
{
  typedef KeyValues_<ContainerAllocator> Type;

  KeyValues_()
    : keyvalue()  {
    }
  KeyValues_(const ContainerAllocator& _alloc)
    : keyvalue(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::anscer_msgs::KeyValue_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::anscer_msgs::KeyValue_<ContainerAllocator> >> _keyvalue_type;
  _keyvalue_type keyvalue;





  typedef boost::shared_ptr< ::anscer_msgs::KeyValues_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::KeyValues_<ContainerAllocator> const> ConstPtr;

}; // struct KeyValues_

typedef ::anscer_msgs::KeyValues_<std::allocator<void> > KeyValues;

typedef boost::shared_ptr< ::anscer_msgs::KeyValues > KeyValuesPtr;
typedef boost::shared_ptr< ::anscer_msgs::KeyValues const> KeyValuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::KeyValues_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::KeyValues_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::KeyValues_<ContainerAllocator1> & lhs, const ::anscer_msgs::KeyValues_<ContainerAllocator2> & rhs)
{
  return lhs.keyvalue == rhs.keyvalue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::KeyValues_<ContainerAllocator1> & lhs, const ::anscer_msgs::KeyValues_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::KeyValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::KeyValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::KeyValues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::KeyValues_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::KeyValues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::KeyValues_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::KeyValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0bd91006b3876ff7bb45ae93c1b6f32";
  }

  static const char* value(const ::anscer_msgs::KeyValues_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0bd91006b3876ffULL;
  static const uint64_t static_value2 = 0x7bb45ae93c1b6f32ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::KeyValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/KeyValues";
  }

  static const char* value(const ::anscer_msgs::KeyValues_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::KeyValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "KeyValue[] keyvalue\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/KeyValue\n"
"string key			#Label of the value\n"
"string value		#Value to track\n"
"string unit\n"
"float32 errorlevel			#Errorlevel of the value\n"
;
  }

  static const char* value(const ::anscer_msgs::KeyValues_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::KeyValues_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.keyvalue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyValues_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::KeyValues_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::KeyValues_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "keyvalue: ";
    if (v.keyvalue.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.keyvalue.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::anscer_msgs::KeyValue_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.keyvalue[i]);
    }
    if (v.keyvalue.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_KEYVALUES_H
