// Generated by gencpp from file anscer_msgs/Indication.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_INDICATION_H
#define ANSCER_MSGS_MESSAGE_INDICATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct Indication_
{
  typedef Indication_<ContainerAllocator> Type;

  Indication_()
    : color()
    , color_mode(0)
    , buzzer(false)
    , buzzer_mode(0)
    , priority(0)  {
    }
  Indication_(const ContainerAllocator& _alloc)
    : color(_alloc)
    , color_mode(0)
    , buzzer(false)
    , buzzer_mode(0)
    , priority(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _color_type;
  _color_type color;

   typedef int8_t _color_mode_type;
  _color_mode_type color_mode;

   typedef uint8_t _buzzer_type;
  _buzzer_type buzzer;

   typedef int8_t _buzzer_mode_type;
  _buzzer_mode_type buzzer_mode;

   typedef int16_t _priority_type;
  _priority_type priority;





  typedef boost::shared_ptr< ::anscer_msgs::Indication_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::Indication_<ContainerAllocator> const> ConstPtr;

}; // struct Indication_

typedef ::anscer_msgs::Indication_<std::allocator<void> > Indication;

typedef boost::shared_ptr< ::anscer_msgs::Indication > IndicationPtr;
typedef boost::shared_ptr< ::anscer_msgs::Indication const> IndicationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::Indication_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::Indication_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::Indication_<ContainerAllocator1> & lhs, const ::anscer_msgs::Indication_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.color_mode == rhs.color_mode &&
    lhs.buzzer == rhs.buzzer &&
    lhs.buzzer_mode == rhs.buzzer_mode &&
    lhs.priority == rhs.priority;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::Indication_<ContainerAllocator1> & lhs, const ::anscer_msgs::Indication_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::Indication_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::Indication_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::Indication_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::Indication_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::Indication_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::Indication_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::Indication_<ContainerAllocator> >
{
  static const char* value()
  {
    return "121d26089d956929130db8efbb5ea4b2";
  }

  static const char* value(const ::anscer_msgs::Indication_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x121d26089d956929ULL;
  static const uint64_t static_value2 = 0x130db8efbb5ea4b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::Indication_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/Indication";
  }

  static const char* value(const ::anscer_msgs::Indication_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::Indication_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string color\n"
"int8 color_mode\n"
"bool buzzer\n"
"int8 buzzer_mode\n"
"int16 priority\n"
"\n"
"\n"
;
  }

  static const char* value(const ::anscer_msgs::Indication_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::Indication_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.color_mode);
      stream.next(m.buzzer);
      stream.next(m.buzzer_mode);
      stream.next(m.priority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Indication_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::Indication_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::Indication_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.color);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "color_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.color_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "buzzer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "buzzer_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.buzzer_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "priority: ";
    Printer<int16_t>::stream(s, indent + "  ", v.priority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_INDICATION_H
