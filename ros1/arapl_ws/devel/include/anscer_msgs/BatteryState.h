// Generated by gencpp from file anscer_msgs/BatteryState.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_BATTERYSTATE_H
#define ANSCER_MSGS_MESSAGE_BATTERYSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct BatteryState_
{
  typedef BatteryState_<ContainerAllocator> Type;

  BatteryState_()
    : voltage(0.0)
    , current(0.0)  {
    }
  BatteryState_(const ContainerAllocator& _alloc)
    : voltage(0.0)
    , current(0.0)  {
  (void)_alloc;
    }



   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::anscer_msgs::BatteryState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::BatteryState_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryState_

typedef ::anscer_msgs::BatteryState_<std::allocator<void> > BatteryState;

typedef boost::shared_ptr< ::anscer_msgs::BatteryState > BatteryStatePtr;
typedef boost::shared_ptr< ::anscer_msgs::BatteryState const> BatteryStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::BatteryState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::BatteryState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::BatteryState_<ContainerAllocator1> & lhs, const ::anscer_msgs::BatteryState_<ContainerAllocator2> & rhs)
{
  return lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::BatteryState_<ContainerAllocator1> & lhs, const ::anscer_msgs::BatteryState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::BatteryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::BatteryState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::BatteryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::BatteryState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::BatteryState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::BatteryState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e237a0971ec09fc952c0717bd077bf2";
  }

  static const char* value(const ::anscer_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e237a0971ec09fcULL;
  static const uint64_t static_value2 = 0x952c0717bd077bf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/BatteryState";
  }

  static const char* value(const ::anscer_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#mission status\n"
"float32 voltage\n"
"float32 current\n"
;
  }

  static const char* value(const ::anscer_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::BatteryState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voltage);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::BatteryState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::BatteryState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_BATTERYSTATE_H
