// Generated by gencpp from file anscer_msgs/MissionInfo.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_MISSIONINFO_H
#define ANSCER_MSGS_MESSAGE_MISSIONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/MissionData.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct MissionInfo_
{
  typedef MissionInfo_<ContainerAllocator> Type;

  MissionInfo_()
    : mission_info()  {
    }
  MissionInfo_(const ContainerAllocator& _alloc)
    : mission_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::anscer_msgs::MissionData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::anscer_msgs::MissionData_<ContainerAllocator> >> _mission_info_type;
  _mission_info_type mission_info;





  typedef boost::shared_ptr< ::anscer_msgs::MissionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::MissionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MissionInfo_

typedef ::anscer_msgs::MissionInfo_<std::allocator<void> > MissionInfo;

typedef boost::shared_ptr< ::anscer_msgs::MissionInfo > MissionInfoPtr;
typedef boost::shared_ptr< ::anscer_msgs::MissionInfo const> MissionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::MissionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::MissionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::MissionInfo_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.mission_info == rhs.mission_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::MissionInfo_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::MissionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29be06f7c3d77e1344134d3a99624eb2";
  }

  static const char* value(const ::anscer_msgs::MissionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29be06f7c3d77e13ULL;
  static const uint64_t static_value2 = 0x44134d3a99624eb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::MissionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MissionInfo";
  }

  static const char* value(const ::anscer_msgs::MissionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::MissionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MissionData[] mission_info\n"
"\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/MissionData\n"
"string mission_name\n"
"int16 success_count\n"
"int16 mission_count\n"
"\n"
;
  }

  static const char* value(const ::anscer_msgs::MissionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::MissionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::MissionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::MissionInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "mission_info: ";
    if (v.mission_info.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.mission_info.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::anscer_msgs::MissionData_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.mission_info[i]);
    }
    if (v.mission_info.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_MISSIONINFO_H
