// Generated by gencpp from file anscer_msgs/ACRControl.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_ACRCONTROL_H
#define ANSCER_MSGS_MESSAGE_ACRCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct ACRControl_
{
  typedef ACRControl_<ContainerAllocator> Type;

  ACRControl_()
    : acr_shelf(0)
    , target_shelf(0)
    , acr_action(0)
    , bar_code_number(0)
    , whole_bin_number(0)  {
    }
  ACRControl_(const ContainerAllocator& _alloc)
    : acr_shelf(0)
    , target_shelf(0)
    , acr_action(0)
    , bar_code_number(0)
    , whole_bin_number(0)  {
  (void)_alloc;
    }



   typedef int16_t _acr_shelf_type;
  _acr_shelf_type acr_shelf;

   typedef int16_t _target_shelf_type;
  _target_shelf_type target_shelf;

   typedef int16_t _acr_action_type;
  _acr_action_type acr_action;

   typedef int64_t _bar_code_number_type;
  _bar_code_number_type bar_code_number;

   typedef int64_t _whole_bin_number_type;
  _whole_bin_number_type whole_bin_number;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PICKUP)
  #undef PICKUP
#endif
#if defined(_WIN32) && defined(DROPOFF)
  #undef DROPOFF
#endif

  enum {
    PICKUP = 0,
    DROPOFF = 1,
  };


  typedef boost::shared_ptr< ::anscer_msgs::ACRControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::ACRControl_<ContainerAllocator> const> ConstPtr;

}; // struct ACRControl_

typedef ::anscer_msgs::ACRControl_<std::allocator<void> > ACRControl;

typedef boost::shared_ptr< ::anscer_msgs::ACRControl > ACRControlPtr;
typedef boost::shared_ptr< ::anscer_msgs::ACRControl const> ACRControlConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::ACRControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::ACRControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::ACRControl_<ContainerAllocator1> & lhs, const ::anscer_msgs::ACRControl_<ContainerAllocator2> & rhs)
{
  return lhs.acr_shelf == rhs.acr_shelf &&
    lhs.target_shelf == rhs.target_shelf &&
    lhs.acr_action == rhs.acr_action &&
    lhs.bar_code_number == rhs.bar_code_number &&
    lhs.whole_bin_number == rhs.whole_bin_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::ACRControl_<ContainerAllocator1> & lhs, const ::anscer_msgs::ACRControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ACRControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ACRControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ACRControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ACRControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ACRControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ACRControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::ACRControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc49709c8d8c7803a2e07e7391600be5";
  }

  static const char* value(const ::anscer_msgs::ACRControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc49709c8d8c7803ULL;
  static const uint64_t static_value2 = 0xa2e07e7391600be5ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::ACRControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/ACRControl";
  }

  static const char* value(const ::anscer_msgs::ACRControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::ACRControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#mission status\n"
"int32 PICKUP =0\n"
"int32 DROPOFF =1\n"
"\n"
"int16 acr_shelf\n"
"int16 target_shelf\n"
"int16 acr_action\n"
"int64 bar_code_number\n"
"int64 whole_bin_number\n"
;
  }

  static const char* value(const ::anscer_msgs::ACRControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::ACRControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acr_shelf);
      stream.next(m.target_shelf);
      stream.next(m.acr_action);
      stream.next(m.bar_code_number);
      stream.next(m.whole_bin_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ACRControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::ACRControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::ACRControl_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "acr_shelf: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acr_shelf);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_shelf: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_shelf);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "acr_action: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acr_action);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bar_code_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.bar_code_number);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "whole_bin_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.whole_bin_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_ACRCONTROL_H
