// Generated by gencpp from file anscer_msgs/MotorStatusFlags.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_MOTORSTATUSFLAGS_H
#define ANSCER_MSGS_MESSAGE_MOTORSTATUSFLAGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct MotorStatusFlags_
{
  typedef MotorStatusFlags_<ContainerAllocator> Type;

  MotorStatusFlags_()
    : serial_mode(false)
    , pulse_mode(false)
    , analog_mode(false)
    , power_stage_off(false)
    , stall_detected(false)
    , at_limit(false)
    , unused(false)
    , micro_basic_script_running(false)
    , motor_tuning_mode(false)  {
    }
  MotorStatusFlags_(const ContainerAllocator& _alloc)
    : serial_mode(false)
    , pulse_mode(false)
    , analog_mode(false)
    , power_stage_off(false)
    , stall_detected(false)
    , at_limit(false)
    , unused(false)
    , micro_basic_script_running(false)
    , motor_tuning_mode(false)  {
  (void)_alloc;
    }



   typedef uint8_t _serial_mode_type;
  _serial_mode_type serial_mode;

   typedef uint8_t _pulse_mode_type;
  _pulse_mode_type pulse_mode;

   typedef uint8_t _analog_mode_type;
  _analog_mode_type analog_mode;

   typedef uint8_t _power_stage_off_type;
  _power_stage_off_type power_stage_off;

   typedef uint8_t _stall_detected_type;
  _stall_detected_type stall_detected;

   typedef uint8_t _at_limit_type;
  _at_limit_type at_limit;

   typedef uint8_t _unused_type;
  _unused_type unused;

   typedef uint8_t _micro_basic_script_running_type;
  _micro_basic_script_running_type micro_basic_script_running;

   typedef uint8_t _motor_tuning_mode_type;
  _motor_tuning_mode_type motor_tuning_mode;





  typedef boost::shared_ptr< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> const> ConstPtr;

}; // struct MotorStatusFlags_

typedef ::anscer_msgs::MotorStatusFlags_<std::allocator<void> > MotorStatusFlags;

typedef boost::shared_ptr< ::anscer_msgs::MotorStatusFlags > MotorStatusFlagsPtr;
typedef boost::shared_ptr< ::anscer_msgs::MotorStatusFlags const> MotorStatusFlagsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator1> & lhs, const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator2> & rhs)
{
  return lhs.serial_mode == rhs.serial_mode &&
    lhs.pulse_mode == rhs.pulse_mode &&
    lhs.analog_mode == rhs.analog_mode &&
    lhs.power_stage_off == rhs.power_stage_off &&
    lhs.stall_detected == rhs.stall_detected &&
    lhs.at_limit == rhs.at_limit &&
    lhs.unused == rhs.unused &&
    lhs.micro_basic_script_running == rhs.micro_basic_script_running &&
    lhs.motor_tuning_mode == rhs.motor_tuning_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator1> & lhs, const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d1ef401a01f21abeee2855174e79d1f";
  }

  static const char* value(const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d1ef401a01f21abULL;
  static const uint64_t static_value2 = 0xeee2855174e79d1fULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MotorStatusFlags";
  }

  static const char* value(const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool serial_mode\n"
"bool pulse_mode\n"
"bool analog_mode\n"
"bool power_stage_off\n"
"bool stall_detected\n"
"bool at_limit\n"
"bool unused\n"
"bool micro_basic_script_running\n"
"bool motor_tuning_mode\n"
;
  }

  static const char* value(const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.serial_mode);
      stream.next(m.pulse_mode);
      stream.next(m.analog_mode);
      stream.next(m.power_stage_off);
      stream.next(m.stall_detected);
      stream.next(m.at_limit);
      stream.next(m.unused);
      stream.next(m.micro_basic_script_running);
      stream.next(m.motor_tuning_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorStatusFlags_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::MotorStatusFlags_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "serial_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serial_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pulse_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pulse_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "analog_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.analog_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "power_stage_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_stage_off);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "stall_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stall_detected);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "at_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.at_limit);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "unused: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unused);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "micro_basic_script_running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.micro_basic_script_running);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor_tuning_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_tuning_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_MOTORSTATUSFLAGS_H
