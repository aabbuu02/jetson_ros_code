// Generated by gencpp from file anscer_msgs/ControllerMode.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_CONTROLLERMODE_H
#define ANSCER_MSGS_MESSAGE_CONTROLLERMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct ControllerMode_
{
  typedef ControllerMode_<ContainerAllocator> Type;

  ControllerMode_()
    : controller_mode(0)  {
    }
  ControllerMode_(const ContainerAllocator& _alloc)
    : controller_mode(0)  {
  (void)_alloc;
    }



   typedef int8_t _controller_mode_type;
  _controller_mode_type controller_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DEFAULT_MOTION)
  #undef DEFAULT_MOTION
#endif
#if defined(_WIN32) && defined(CHARGE_DOCK)
  #undef CHARGE_DOCK
#endif
#if defined(_WIN32) && defined(CHARGE_UNDOCK)
  #undef CHARGE_UNDOCK
#endif
#if defined(_WIN32) && defined(BARCODE_MOTION)
  #undef BARCODE_MOTION
#endif

  enum {
    DEFAULT_MOTION = 0u,
    CHARGE_DOCK = 1u,
    CHARGE_UNDOCK = 2u,
    BARCODE_MOTION = 3u,
  };


  typedef boost::shared_ptr< ::anscer_msgs::ControllerMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::ControllerMode_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerMode_

typedef ::anscer_msgs::ControllerMode_<std::allocator<void> > ControllerMode;

typedef boost::shared_ptr< ::anscer_msgs::ControllerMode > ControllerModePtr;
typedef boost::shared_ptr< ::anscer_msgs::ControllerMode const> ControllerModeConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::ControllerMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::ControllerMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::ControllerMode_<ContainerAllocator1> & lhs, const ::anscer_msgs::ControllerMode_<ContainerAllocator2> & rhs)
{
  return lhs.controller_mode == rhs.controller_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::ControllerMode_<ContainerAllocator1> & lhs, const ::anscer_msgs::ControllerMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ControllerMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ControllerMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ControllerMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ControllerMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ControllerMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ControllerMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::ControllerMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8df55bc2a0cb79189a6d96bf669a6495";
  }

  static const char* value(const ::anscer_msgs::ControllerMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8df55bc2a0cb7918ULL;
  static const uint64_t static_value2 = 0x9a6d96bf669a6495ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::ControllerMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/ControllerMode";
  }

  static const char* value(const ::anscer_msgs::ControllerMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::ControllerMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 DEFAULT_MOTION=0\n"
"uint8 CHARGE_DOCK=1\n"
"uint8 CHARGE_UNDOCK=2\n"
"uint8 BARCODE_MOTION=3\n"
"int8 controller_mode\n"
;
  }

  static const char* value(const ::anscer_msgs::ControllerMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::ControllerMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.controller_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::ControllerMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::ControllerMode_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "controller_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.controller_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_CONTROLLERMODE_H
