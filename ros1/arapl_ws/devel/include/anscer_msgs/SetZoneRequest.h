// Generated by gencpp from file anscer_msgs/SetZoneRequest.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_SETZONEREQUEST_H
#define ANSCER_MSGS_MESSAGE_SETZONEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/ZonePoints.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct SetZoneRequest_
{
  typedef SetZoneRequest_<ContainerAllocator> Type;

  SetZoneRequest_()
    : zone_points()  {
    }
  SetZoneRequest_(const ContainerAllocator& _alloc)
    : zone_points(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::anscer_msgs::ZonePoints_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::anscer_msgs::ZonePoints_<ContainerAllocator> >> _zone_points_type;
  _zone_points_type zone_points;





  typedef boost::shared_ptr< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetZoneRequest_

typedef ::anscer_msgs::SetZoneRequest_<std::allocator<void> > SetZoneRequest;

typedef boost::shared_ptr< ::anscer_msgs::SetZoneRequest > SetZoneRequestPtr;
typedef boost::shared_ptr< ::anscer_msgs::SetZoneRequest const> SetZoneRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::SetZoneRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::SetZoneRequest_<ContainerAllocator1> & lhs, const ::anscer_msgs::SetZoneRequest_<ContainerAllocator2> & rhs)
{
  return lhs.zone_points == rhs.zone_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::SetZoneRequest_<ContainerAllocator1> & lhs, const ::anscer_msgs::SetZoneRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08e9fcd73c1179703fff15f09533420d";
  }

  static const char* value(const ::anscer_msgs::SetZoneRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08e9fcd73c117970ULL;
  static const uint64_t static_value2 = 0x3fff15f09533420dULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/SetZoneRequest";
  }

  static const char* value(const ::anscer_msgs::SetZoneRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/ZonePoints[] zone_points\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/ZonePoints\n"
"string index\n"
"geometry_msgs/Point[] coordinates\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::anscer_msgs::SetZoneRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zone_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetZoneRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::SetZoneRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::SetZoneRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "zone_points: ";
    if (v.zone_points.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.zone_points.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::anscer_msgs::ZonePoints_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.zone_points[i]);
    }
    if (v.zone_points.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_SETZONEREQUEST_H
