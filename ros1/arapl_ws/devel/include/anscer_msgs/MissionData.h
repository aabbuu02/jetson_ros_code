// Generated by gencpp from file anscer_msgs/MissionData.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_MISSIONDATA_H
#define ANSCER_MSGS_MESSAGE_MISSIONDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct MissionData_
{
  typedef MissionData_<ContainerAllocator> Type;

  MissionData_()
    : mission_name()
    , success_count(0)
    , mission_count(0)  {
    }
  MissionData_(const ContainerAllocator& _alloc)
    : mission_name(_alloc)
    , success_count(0)
    , mission_count(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mission_name_type;
  _mission_name_type mission_name;

   typedef int16_t _success_count_type;
  _success_count_type success_count;

   typedef int16_t _mission_count_type;
  _mission_count_type mission_count;





  typedef boost::shared_ptr< ::anscer_msgs::MissionData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::MissionData_<ContainerAllocator> const> ConstPtr;

}; // struct MissionData_

typedef ::anscer_msgs::MissionData_<std::allocator<void> > MissionData;

typedef boost::shared_ptr< ::anscer_msgs::MissionData > MissionDataPtr;
typedef boost::shared_ptr< ::anscer_msgs::MissionData const> MissionDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::MissionData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::MissionData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::MissionData_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionData_<ContainerAllocator2> & rhs)
{
  return lhs.mission_name == rhs.mission_name &&
    lhs.success_count == rhs.success_count &&
    lhs.mission_count == rhs.mission_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::MissionData_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::MissionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8677a8d3995d6e5101db8568d121c771";
  }

  static const char* value(const ::anscer_msgs::MissionData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8677a8d3995d6e51ULL;
  static const uint64_t static_value2 = 0x01db8568d121c771ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::MissionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MissionData";
  }

  static const char* value(const ::anscer_msgs::MissionData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::MissionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mission_name\n"
"int16 success_count\n"
"int16 mission_count\n"
"\n"
;
  }

  static const char* value(const ::anscer_msgs::MissionData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::MissionData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_name);
      stream.next(m.success_count);
      stream.next(m.mission_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::MissionData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::MissionData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "mission_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mission_name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "success_count: ";
    Printer<int16_t>::stream(s, indent + "  ", v.success_count);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mission_count: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mission_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_MISSIONDATA_H
