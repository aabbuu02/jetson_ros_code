// Generated by gencpp from file anscer_msgs/MotorDiagnostics.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_MOTORDIAGNOSTICS_H
#define ANSCER_MSGS_MESSAGE_MOTORDIAGNOSTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/MotorFaultFlags.h>
#include <anscer_msgs/MotorStatusFlags.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct MotorDiagnostics_
{
  typedef MotorDiagnostics_<ContainerAllocator> Type;

  MotorDiagnostics_()
    : name()
    , fault_flags()
    , status_flags()  {
    }
  MotorDiagnostics_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , fault_flags(_alloc)
    , status_flags(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::anscer_msgs::MotorFaultFlags_<ContainerAllocator>  _fault_flags_type;
  _fault_flags_type fault_flags;

   typedef  ::anscer_msgs::MotorStatusFlags_<ContainerAllocator>  _status_flags_type;
  _status_flags_type status_flags;





  typedef boost::shared_ptr< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct MotorDiagnostics_

typedef ::anscer_msgs::MotorDiagnostics_<std::allocator<void> > MotorDiagnostics;

typedef boost::shared_ptr< ::anscer_msgs::MotorDiagnostics > MotorDiagnosticsPtr;
typedef boost::shared_ptr< ::anscer_msgs::MotorDiagnostics const> MotorDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator1> & lhs, const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.fault_flags == rhs.fault_flags &&
    lhs.status_flags == rhs.status_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator1> & lhs, const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0632e6a21795b5a1cc88be69506a4af5";
  }

  static const char* value(const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0632e6a21795b5a1ULL;
  static const uint64_t static_value2 = 0xcc88be69506a4af5ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MotorDiagnostics";
  }

  static const char* value(const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"MotorFaultFlags fault_flags\n"
"MotorStatusFlags status_flags\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/MotorFaultFlags\n"
"bool overheat\n"
"bool overvoltage\n"
"bool undervoltage\n"
"bool short_circuit\n"
"bool emergency_stop\n"
"bool motor_setup_fault\n"
"bool mosfet_failure\n"
"bool default_configuration\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/MotorStatusFlags\n"
"bool serial_mode\n"
"bool pulse_mode\n"
"bool analog_mode\n"
"bool power_stage_off\n"
"bool stall_detected\n"
"bool at_limit\n"
"bool unused\n"
"bool micro_basic_script_running\n"
"bool motor_tuning_mode\n"
;
  }

  static const char* value(const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.fault_flags);
      stream.next(m.status_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::MotorDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::MotorDiagnostics_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "fault_flags: ";
    Printer< ::anscer_msgs::MotorFaultFlags_<ContainerAllocator> >::stream(s, indent + "  ", v.fault_flags);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status_flags: ";
    Printer< ::anscer_msgs::MotorStatusFlags_<ContainerAllocator> >::stream(s, indent + "  ", v.status_flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_MOTORDIAGNOSTICS_H
