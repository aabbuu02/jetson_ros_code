// Generated by gencpp from file anscer_msgs/ZonePoints.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_ZONEPOINTS_H
#define ANSCER_MSGS_MESSAGE_ZONEPOINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct ZonePoints_
{
  typedef ZonePoints_<ContainerAllocator> Type;

  ZonePoints_()
    : index()
    , coordinates()  {
    }
  ZonePoints_(const ContainerAllocator& _alloc)
    : index(_alloc)
    , coordinates(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _index_type;
  _index_type index;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _coordinates_type;
  _coordinates_type coordinates;





  typedef boost::shared_ptr< ::anscer_msgs::ZonePoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::ZonePoints_<ContainerAllocator> const> ConstPtr;

}; // struct ZonePoints_

typedef ::anscer_msgs::ZonePoints_<std::allocator<void> > ZonePoints;

typedef boost::shared_ptr< ::anscer_msgs::ZonePoints > ZonePointsPtr;
typedef boost::shared_ptr< ::anscer_msgs::ZonePoints const> ZonePointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::ZonePoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::ZonePoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::ZonePoints_<ContainerAllocator1> & lhs, const ::anscer_msgs::ZonePoints_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.coordinates == rhs.coordinates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::ZonePoints_<ContainerAllocator1> & lhs, const ::anscer_msgs::ZonePoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ZonePoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::ZonePoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ZonePoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::ZonePoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ZonePoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::ZonePoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::ZonePoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c62b504d2caceb162c84163822c2459c";
  }

  static const char* value(const ::anscer_msgs::ZonePoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc62b504d2caceb16ULL;
  static const uint64_t static_value2 = 0x2c84163822c2459cULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::ZonePoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/ZonePoints";
  }

  static const char* value(const ::anscer_msgs::ZonePoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::ZonePoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string index\n"
"geometry_msgs/Point[] coordinates\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::anscer_msgs::ZonePoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::ZonePoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.coordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ZonePoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::ZonePoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::ZonePoints_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "index: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.index);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "coordinates: ";
    if (v.coordinates.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.coordinates.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.coordinates[i]);
    }
    if (v.coordinates.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_ZONEPOINTS_H
