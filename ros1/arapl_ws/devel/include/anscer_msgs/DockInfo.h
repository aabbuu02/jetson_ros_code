// Generated by gencpp from file anscer_msgs/DockInfo.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_DOCKINFO_H
#define ANSCER_MSGS_MESSAGE_DOCKINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct DockInfo_
{
  typedef DockInfo_<ContainerAllocator> Type;

  DockInfo_()
    : dock_marker(0)
    , dock_mode(0)  {
    }
  DockInfo_(const ContainerAllocator& _alloc)
    : dock_marker(0)
    , dock_mode(0)  {
  (void)_alloc;
    }



   typedef int8_t _dock_marker_type;
  _dock_marker_type dock_marker;

   typedef int8_t _dock_mode_type;
  _dock_mode_type dock_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FIDUCIALDOCKING)
  #undef FIDUCIALDOCKING
#endif
#if defined(_WIN32) && defined(REFLECTORDOCKING)
  #undef REFLECTORDOCKING
#endif
#if defined(_WIN32) && defined(TROLLEYDOCKING)
  #undef TROLLEYDOCKING
#endif
#if defined(_WIN32) && defined(ICPDOCKING)
  #undef ICPDOCKING
#endif
#if defined(_WIN32) && defined(GROUNDMARKERDOCKING)
  #undef GROUNDMARKERDOCKING
#endif
#if defined(_WIN32) && defined(SIDEWISEDOCKING)
  #undef SIDEWISEDOCKING
#endif
#if defined(_WIN32) && defined(DOCKSTATE)
  #undef DOCKSTATE
#endif
#if defined(_WIN32) && defined(UNDOCKSTATE)
  #undef UNDOCKSTATE
#endif

  enum {
    FIDUCIALDOCKING = 1u,
    REFLECTORDOCKING = 2u,
    TROLLEYDOCKING = 3u,
    ICPDOCKING = 4u,
    GROUNDMARKERDOCKING = 5u,
    SIDEWISEDOCKING = 6u,
    DOCKSTATE = 1u,
    UNDOCKSTATE = 2u,
  };


  typedef boost::shared_ptr< ::anscer_msgs::DockInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::DockInfo_<ContainerAllocator> const> ConstPtr;

}; // struct DockInfo_

typedef ::anscer_msgs::DockInfo_<std::allocator<void> > DockInfo;

typedef boost::shared_ptr< ::anscer_msgs::DockInfo > DockInfoPtr;
typedef boost::shared_ptr< ::anscer_msgs::DockInfo const> DockInfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::DockInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::DockInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::DockInfo_<ContainerAllocator1> & lhs, const ::anscer_msgs::DockInfo_<ContainerAllocator2> & rhs)
{
  return lhs.dock_marker == rhs.dock_marker &&
    lhs.dock_mode == rhs.dock_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::DockInfo_<ContainerAllocator1> & lhs, const ::anscer_msgs::DockInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::DockInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::DockInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::DockInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::DockInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::DockInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::DockInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::DockInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72372d50c9cb649d61d640ea75a875cc";
  }

  static const char* value(const ::anscer_msgs::DockInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72372d50c9cb649dULL;
  static const uint64_t static_value2 = 0x61d640ea75a875ccULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::DockInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/DockInfo";
  }

  static const char* value(const ::anscer_msgs::DockInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::DockInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FIDUCIALDOCKING=1\n"
"uint8 REFLECTORDOCKING=2\n"
"uint8 TROLLEYDOCKING=3\n"
"uint8 ICPDOCKING=4\n"
"uint8 GROUNDMARKERDOCKING=5\n"
"uint8 SIDEWISEDOCKING=6\n"
"\n"
"uint8 DOCKSTATE=1\n"
"uint8 UNDOCKSTATE=2\n"
"\n"
"int8 dock_marker\n"
"int8 dock_mode\n"
"\n"
;
  }

  static const char* value(const ::anscer_msgs::DockInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::DockInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dock_marker);
      stream.next(m.dock_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::DockInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::DockInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "dock_marker: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dock_marker);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dock_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dock_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_DOCKINFO_H
