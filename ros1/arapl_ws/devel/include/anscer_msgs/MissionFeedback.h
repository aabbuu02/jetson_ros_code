// Generated by gencpp from file anscer_msgs/MissionFeedback.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_MISSIONFEEDBACK_H
#define ANSCER_MSGS_MESSAGE_MISSIONFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/Feedback.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct MissionFeedback_
{
  typedef MissionFeedback_<ContainerAllocator> Type;

  MissionFeedback_()
    : mission_feedback()  {
    }
  MissionFeedback_(const ContainerAllocator& _alloc)
    : mission_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::anscer_msgs::Feedback_<ContainerAllocator>  _mission_feedback_type;
  _mission_feedback_type mission_feedback;





  typedef boost::shared_ptr< ::anscer_msgs::MissionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::MissionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MissionFeedback_

typedef ::anscer_msgs::MissionFeedback_<std::allocator<void> > MissionFeedback;

typedef boost::shared_ptr< ::anscer_msgs::MissionFeedback > MissionFeedbackPtr;
typedef boost::shared_ptr< ::anscer_msgs::MissionFeedback const> MissionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::MissionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::MissionFeedback_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.mission_feedback == rhs.mission_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::MissionFeedback_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a3149ea484a6d0f88c761618ba5e6b0";
  }

  static const char* value(const ::anscer_msgs::MissionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a3149ea484a6d0fULL;
  static const uint64_t static_value2 = 0x88c761618ba5e6b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MissionFeedback";
  }

  static const char* value(const ::anscer_msgs::MissionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"anscer_msgs/Feedback mission_feedback\n"
"\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/Feedback\n"
"#mission status\n"
"int32 IDLE =0\n"
"int32 ACTIVE =1\n"
"int32 SUCCESS =2\n"
"int32 ABORTED =3\n"
"int32 PAUSED =4\n"
"\n"
"\n"
"string index\n"
"string mission_id\n"
"int16 number\n"
"int16 status\n"
"anscer_msgs/ChargeInfo charge_info\n"
"float32 completion_percentage\n"
"int32 time_elapsed\n"
"int32 priority_level\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/ChargeInfo\n"
"uint8 CONNECTED=1\n"
"uint8 DISCONNECTED=2\n"
"uint8 OVERRIDE=3\n"
"\n"
"bool charger_activate\n"
"int32 charge_time\n"
"bool ignore_time\n"
"float32 charge_percentage\n"
"bool ignore_percentage\n"
;
  }

  static const char* value(const ::anscer_msgs::MissionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::MissionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::MissionFeedback_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "mission_feedback: ";
    Printer< ::anscer_msgs::Feedback_<ContainerAllocator> >::stream(s, indent + "  ", v.mission_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_MISSIONFEEDBACK_H
