// Generated by gencpp from file anscer_msgs/MissionAnalyticsResponse.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_MISSIONANALYTICSRESPONSE_H
#define ANSCER_MSGS_MESSAGE_MISSIONANALYTICSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/MissionDB.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct MissionAnalyticsResponse_
{
  typedef MissionAnalyticsResponse_<ContainerAllocator> Type;

  MissionAnalyticsResponse_()
    : mission_db()  {
    }
  MissionAnalyticsResponse_(const ContainerAllocator& _alloc)
    : mission_db(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::anscer_msgs::MissionDB_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::anscer_msgs::MissionDB_<ContainerAllocator> >> _mission_db_type;
  _mission_db_type mission_db;





  typedef boost::shared_ptr< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MissionAnalyticsResponse_

typedef ::anscer_msgs::MissionAnalyticsResponse_<std::allocator<void> > MissionAnalyticsResponse;

typedef boost::shared_ptr< ::anscer_msgs::MissionAnalyticsResponse > MissionAnalyticsResponsePtr;
typedef boost::shared_ptr< ::anscer_msgs::MissionAnalyticsResponse const> MissionAnalyticsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.mission_db == rhs.mission_db;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f985c515e6483a1e6161537b9b86c748";
  }

  static const char* value(const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf985c515e6483a1eULL;
  static const uint64_t static_value2 = 0x6161537b9b86c748ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MissionAnalyticsResponse";
  }

  static const char* value(const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MissionDB[] mission_db\n"
"\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/MissionDB\n"
"string timestamp\n"
"float32 current_distance\n"
"float32 total_distance\n"
;
  }

  static const char* value(const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_db);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionAnalyticsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::MissionAnalyticsResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "mission_db: ";
    if (v.mission_db.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.mission_db.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::anscer_msgs::MissionDB_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.mission_db[i]);
    }
    if (v.mission_db.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_MISSIONANALYTICSRESPONSE_H
