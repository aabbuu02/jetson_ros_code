// Generated by gencpp from file anscer_msgs/MissionDB.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_MISSIONDB_H
#define ANSCER_MSGS_MESSAGE_MISSIONDB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct MissionDB_
{
  typedef MissionDB_<ContainerAllocator> Type;

  MissionDB_()
    : timestamp()
    , current_distance(0.0)
    , total_distance(0.0)  {
    }
  MissionDB_(const ContainerAllocator& _alloc)
    : timestamp(_alloc)
    , current_distance(0.0)
    , total_distance(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _timestamp_type;
  _timestamp_type timestamp;

   typedef float _current_distance_type;
  _current_distance_type current_distance;

   typedef float _total_distance_type;
  _total_distance_type total_distance;





  typedef boost::shared_ptr< ::anscer_msgs::MissionDB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::MissionDB_<ContainerAllocator> const> ConstPtr;

}; // struct MissionDB_

typedef ::anscer_msgs::MissionDB_<std::allocator<void> > MissionDB;

typedef boost::shared_ptr< ::anscer_msgs::MissionDB > MissionDBPtr;
typedef boost::shared_ptr< ::anscer_msgs::MissionDB const> MissionDBConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::MissionDB_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::MissionDB_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::MissionDB_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionDB_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.current_distance == rhs.current_distance &&
    lhs.total_distance == rhs.total_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::MissionDB_<ContainerAllocator1> & lhs, const ::anscer_msgs::MissionDB_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionDB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::MissionDB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionDB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::MissionDB_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionDB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::MissionDB_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::MissionDB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45b94f6cc052bb5811d46e7c764cde3c";
  }

  static const char* value(const ::anscer_msgs::MissionDB_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45b94f6cc052bb58ULL;
  static const uint64_t static_value2 = 0x11d46e7c764cde3cULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::MissionDB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/MissionDB";
  }

  static const char* value(const ::anscer_msgs::MissionDB_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::MissionDB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string timestamp\n"
"float32 current_distance\n"
"float32 total_distance\n"
;
  }

  static const char* value(const ::anscer_msgs::MissionDB_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::MissionDB_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.current_distance);
      stream.next(m.total_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionDB_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::MissionDB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::MissionDB_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "timestamp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.timestamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "current_distance: ";
    Printer<float>::stream(s, indent + "  ", v.current_distance);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "total_distance: ";
    Printer<float>::stream(s, indent + "  ", v.total_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_MISSIONDB_H
