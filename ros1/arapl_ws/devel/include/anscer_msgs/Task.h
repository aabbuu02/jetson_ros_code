// Generated by gencpp from file anscer_msgs/Task.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_TASK_H
#define ANSCER_MSGS_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <anscer_msgs/ACRControl.h>
#include <anscer_msgs/ChargeInfo.h>

namespace anscer_msgs
{
template <class ContainerAllocator>
struct Task_
{
  typedef Task_<ContainerAllocator> Type;

  Task_()
    : index()
    , waypoint_index(0)
    , number(0)
    , activate(false)
    , acr_info()
    , charge_info()  {
    }
  Task_(const ContainerAllocator& _alloc)
    : index(_alloc)
    , waypoint_index(0)
    , number(0)
    , activate(false)
    , acr_info(_alloc)
    , charge_info(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _index_type;
  _index_type index;

   typedef int16_t _waypoint_index_type;
  _waypoint_index_type waypoint_index;

   typedef int16_t _number_type;
  _number_type number;

   typedef uint8_t _activate_type;
  _activate_type activate;

   typedef  ::anscer_msgs::ACRControl_<ContainerAllocator>  _acr_info_type;
  _acr_info_type acr_info;

   typedef  ::anscer_msgs::ChargeInfo_<ContainerAllocator>  _charge_info_type;
  _charge_info_type charge_info;





  typedef boost::shared_ptr< ::anscer_msgs::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::Task_<ContainerAllocator> const> ConstPtr;

}; // struct Task_

typedef ::anscer_msgs::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::anscer_msgs::Task > TaskPtr;
typedef boost::shared_ptr< ::anscer_msgs::Task const> TaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::Task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::Task_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::Task_<ContainerAllocator1> & lhs, const ::anscer_msgs::Task_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.waypoint_index == rhs.waypoint_index &&
    lhs.number == rhs.number &&
    lhs.activate == rhs.activate &&
    lhs.acr_info == rhs.acr_info &&
    lhs.charge_info == rhs.charge_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::Task_<ContainerAllocator1> & lhs, const ::anscer_msgs::Task_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::Task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::Task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8514c525e421060a8b705e1ac323b92";
  }

  static const char* value(const ::anscer_msgs::Task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8514c525e421060ULL;
  static const uint64_t static_value2 = 0xa8b705e1ac323b92ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/Task";
  }

  static const char* value(const ::anscer_msgs::Task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string index\n"
"int16 waypoint_index\n"
"int16 number\n"
"bool activate\n"
"anscer_msgs/ACRControl acr_info\n"
"anscer_msgs/ChargeInfo charge_info\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/ACRControl\n"
"#mission status\n"
"int32 PICKUP =0\n"
"int32 DROPOFF =1\n"
"\n"
"int16 acr_shelf\n"
"int16 target_shelf\n"
"int16 acr_action\n"
"int64 bar_code_number\n"
"int64 whole_bin_number\n"
"\n"
"================================================================================\n"
"MSG: anscer_msgs/ChargeInfo\n"
"uint8 CONNECTED=1\n"
"uint8 DISCONNECTED=2\n"
"uint8 OVERRIDE=3\n"
"\n"
"bool charger_activate\n"
"int32 charge_time\n"
"bool ignore_time\n"
"float32 charge_percentage\n"
"bool ignore_percentage\n"
;
  }

  static const char* value(const ::anscer_msgs::Task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::Task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.waypoint_index);
      stream.next(m.number);
      stream.next(m.activate);
      stream.next(m.acr_info);
      stream.next(m.charge_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::Task_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "index: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.index);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "waypoint_index: ";
    Printer<int16_t>::stream(s, indent + "  ", v.waypoint_index);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "activate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activate);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "acr_info: ";
    Printer< ::anscer_msgs::ACRControl_<ContainerAllocator> >::stream(s, indent + "  ", v.acr_info);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "charge_info: ";
    Printer< ::anscer_msgs::ChargeInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.charge_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_TASK_H
