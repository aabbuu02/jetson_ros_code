// Generated by gencpp from file anscer_msgs/FieldStatus.msg
// DO NOT EDIT!


#ifndef ANSCER_MSGS_MESSAGE_FIELDSTATUS_H
#define ANSCER_MSGS_MESSAGE_FIELDSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace anscer_msgs
{
template <class ContainerAllocator>
struct FieldStatus_
{
  typedef FieldStatus_<ContainerAllocator> Type;

  FieldStatus_()
    : direction(0)
    , is_safety(false)
    , is_warning(false)  {
    }
  FieldStatus_(const ContainerAllocator& _alloc)
    : direction(0)
    , is_safety(false)
    , is_warning(false)  {
  (void)_alloc;
    }



   typedef int8_t _direction_type;
  _direction_type direction;

   typedef uint8_t _is_safety_type;
  _is_safety_type is_safety;

   typedef uint8_t _is_warning_type;
  _is_warning_type is_warning;





  typedef boost::shared_ptr< ::anscer_msgs::FieldStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anscer_msgs::FieldStatus_<ContainerAllocator> const> ConstPtr;

}; // struct FieldStatus_

typedef ::anscer_msgs::FieldStatus_<std::allocator<void> > FieldStatus;

typedef boost::shared_ptr< ::anscer_msgs::FieldStatus > FieldStatusPtr;
typedef boost::shared_ptr< ::anscer_msgs::FieldStatus const> FieldStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anscer_msgs::FieldStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anscer_msgs::FieldStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::anscer_msgs::FieldStatus_<ContainerAllocator1> & lhs, const ::anscer_msgs::FieldStatus_<ContainerAllocator2> & rhs)
{
  return lhs.direction == rhs.direction &&
    lhs.is_safety == rhs.is_safety &&
    lhs.is_warning == rhs.is_warning;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::anscer_msgs::FieldStatus_<ContainerAllocator1> & lhs, const ::anscer_msgs::FieldStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace anscer_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::FieldStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anscer_msgs::FieldStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::FieldStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anscer_msgs::FieldStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::FieldStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anscer_msgs::FieldStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anscer_msgs::FieldStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0bad4ea9ecfbe49f072cf1a2ba87fb38";
  }

  static const char* value(const ::anscer_msgs::FieldStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0bad4ea9ecfbe49fULL;
  static const uint64_t static_value2 = 0x072cf1a2ba87fb38ULL;
};

template<class ContainerAllocator>
struct DataType< ::anscer_msgs::FieldStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anscer_msgs/FieldStatus";
  }

  static const char* value(const ::anscer_msgs::FieldStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anscer_msgs::FieldStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 direction\n"
"bool is_safety\n"
"bool is_warning\n"
;
  }

  static const char* value(const ::anscer_msgs::FieldStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anscer_msgs::FieldStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.direction);
      stream.next(m.is_safety);
      stream.next(m.is_warning);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FieldStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anscer_msgs::FieldStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anscer_msgs::FieldStatus_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direction);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "is_safety: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_safety);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "is_warning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_warning);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANSCER_MSGS_MESSAGE_FIELDSTATUS_H
