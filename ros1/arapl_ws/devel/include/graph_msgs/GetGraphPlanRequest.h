// Generated by gencpp from file graph_msgs/GetGraphPlanRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_GETGRAPHPLANREQUEST_H
#define GRAPH_MSGS_MESSAGE_GETGRAPHPLANREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graph_msgs
{
template <class ContainerAllocator>
struct GetGraphPlanRequest_
{
  typedef GetGraphPlanRequest_<ContainerAllocator> Type;

  GetGraphPlanRequest_()
    : source_id(0)
    , target_id(0)
    , ignore_goal_orientation(false)
    , ignore_path_orientation(false)  {
    }
  GetGraphPlanRequest_(const ContainerAllocator& _alloc)
    : source_id(0)
    , target_id(0)
    , ignore_goal_orientation(false)
    , ignore_path_orientation(false)  {
  (void)_alloc;
    }



   typedef uint32_t _source_id_type;
  _source_id_type source_id;

   typedef uint32_t _target_id_type;
  _target_id_type target_id;

   typedef uint8_t _ignore_goal_orientation_type;
  _ignore_goal_orientation_type ignore_goal_orientation;

   typedef uint8_t _ignore_path_orientation_type;
  _ignore_path_orientation_type ignore_path_orientation;





  typedef boost::shared_ptr< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetGraphPlanRequest_

typedef ::graph_msgs::GetGraphPlanRequest_<std::allocator<void> > GetGraphPlanRequest;

typedef boost::shared_ptr< ::graph_msgs::GetGraphPlanRequest > GetGraphPlanRequestPtr;
typedef boost::shared_ptr< ::graph_msgs::GetGraphPlanRequest const> GetGraphPlanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator1> & lhs, const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator2> & rhs)
{
  return lhs.source_id == rhs.source_id &&
    lhs.target_id == rhs.target_id &&
    lhs.ignore_goal_orientation == rhs.ignore_goal_orientation &&
    lhs.ignore_path_orientation == rhs.ignore_path_orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator1> & lhs, const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b1087ece28d0262c7635d4336c2ee40";
  }

  static const char* value(const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b1087ece28d0262ULL;
  static const uint64_t static_value2 = 0xc7635d4336c2ee40ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/GetGraphPlanRequest";
  }

  static const char* value(const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Source and destination IDs\n"
"uint32 source_id\n"
"uint32 target_id\n"
"bool ignore_goal_orientation\n"
"bool ignore_path_orientation\n"
;
  }

  static const char* value(const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source_id);
      stream.next(m.target_id);
      stream.next(m.ignore_goal_orientation);
      stream.next(m.ignore_path_orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGraphPlanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::GetGraphPlanRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "source_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.source_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.target_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ignore_goal_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_goal_orientation);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ignore_path_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_path_orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_GETGRAPHPLANREQUEST_H
