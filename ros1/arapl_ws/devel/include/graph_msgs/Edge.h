// Generated by gencpp from file graph_msgs/Edge.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_EDGE_H
#define GRAPH_MSGS_MESSAGE_EDGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/PoseArray.h>
#include <graph_msgs/Property.h>

namespace graph_msgs
{
template <class ContainerAllocator>
struct Edge_
{
  typedef Edge_<ContainerAllocator> Type;

  Edge_()
    : name()
    , alias()
    , type(0)
    , edge_direction_type(0)
    , creation_type(0)
    , source_vertex_id(0)
    , target_vertex_id(0)
    , length(0.0)
    , cost_factor(0.0)
    , bidirectional(false)
    , independent_orientation(false)
    , control_points()
    , control_orientation()
    , poses()
    , properties()  {
    }
  Edge_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , alias(_alloc)
    , type(0)
    , edge_direction_type(0)
    , creation_type(0)
    , source_vertex_id(0)
    , target_vertex_id(0)
    , length(0.0)
    , cost_factor(0.0)
    , bidirectional(false)
    , independent_orientation(false)
    , control_points(_alloc)
    , control_orientation(_alloc)
    , poses(_alloc)
    , properties(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _alias_type;
  _alias_type alias;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _edge_direction_type_type;
  _edge_direction_type_type edge_direction_type;

   typedef uint8_t _creation_type_type;
  _creation_type_type creation_type;

   typedef uint32_t _source_vertex_id_type;
  _source_vertex_id_type source_vertex_id;

   typedef uint32_t _target_vertex_id_type;
  _target_vertex_id_type target_vertex_id;

   typedef double _length_type;
  _length_type length;

   typedef double _cost_factor_type;
  _cost_factor_type cost_factor;

   typedef uint8_t _bidirectional_type;
  _bidirectional_type bidirectional;

   typedef uint8_t _independent_orientation_type;
  _independent_orientation_type independent_orientation;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _control_points_type;
  _control_points_type control_points;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _control_orientation_type;
  _control_orientation_type control_orientation;

   typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _poses_type;
  _poses_type poses;

   typedef std::vector< ::graph_msgs::Property_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::graph_msgs::Property_<ContainerAllocator> >> _properties_type;
  _properties_type properties;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STRAIGHT_LINE)
  #undef STRAIGHT_LINE
#endif
#if defined(_WIN32) && defined(CUBIC_BEZIER)
  #undef CUBIC_BEZIER
#endif
#if defined(_WIN32) && defined(FORWARD)
  #undef FORWARD
#endif
#if defined(_WIN32) && defined(REVERSE)
  #undef REVERSE
#endif
#if defined(_WIN32) && defined(BIDIRECTIONAL)
  #undef BIDIRECTIONAL
#endif
#if defined(_WIN32) && defined(CREATED)
  #undef CREATED
#endif
#if defined(_WIN32) && defined(GENERATED)
  #undef GENERATED
#endif

  enum {
    STRAIGHT_LINE = 0u,
    CUBIC_BEZIER = 1u,
    FORWARD = 0u,
    REVERSE = 1u,
    BIDIRECTIONAL = 2u,
    CREATED = 0u,
    GENERATED = 1u,
  };


  typedef boost::shared_ptr< ::graph_msgs::Edge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::Edge_<ContainerAllocator> const> ConstPtr;

}; // struct Edge_

typedef ::graph_msgs::Edge_<std::allocator<void> > Edge;

typedef boost::shared_ptr< ::graph_msgs::Edge > EdgePtr;
typedef boost::shared_ptr< ::graph_msgs::Edge const> EdgeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::Edge_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::Edge_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::Edge_<ContainerAllocator1> & lhs, const ::graph_msgs::Edge_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.alias == rhs.alias &&
    lhs.type == rhs.type &&
    lhs.edge_direction_type == rhs.edge_direction_type &&
    lhs.creation_type == rhs.creation_type &&
    lhs.source_vertex_id == rhs.source_vertex_id &&
    lhs.target_vertex_id == rhs.target_vertex_id &&
    lhs.length == rhs.length &&
    lhs.cost_factor == rhs.cost_factor &&
    lhs.bidirectional == rhs.bidirectional &&
    lhs.independent_orientation == rhs.independent_orientation &&
    lhs.control_points == rhs.control_points &&
    lhs.control_orientation == rhs.control_orientation &&
    lhs.poses == rhs.poses &&
    lhs.properties == rhs.properties;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::Edge_<ContainerAllocator1> & lhs, const ::graph_msgs::Edge_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::Edge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::Edge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::Edge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::Edge_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::Edge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::Edge_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::Edge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7db65fe0ed203a54cf7e26bd678adbcf";
  }

  static const char* value(const ::graph_msgs::Edge_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7db65fe0ed203a54ULL;
  static const uint64_t static_value2 = 0xcf7e26bd678adbcfULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::Edge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/Edge";
  }

  static const char* value(const ::graph_msgs::Edge_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::Edge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Edge types\n"
"uint8 STRAIGHT_LINE=0\n"
"uint8 CUBIC_BEZIER=1\n"
"\n"
"# Edge direction types\n"
"uint8 FORWARD=0\n"
"uint8 REVERSE=1\n"
"uint8 BIDIRECTIONAL=2\n"
"\n"
"# Creation types \n"
"uint8 CREATED=0     # The edge is created\n"
"uint8 GENERATED=1   # The edge is generated\n"
"\n"
"string name\n"
"string alias\n"
"uint8 type\n"
"uint8 edge_direction_type\n"
"uint8 creation_type         #FIXME: This creation type is not required. The graph data structure should be able to handle both\n"
"uint32 source_vertex_id\n"
"uint32 target_vertex_id\n"
"float64 length\n"
"float64 cost_factor         # A factor by which the traversal cost is multiplied. In this case the length of the edge\n"
"bool bidirectional\n"
"bool independent_orientation\n"
"geometry_msgs/Pose[] control_points\n"
"geometry_msgs/Pose control_orientation\n"
"geometry_msgs/PoseArray poses   # Can contain the poses for the curve\n"
"Property[] properties\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: graph_msgs/Property\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::graph_msgs::Edge_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::Edge_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.alias);
      stream.next(m.type);
      stream.next(m.edge_direction_type);
      stream.next(m.creation_type);
      stream.next(m.source_vertex_id);
      stream.next(m.target_vertex_id);
      stream.next(m.length);
      stream.next(m.cost_factor);
      stream.next(m.bidirectional);
      stream.next(m.independent_orientation);
      stream.next(m.control_points);
      stream.next(m.control_orientation);
      stream.next(m.poses);
      stream.next(m.properties);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Edge_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::Edge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::Edge_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "alias: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.alias);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "edge_direction_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.edge_direction_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "creation_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.creation_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "source_vertex_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.source_vertex_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_vertex_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.target_vertex_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cost_factor: ";
    Printer<double>::stream(s, indent + "  ", v.cost_factor);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bidirectional: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bidirectional);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "independent_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.independent_orientation);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "control_points: ";
    if (v.control_points.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.control_points.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.control_points[i]);
    }
    if (v.control_points.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "control_orientation: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.control_orientation);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "poses: ";
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.poses);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "properties: ";
    if (v.properties.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::graph_msgs::Property_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.properties[i]);
    }
    if (v.properties.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_EDGE_H
