// Generated by gencpp from file graph_msgs/GetGraphPlanResponse.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_GETGRAPHPLANRESPONSE_H
#define GRAPH_MSGS_MESSAGE_GETGRAPHPLANRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_msgs/Vertex.h>
#include <nav_msgs/Path.h>

namespace graph_msgs
{
template <class ContainerAllocator>
struct GetGraphPlanResponse_
{
  typedef GetGraphPlanResponse_<ContainerAllocator> Type;

  GetGraphPlanResponse_()
    : vertices_in_plan()
    , plan()
    , plan_distance(0.0)
    , success(false)
    , message()  {
    }
  GetGraphPlanResponse_(const ContainerAllocator& _alloc)
    : vertices_in_plan(_alloc)
    , plan(_alloc)
    , plan_distance(0.0)
    , success(false)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::graph_msgs::Vertex_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::graph_msgs::Vertex_<ContainerAllocator> >> _vertices_in_plan_type;
  _vertices_in_plan_type vertices_in_plan;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _plan_type;
  _plan_type plan;

   typedef double _plan_distance_type;
  _plan_distance_type plan_distance;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGraphPlanResponse_

typedef ::graph_msgs::GetGraphPlanResponse_<std::allocator<void> > GetGraphPlanResponse;

typedef boost::shared_ptr< ::graph_msgs::GetGraphPlanResponse > GetGraphPlanResponsePtr;
typedef boost::shared_ptr< ::graph_msgs::GetGraphPlanResponse const> GetGraphPlanResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator1> & lhs, const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator2> & rhs)
{
  return lhs.vertices_in_plan == rhs.vertices_in_plan &&
    lhs.plan == rhs.plan &&
    lhs.plan_distance == rhs.plan_distance &&
    lhs.success == rhs.success &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator1> & lhs, const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3bb8666953be009bc8cc16cf326d151";
  }

  static const char* value(const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3bb8666953be009ULL;
  static const uint64_t static_value2 = 0xbc8cc16cf326d151ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/GetGraphPlanResponse";
  }

  static const char* value(const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vertex[] vertices_in_plan       # The vertices that are part of the plan\n"
"nav_msgs/Path plan              # The plan from the pre-defined graph curves\n"
"float64 plan_distance           # Total plan distance\n"
"\n"
"bool success                    # Whether planning was success\n"
"string message                  # Messages related to planning\n"
"\n"
"================================================================================\n"
"MSG: graph_msgs/Vertex\n"
"# Vertex types\n"
"uint8 NORMAL=0\n"
"uint8 PARK=1\n"
"uint8 CHARGE=2\n"
"uint8 CONTROL=3\n"
"uint8 REPORT=4\n"
"\n"
"uint32 id\n"
"string name\n"
"string alias\n"
"uint8 type\n"
"bool ignore_orientation\n"
"geometry_msgs/Pose pose\n"
"Property[] properties\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: graph_msgs/Property\n"
"string key\n"
"string value\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
;
  }

  static const char* value(const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vertices_in_plan);
      stream.next(m.plan);
      stream.next(m.plan_distance);
      stream.next(m.success);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGraphPlanResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::GetGraphPlanResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "vertices_in_plan: ";
    if (v.vertices_in_plan.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.vertices_in_plan.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::graph_msgs::Vertex_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.vertices_in_plan[i]);
    }
    if (v.vertices_in_plan.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "plan: ";
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.plan);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "plan_distance: ";
    Printer<double>::stream(s, indent + "  ", v.plan_distance);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_GETGRAPHPLANRESPONSE_H
