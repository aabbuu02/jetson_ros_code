// Generated by gencpp from file graph_msgs/LoadGraphRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_LOADGRAPHREQUEST_H
#define GRAPH_MSGS_MESSAGE_LOADGRAPHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graph_msgs
{
template <class ContainerAllocator>
struct LoadGraphRequest_
{
  typedef LoadGraphRequest_<ContainerAllocator> Type;

  LoadGraphRequest_()
    : graph_url()  {
    }
  LoadGraphRequest_(const ContainerAllocator& _alloc)
    : graph_url(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _graph_url_type;
  _graph_url_type graph_url;





  typedef boost::shared_ptr< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LoadGraphRequest_

typedef ::graph_msgs::LoadGraphRequest_<std::allocator<void> > LoadGraphRequest;

typedef boost::shared_ptr< ::graph_msgs::LoadGraphRequest > LoadGraphRequestPtr;
typedef boost::shared_ptr< ::graph_msgs::LoadGraphRequest const> LoadGraphRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::LoadGraphRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::LoadGraphRequest_<ContainerAllocator1> & lhs, const ::graph_msgs::LoadGraphRequest_<ContainerAllocator2> & rhs)
{
  return lhs.graph_url == rhs.graph_url;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::LoadGraphRequest_<ContainerAllocator1> & lhs, const ::graph_msgs::LoadGraphRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7750059a3359024bd94263cfa4c0b722";
  }

  static const char* value(const ::graph_msgs::LoadGraphRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7750059a3359024bULL;
  static const uint64_t static_value2 = 0xd94263cfa4c0b722ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/LoadGraphRequest";
  }

  static const char* value(const ::graph_msgs::LoadGraphRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Either use absolute path to the graph file like /path/to/graph.graphml or\n"
"# use a relative path to a package. For example, package_name/graphs/graph.graphml.\n"
"# In case of graph file being relative to a package, use of '/' is not required.\n"
"string graph_url    # URL of graph resource\n"
;
  }

  static const char* value(const ::graph_msgs::LoadGraphRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graph_url);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoadGraphRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::LoadGraphRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::LoadGraphRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "graph_url: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.graph_url);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_LOADGRAPHREQUEST_H
