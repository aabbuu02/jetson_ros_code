// Generated by gencpp from file graph_msgs/Graph.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_GRAPH_H
#define GRAPH_MSGS_MESSAGE_GRAPH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <graph_msgs/GraphMetaData.h>
#include <graph_msgs/Vertex.h>
#include <graph_msgs/Edge.h>
#include <graph_msgs/Property.h>

namespace graph_msgs
{
template <class ContainerAllocator>
struct Graph_
{
  typedef Graph_<ContainerAllocator> Type;

  Graph_()
    : header()
    , meta_data()
    , vertices()
    , edges()
    , properties()  {
    }
  Graph_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , meta_data(_alloc)
    , vertices(_alloc)
    , edges(_alloc)
    , properties(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::graph_msgs::GraphMetaData_<ContainerAllocator>  _meta_data_type;
  _meta_data_type meta_data;

   typedef std::vector< ::graph_msgs::Vertex_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::graph_msgs::Vertex_<ContainerAllocator> >> _vertices_type;
  _vertices_type vertices;

   typedef std::vector< ::graph_msgs::Edge_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::graph_msgs::Edge_<ContainerAllocator> >> _edges_type;
  _edges_type edges;

   typedef std::vector< ::graph_msgs::Property_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::graph_msgs::Property_<ContainerAllocator> >> _properties_type;
  _properties_type properties;





  typedef boost::shared_ptr< ::graph_msgs::Graph_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::Graph_<ContainerAllocator> const> ConstPtr;

}; // struct Graph_

typedef ::graph_msgs::Graph_<std::allocator<void> > Graph;

typedef boost::shared_ptr< ::graph_msgs::Graph > GraphPtr;
typedef boost::shared_ptr< ::graph_msgs::Graph const> GraphConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::Graph_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::Graph_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::Graph_<ContainerAllocator1> & lhs, const ::graph_msgs::Graph_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.meta_data == rhs.meta_data &&
    lhs.vertices == rhs.vertices &&
    lhs.edges == rhs.edges &&
    lhs.properties == rhs.properties;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::Graph_<ContainerAllocator1> & lhs, const ::graph_msgs::Graph_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::Graph_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::Graph_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::Graph_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::Graph_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::Graph_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::Graph_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0310af2f1693ece9ce205cea29e160ca";
  }

  static const char* value(const ::graph_msgs::Graph_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0310af2f1693ece9ULL;
  static const uint64_t static_value2 = 0xce205cea29e160caULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/Graph";
  }

  static const char* value(const ::graph_msgs::Graph_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"GraphMetaData meta_data\n"
"Vertex[] vertices       # List of vertices\n"
"Edge[] edges            # List of edges\n"
"Property[] properties \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: graph_msgs/GraphMetaData\n"
"uint8 DIRECTED=0\n"
"uint8 UNDIRECTED=1\n"
"\n"
"std_msgs/Header header\n"
"string graph_name\n"
"uint8 graph_type\n"
"uint32 number_of_vertices\n"
"uint32 number_of_edges\n"
"================================================================================\n"
"MSG: graph_msgs/Vertex\n"
"# Vertex types\n"
"uint8 NORMAL=0\n"
"uint8 PARK=1\n"
"uint8 CHARGE=2\n"
"uint8 CONTROL=3\n"
"uint8 REPORT=4\n"
"\n"
"uint32 id\n"
"string name\n"
"string alias\n"
"uint8 type\n"
"bool ignore_orientation\n"
"geometry_msgs/Pose pose\n"
"Property[] properties\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: graph_msgs/Property\n"
"string key\n"
"string value\n"
"================================================================================\n"
"MSG: graph_msgs/Edge\n"
"# Edge types\n"
"uint8 STRAIGHT_LINE=0\n"
"uint8 CUBIC_BEZIER=1\n"
"\n"
"# Edge direction types\n"
"uint8 FORWARD=0\n"
"uint8 REVERSE=1\n"
"uint8 BIDIRECTIONAL=2\n"
"\n"
"# Creation types \n"
"uint8 CREATED=0     # The edge is created\n"
"uint8 GENERATED=1   # The edge is generated\n"
"\n"
"string name\n"
"string alias\n"
"uint8 type\n"
"uint8 edge_direction_type\n"
"uint8 creation_type         #FIXME: This creation type is not required. The graph data structure should be able to handle both\n"
"uint32 source_vertex_id\n"
"uint32 target_vertex_id\n"
"float64 length\n"
"float64 cost_factor         # A factor by which the traversal cost is multiplied. In this case the length of the edge\n"
"bool bidirectional\n"
"bool independent_orientation\n"
"geometry_msgs/Pose[] control_points\n"
"geometry_msgs/Pose control_orientation\n"
"geometry_msgs/PoseArray poses   # Can contain the poses for the curve\n"
"Property[] properties\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
;
  }

  static const char* value(const ::graph_msgs::Graph_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::Graph_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.meta_data);
      stream.next(m.vertices);
      stream.next(m.edges);
      stream.next(m.properties);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Graph_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::Graph_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::Graph_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "meta_data: ";
    Printer< ::graph_msgs::GraphMetaData_<ContainerAllocator> >::stream(s, indent + "  ", v.meta_data);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vertices: ";
    if (v.vertices.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::graph_msgs::Vertex_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.vertices[i]);
    }
    if (v.vertices.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "edges: ";
    if (v.edges.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.edges.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::graph_msgs::Edge_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.edges[i]);
    }
    if (v.edges.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "properties: ";
    if (v.properties.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::graph_msgs::Property_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.properties[i]);
    }
    if (v.properties.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_GRAPH_H
