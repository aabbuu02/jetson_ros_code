// Generated by gencpp from file graph_msgs/Vertex.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_VERTEX_H
#define GRAPH_MSGS_MESSAGE_VERTEX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <graph_msgs/Property.h>

namespace graph_msgs
{
template <class ContainerAllocator>
struct Vertex_
{
  typedef Vertex_<ContainerAllocator> Type;

  Vertex_()
    : id(0)
    , name()
    , alias()
    , type(0)
    , ignore_orientation(false)
    , pose()
    , properties()  {
    }
  Vertex_(const ContainerAllocator& _alloc)
    : id(0)
    , name(_alloc)
    , alias(_alloc)
    , type(0)
    , ignore_orientation(false)
    , pose(_alloc)
    , properties(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _alias_type;
  _alias_type alias;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _ignore_orientation_type;
  _ignore_orientation_type ignore_orientation;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::vector< ::graph_msgs::Property_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::graph_msgs::Property_<ContainerAllocator> >> _properties_type;
  _properties_type properties;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(PARK)
  #undef PARK
#endif
#if defined(_WIN32) && defined(CHARGE)
  #undef CHARGE
#endif
#if defined(_WIN32) && defined(CONTROL)
  #undef CONTROL
#endif
#if defined(_WIN32) && defined(REPORT)
  #undef REPORT
#endif

  enum {
    NORMAL = 0u,
    PARK = 1u,
    CHARGE = 2u,
    CONTROL = 3u,
    REPORT = 4u,
  };


  typedef boost::shared_ptr< ::graph_msgs::Vertex_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::Vertex_<ContainerAllocator> const> ConstPtr;

}; // struct Vertex_

typedef ::graph_msgs::Vertex_<std::allocator<void> > Vertex;

typedef boost::shared_ptr< ::graph_msgs::Vertex > VertexPtr;
typedef boost::shared_ptr< ::graph_msgs::Vertex const> VertexConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::Vertex_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::Vertex_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::Vertex_<ContainerAllocator1> & lhs, const ::graph_msgs::Vertex_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.alias == rhs.alias &&
    lhs.type == rhs.type &&
    lhs.ignore_orientation == rhs.ignore_orientation &&
    lhs.pose == rhs.pose &&
    lhs.properties == rhs.properties;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::Vertex_<ContainerAllocator1> & lhs, const ::graph_msgs::Vertex_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::Vertex_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::Vertex_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::Vertex_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::Vertex_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::Vertex_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::Vertex_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::Vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da5a52518e6851fa3171e3b059d26164";
  }

  static const char* value(const ::graph_msgs::Vertex_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda5a52518e6851faULL;
  static const uint64_t static_value2 = 0x3171e3b059d26164ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::Vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/Vertex";
  }

  static const char* value(const ::graph_msgs::Vertex_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::Vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Vertex types\n"
"uint8 NORMAL=0\n"
"uint8 PARK=1\n"
"uint8 CHARGE=2\n"
"uint8 CONTROL=3\n"
"uint8 REPORT=4\n"
"\n"
"uint32 id\n"
"string name\n"
"string alias\n"
"uint8 type\n"
"bool ignore_orientation\n"
"geometry_msgs/Pose pose\n"
"Property[] properties\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: graph_msgs/Property\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::graph_msgs::Vertex_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::Vertex_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.alias);
      stream.next(m.type);
      stream.next(m.ignore_orientation);
      stream.next(m.pose);
      stream.next(m.properties);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vertex_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::Vertex_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::Vertex_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "alias: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.alias);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ignore_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_orientation);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pose: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "properties: ";
    if (v.properties.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::graph_msgs::Property_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.properties[i]);
    }
    if (v.properties.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_VERTEX_H
