// Generated by gencpp from file graph_msgs/GraphMetaData.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_GRAPHMETADATA_H
#define GRAPH_MSGS_MESSAGE_GRAPHMETADATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace graph_msgs
{
template <class ContainerAllocator>
struct GraphMetaData_
{
  typedef GraphMetaData_<ContainerAllocator> Type;

  GraphMetaData_()
    : header()
    , graph_name()
    , graph_type(0)
    , number_of_vertices(0)
    , number_of_edges(0)  {
    }
  GraphMetaData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , graph_name(_alloc)
    , graph_type(0)
    , number_of_vertices(0)
    , number_of_edges(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _graph_name_type;
  _graph_name_type graph_name;

   typedef uint8_t _graph_type_type;
  _graph_type_type graph_type;

   typedef uint32_t _number_of_vertices_type;
  _number_of_vertices_type number_of_vertices;

   typedef uint32_t _number_of_edges_type;
  _number_of_edges_type number_of_edges;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DIRECTED)
  #undef DIRECTED
#endif
#if defined(_WIN32) && defined(UNDIRECTED)
  #undef UNDIRECTED
#endif

  enum {
    DIRECTED = 0u,
    UNDIRECTED = 1u,
  };


  typedef boost::shared_ptr< ::graph_msgs::GraphMetaData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::GraphMetaData_<ContainerAllocator> const> ConstPtr;

}; // struct GraphMetaData_

typedef ::graph_msgs::GraphMetaData_<std::allocator<void> > GraphMetaData;

typedef boost::shared_ptr< ::graph_msgs::GraphMetaData > GraphMetaDataPtr;
typedef boost::shared_ptr< ::graph_msgs::GraphMetaData const> GraphMetaDataConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::GraphMetaData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::GraphMetaData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::GraphMetaData_<ContainerAllocator1> & lhs, const ::graph_msgs::GraphMetaData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.graph_name == rhs.graph_name &&
    lhs.graph_type == rhs.graph_type &&
    lhs.number_of_vertices == rhs.number_of_vertices &&
    lhs.number_of_edges == rhs.number_of_edges;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::GraphMetaData_<ContainerAllocator1> & lhs, const ::graph_msgs::GraphMetaData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::GraphMetaData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::GraphMetaData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::GraphMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::GraphMetaData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::GraphMetaData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::GraphMetaData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::GraphMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0d170d3d53451a272b88e7364b594fa";
  }

  static const char* value(const ::graph_msgs::GraphMetaData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0d170d3d53451a2ULL;
  static const uint64_t static_value2 = 0x72b88e7364b594faULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::GraphMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/GraphMetaData";
  }

  static const char* value(const ::graph_msgs::GraphMetaData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::GraphMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 DIRECTED=0\n"
"uint8 UNDIRECTED=1\n"
"\n"
"std_msgs/Header header\n"
"string graph_name\n"
"uint8 graph_type\n"
"uint32 number_of_vertices\n"
"uint32 number_of_edges\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::graph_msgs::GraphMetaData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::GraphMetaData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.graph_name);
      stream.next(m.graph_type);
      stream.next(m.number_of_vertices);
      stream.next(m.number_of_edges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraphMetaData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::GraphMetaData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::GraphMetaData_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "graph_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.graph_name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "graph_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.graph_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "number_of_vertices: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number_of_vertices);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "number_of_edges: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number_of_edges);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_GRAPHMETADATA_H
