// Generated by gencpp from file graph_msgs/SaveGraphRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_SAVEGRAPHREQUEST_H
#define GRAPH_MSGS_MESSAGE_SAVEGRAPHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graph_msgs
{
template <class ContainerAllocator>
struct SaveGraphRequest_
{
  typedef SaveGraphRequest_<ContainerAllocator> Type;

  SaveGraphRequest_()
    : graph_file_name()
    , save_graph_url()  {
    }
  SaveGraphRequest_(const ContainerAllocator& _alloc)
    : graph_file_name(_alloc)
    , save_graph_url(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _graph_file_name_type;
  _graph_file_name_type graph_file_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _save_graph_url_type;
  _save_graph_url_type save_graph_url;





  typedef boost::shared_ptr< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveGraphRequest_

typedef ::graph_msgs::SaveGraphRequest_<std::allocator<void> > SaveGraphRequest;

typedef boost::shared_ptr< ::graph_msgs::SaveGraphRequest > SaveGraphRequestPtr;
typedef boost::shared_ptr< ::graph_msgs::SaveGraphRequest const> SaveGraphRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::SaveGraphRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::SaveGraphRequest_<ContainerAllocator1> & lhs, const ::graph_msgs::SaveGraphRequest_<ContainerAllocator2> & rhs)
{
  return lhs.graph_file_name == rhs.graph_file_name &&
    lhs.save_graph_url == rhs.save_graph_url;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::SaveGraphRequest_<ContainerAllocator1> & lhs, const ::graph_msgs::SaveGraphRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd7a82666ae251d98fe8ab14eece8e36";
  }

  static const char* value(const ::graph_msgs::SaveGraphRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd7a82666ae251d9ULL;
  static const uint64_t static_value2 = 0x8fe8ab14eece8e36ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/SaveGraphRequest";
  }

  static const char* value(const ::graph_msgs::SaveGraphRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Either use absolute path to save the graph file like /path/to/save/ or\n"
"# use a relative path to a package. For example, package_name/graphs/.\n"
"# In case of graph file save being relative to a package, use of '/' is not required.\n"
"# The graph name is used to create the filename, for example, graph_file_name.graphml.\n"
"# Finally, the graph will be save at save_graph_url/graph_file_name.graphml. \n"
"string graph_file_name\n"
"string save_graph_url\n"
;
  }

  static const char* value(const ::graph_msgs::SaveGraphRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graph_file_name);
      stream.next(m.save_graph_url);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveGraphRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::SaveGraphRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::SaveGraphRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "graph_file_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.graph_file_name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "save_graph_url: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.save_graph_url);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_SAVEGRAPHREQUEST_H
