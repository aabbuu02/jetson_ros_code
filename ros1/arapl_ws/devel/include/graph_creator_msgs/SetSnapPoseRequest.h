// Generated by gencpp from file graph_creator_msgs/SetSnapPoseRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_SETSNAPPOSEREQUEST_H
#define GRAPH_CREATOR_MSGS_MESSAGE_SETSNAPPOSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_creator_msgs/SnapPoseConfig.h>

namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct SetSnapPoseRequest_
{
  typedef SetSnapPoseRequest_<ContainerAllocator> Type;

  SetSnapPoseRequest_()
    : snap_pose_config()  {
    }
  SetSnapPoseRequest_(const ContainerAllocator& _alloc)
    : snap_pose_config(_alloc)  {
  (void)_alloc;
    }



   typedef  ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator>  _snap_pose_config_type;
  _snap_pose_config_type snap_pose_config;





  typedef boost::shared_ptr< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetSnapPoseRequest_

typedef ::graph_creator_msgs::SetSnapPoseRequest_<std::allocator<void> > SetSnapPoseRequest;

typedef boost::shared_ptr< ::graph_creator_msgs::SetSnapPoseRequest > SetSnapPoseRequestPtr;
typedef boost::shared_ptr< ::graph_creator_msgs::SetSnapPoseRequest const> SetSnapPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.snap_pose_config == rhs.snap_pose_config;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "453475facd73f8aa03dab123037803ff";
  }

  static const char* value(const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x453475facd73f8aaULL;
  static const uint64_t static_value2 = 0x03dab123037803ffULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/SetSnapPoseRequest";
  }

  static const char* value(const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/SnapPoseConfig snap_pose_config\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/SnapPoseConfig\n"
"bool enable_for_vertices            # Enable snap position and orientation for vertices\n"
"bool enable_for_edges               # Enable snap position and orientation for edge elements\n"
"\n"
"bool enable_position_snap           # Whether to enable position snap\n"
"bool enable_orientation_snap        # Whether to enable orientation snap\n"
"\n"
"float64 position_snap_grid_size     # Position snap grid size in meters\n"
"float64 orientation_snap_angle      # Orientation snap angle in radians \n"
;
  }

  static const char* value(const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.snap_pose_config);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSnapPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::SetSnapPoseRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "snap_pose_config: ";
    Printer< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >::stream(s, indent + "  ", v.snap_pose_config);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_SETSNAPPOSEREQUEST_H
