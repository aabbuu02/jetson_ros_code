// Generated by gencpp from file graph_creator_msgs/SetGraphCreatorModeRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_SETGRAPHCREATORMODEREQUEST_H
#define GRAPH_CREATOR_MSGS_MESSAGE_SETGRAPHCREATORMODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_creator_msgs/GraphCreatorMode.h>

namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct SetGraphCreatorModeRequest_
{
  typedef SetGraphCreatorModeRequest_<ContainerAllocator> Type;

  SetGraphCreatorModeRequest_()
    : mode()  {
    }
  SetGraphCreatorModeRequest_(const ContainerAllocator& _alloc)
    : mode(_alloc)  {
  (void)_alloc;
    }



   typedef  ::graph_creator_msgs::GraphCreatorMode_<ContainerAllocator>  _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetGraphCreatorModeRequest_

typedef ::graph_creator_msgs::SetGraphCreatorModeRequest_<std::allocator<void> > SetGraphCreatorModeRequest;

typedef boost::shared_ptr< ::graph_creator_msgs::SetGraphCreatorModeRequest > SetGraphCreatorModeRequestPtr;
typedef boost::shared_ptr< ::graph_creator_msgs::SetGraphCreatorModeRequest const> SetGraphCreatorModeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0c90a1cad92ff24686e84a22cbe9a49";
  }

  static const char* value(const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0c90a1cad92ff24ULL;
  static const uint64_t static_value2 = 0x686e84a22cbe9a49ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/SetGraphCreatorModeRequest";
  }

  static const char* value(const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/GraphCreatorMode mode\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/GraphCreatorMode\n"
"uint8 GRAPH_CREATOR_MODE_CREATE_VERTICES=0\n"
"uint8 GRAPH_CREATOR_MODE_CREATE_EDGES=1\n"
"\n"
"uint8 mode\n"
;
  }

  static const char* value(const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetGraphCreatorModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::SetGraphCreatorModeRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    Printer< ::graph_creator_msgs::GraphCreatorMode_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_SETGRAPHCREATORMODEREQUEST_H
