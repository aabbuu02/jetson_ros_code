// Generated by gencpp from file graph_creator_msgs/GenerateGraphRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_GENERATEGRAPHREQUEST_H
#define GRAPH_CREATOR_MSGS_MESSAGE_GENERATEGRAPHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_creator_msgs/GraphGeneratorConfig.h>

namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct GenerateGraphRequest_
{
  typedef GenerateGraphRequest_<ContainerAllocator> Type;

  GenerateGraphRequest_()
    : graph_generator_config()  {
    }
  GenerateGraphRequest_(const ContainerAllocator& _alloc)
    : graph_generator_config(_alloc)  {
  (void)_alloc;
    }



   typedef  ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator>  _graph_generator_config_type;
  _graph_generator_config_type graph_generator_config;





  typedef boost::shared_ptr< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenerateGraphRequest_

typedef ::graph_creator_msgs::GenerateGraphRequest_<std::allocator<void> > GenerateGraphRequest;

typedef boost::shared_ptr< ::graph_creator_msgs::GenerateGraphRequest > GenerateGraphRequestPtr;
typedef boost::shared_ptr< ::graph_creator_msgs::GenerateGraphRequest const> GenerateGraphRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator2> & rhs)
{
  return lhs.graph_generator_config == rhs.graph_generator_config;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "536767deea0d0151bb7f511a9b5ef5d6";
  }

  static const char* value(const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x536767deea0d0151ULL;
  static const uint64_t static_value2 = 0xbb7f511a9b5ef5d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/GenerateGraphRequest";
  }

  static const char* value(const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GraphGeneratorConfig graph_generator_config\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/GraphGeneratorConfig\n"
"uint8 GRAPH_GENERATION_TYPE_GRID=0\n"
"uint8 GRAPH_GENERATION_TYPE_DXF=1\n"
"\n"
"uint8 generation_type\n"
"EdgeCreationType edge_creation_type\n"
"EdgeDirectionCreationType edge_direction_type\n"
"bool ignore_vertex_orientation                      # Ignore vertex orientation\n"
"bool use_edge_count_threshold                       # Use edge count threshold to ignore orientation\n"
"uint32 edge_count_threshold                         # Edge count threshold\n"
"\n"
"# For generating graph from DXF files\n"
"string dxf_file_path                                # File paths can be either relative to a package or absolute\n"
"float32 scale_x\n"
"float32 scale_y\n"
"\n"
"# For generating grid graphs\n"
"geometry_msgs/Pose start_pose\n"
"uint32 rows                                         # Rows are along Y-axis\n"
"uint32 columns                                      # Columns are along X-axis\n"
"float32 row_spacing                                 # Spacing between two vertices along the Y-axis\n"
"float32 column_spacing                              # Spacing between two vertics along the X-axis\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeCreationType\n"
"uint8 EDGE_CREATION_TYPE_STRAIGHT_LINE=0\n"
"uint8 EDGE_CREATION_TYPE_CUBIC_BEZIER=1\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeDirectionCreationType\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2\n"
"\n"
"uint8 direction_type\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graph_generator_config);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenerateGraphRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::GenerateGraphRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "graph_generator_config: ";
    Printer< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >::stream(s, indent + "  ", v.graph_generator_config);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_GENERATEGRAPHREQUEST_H
