// Generated by gencpp from file graph_creator_msgs/SnapPoseConfig.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_SNAPPOSECONFIG_H
#define GRAPH_CREATOR_MSGS_MESSAGE_SNAPPOSECONFIG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct SnapPoseConfig_
{
  typedef SnapPoseConfig_<ContainerAllocator> Type;

  SnapPoseConfig_()
    : enable_for_vertices(false)
    , enable_for_edges(false)
    , enable_position_snap(false)
    , enable_orientation_snap(false)
    , position_snap_grid_size(0.0)
    , orientation_snap_angle(0.0)  {
    }
  SnapPoseConfig_(const ContainerAllocator& _alloc)
    : enable_for_vertices(false)
    , enable_for_edges(false)
    , enable_position_snap(false)
    , enable_orientation_snap(false)
    , position_snap_grid_size(0.0)
    , orientation_snap_angle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_for_vertices_type;
  _enable_for_vertices_type enable_for_vertices;

   typedef uint8_t _enable_for_edges_type;
  _enable_for_edges_type enable_for_edges;

   typedef uint8_t _enable_position_snap_type;
  _enable_position_snap_type enable_position_snap;

   typedef uint8_t _enable_orientation_snap_type;
  _enable_orientation_snap_type enable_orientation_snap;

   typedef double _position_snap_grid_size_type;
  _position_snap_grid_size_type position_snap_grid_size;

   typedef double _orientation_snap_angle_type;
  _orientation_snap_angle_type orientation_snap_angle;





  typedef boost::shared_ptr< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> const> ConstPtr;

}; // struct SnapPoseConfig_

typedef ::graph_creator_msgs::SnapPoseConfig_<std::allocator<void> > SnapPoseConfig;

typedef boost::shared_ptr< ::graph_creator_msgs::SnapPoseConfig > SnapPoseConfigPtr;
typedef boost::shared_ptr< ::graph_creator_msgs::SnapPoseConfig const> SnapPoseConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator2> & rhs)
{
  return lhs.enable_for_vertices == rhs.enable_for_vertices &&
    lhs.enable_for_edges == rhs.enable_for_edges &&
    lhs.enable_position_snap == rhs.enable_position_snap &&
    lhs.enable_orientation_snap == rhs.enable_orientation_snap &&
    lhs.position_snap_grid_size == rhs.position_snap_grid_size &&
    lhs.orientation_snap_angle == rhs.orientation_snap_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "523ee3105beaf49ae3b84f7e22ff96ed";
  }

  static const char* value(const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x523ee3105beaf49aULL;
  static const uint64_t static_value2 = 0xe3b84f7e22ff96edULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/SnapPoseConfig";
  }

  static const char* value(const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable_for_vertices            # Enable snap position and orientation for vertices\n"
"bool enable_for_edges               # Enable snap position and orientation for edge elements\n"
"\n"
"bool enable_position_snap           # Whether to enable position snap\n"
"bool enable_orientation_snap        # Whether to enable orientation snap\n"
"\n"
"float64 position_snap_grid_size     # Position snap grid size in meters\n"
"float64 orientation_snap_angle      # Orientation snap angle in radians \n"
;
  }

  static const char* value(const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_for_vertices);
      stream.next(m.enable_for_edges);
      stream.next(m.enable_position_snap);
      stream.next(m.enable_orientation_snap);
      stream.next(m.position_snap_grid_size);
      stream.next(m.orientation_snap_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SnapPoseConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "enable_for_vertices: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_for_vertices);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "enable_for_edges: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_for_edges);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "enable_position_snap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_position_snap);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "enable_orientation_snap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_orientation_snap);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "position_snap_grid_size: ";
    Printer<double>::stream(s, indent + "  ", v.position_snap_grid_size);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "orientation_snap_angle: ";
    Printer<double>::stream(s, indent + "  ", v.orientation_snap_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_SNAPPOSECONFIG_H
