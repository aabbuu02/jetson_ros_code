// Generated by gencpp from file graph_creator_msgs/GraphCreatorState.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_GRAPHCREATORSTATE_H
#define GRAPH_CREATOR_MSGS_MESSAGE_GRAPHCREATORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_creator_msgs/GraphCreatorMode.h>
#include <graph_creator_msgs/EdgeCreationType.h>
#include <graph_creator_msgs/EdgeDirectionCreationType.h>
#include <graph_creator_msgs/SnapPoseConfig.h>

namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct GraphCreatorState_
{
  typedef GraphCreatorState_<ContainerAllocator> Type;

  GraphCreatorState_()
    : graph_creator_mode()
    , edge_creation_type()
    , edge_direction_creation_type()
    , snap_pose_config()
    , all_vertices_locked(false)
    , all_edges_locked(false)  {
    }
  GraphCreatorState_(const ContainerAllocator& _alloc)
    : graph_creator_mode(_alloc)
    , edge_creation_type(_alloc)
    , edge_direction_creation_type(_alloc)
    , snap_pose_config(_alloc)
    , all_vertices_locked(false)
    , all_edges_locked(false)  {
  (void)_alloc;
    }



   typedef  ::graph_creator_msgs::GraphCreatorMode_<ContainerAllocator>  _graph_creator_mode_type;
  _graph_creator_mode_type graph_creator_mode;

   typedef  ::graph_creator_msgs::EdgeCreationType_<ContainerAllocator>  _edge_creation_type_type;
  _edge_creation_type_type edge_creation_type;

   typedef  ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator>  _edge_direction_creation_type_type;
  _edge_direction_creation_type_type edge_direction_creation_type;

   typedef  ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator>  _snap_pose_config_type;
  _snap_pose_config_type snap_pose_config;

   typedef uint8_t _all_vertices_locked_type;
  _all_vertices_locked_type all_vertices_locked;

   typedef uint8_t _all_edges_locked_type;
  _all_edges_locked_type all_edges_locked;





  typedef boost::shared_ptr< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> const> ConstPtr;

}; // struct GraphCreatorState_

typedef ::graph_creator_msgs::GraphCreatorState_<std::allocator<void> > GraphCreatorState;

typedef boost::shared_ptr< ::graph_creator_msgs::GraphCreatorState > GraphCreatorStatePtr;
typedef boost::shared_ptr< ::graph_creator_msgs::GraphCreatorState const> GraphCreatorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator2> & rhs)
{
  return lhs.graph_creator_mode == rhs.graph_creator_mode &&
    lhs.edge_creation_type == rhs.edge_creation_type &&
    lhs.edge_direction_creation_type == rhs.edge_direction_creation_type &&
    lhs.snap_pose_config == rhs.snap_pose_config &&
    lhs.all_vertices_locked == rhs.all_vertices_locked &&
    lhs.all_edges_locked == rhs.all_edges_locked;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "883f7fb23a6fd8276cdc11e15bd98652";
  }

  static const char* value(const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x883f7fb23a6fd827ULL;
  static const uint64_t static_value2 = 0x6cdc11e15bd98652ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/GraphCreatorState";
  }

  static const char* value(const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/GraphCreatorMode graph_creator_mode\n"
"graph_creator_msgs/EdgeCreationType edge_creation_type\n"
"graph_creator_msgs/EdgeDirectionCreationType edge_direction_creation_type\n"
"graph_creator_msgs/SnapPoseConfig snap_pose_config\n"
"bool all_vertices_locked\n"
"bool all_edges_locked\n"
"================================================================================\n"
"MSG: graph_creator_msgs/GraphCreatorMode\n"
"uint8 GRAPH_CREATOR_MODE_CREATE_VERTICES=0\n"
"uint8 GRAPH_CREATOR_MODE_CREATE_EDGES=1\n"
"\n"
"uint8 mode\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeCreationType\n"
"uint8 EDGE_CREATION_TYPE_STRAIGHT_LINE=0\n"
"uint8 EDGE_CREATION_TYPE_CUBIC_BEZIER=1\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeDirectionCreationType\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2\n"
"\n"
"uint8 direction_type\n"
"\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/SnapPoseConfig\n"
"bool enable_for_vertices            # Enable snap position and orientation for vertices\n"
"bool enable_for_edges               # Enable snap position and orientation for edge elements\n"
"\n"
"bool enable_position_snap           # Whether to enable position snap\n"
"bool enable_orientation_snap        # Whether to enable orientation snap\n"
"\n"
"float64 position_snap_grid_size     # Position snap grid size in meters\n"
"float64 orientation_snap_angle      # Orientation snap angle in radians \n"
;
  }

  static const char* value(const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graph_creator_mode);
      stream.next(m.edge_creation_type);
      stream.next(m.edge_direction_creation_type);
      stream.next(m.snap_pose_config);
      stream.next(m.all_vertices_locked);
      stream.next(m.all_edges_locked);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraphCreatorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "graph_creator_mode: ";
    Printer< ::graph_creator_msgs::GraphCreatorMode_<ContainerAllocator> >::stream(s, indent + "  ", v.graph_creator_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "edge_creation_type: ";
    Printer< ::graph_creator_msgs::EdgeCreationType_<ContainerAllocator> >::stream(s, indent + "  ", v.edge_creation_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "edge_direction_creation_type: ";
    Printer< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >::stream(s, indent + "  ", v.edge_direction_creation_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "snap_pose_config: ";
    Printer< ::graph_creator_msgs::SnapPoseConfig_<ContainerAllocator> >::stream(s, indent + "  ", v.snap_pose_config);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "all_vertices_locked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.all_vertices_locked);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "all_edges_locked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.all_edges_locked);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_GRAPHCREATORSTATE_H
