// Generated by gencpp from file graph_creator_msgs/SetEdgeDirectionCreationTypeRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_SETEDGEDIRECTIONCREATIONTYPEREQUEST_H
#define GRAPH_CREATOR_MSGS_MESSAGE_SETEDGEDIRECTIONCREATIONTYPEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_creator_msgs/EdgeDirectionCreationType.h>

namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct SetEdgeDirectionCreationTypeRequest_
{
  typedef SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> Type;

  SetEdgeDirectionCreationTypeRequest_()
    : type()  {
    }
  SetEdgeDirectionCreationTypeRequest_(const ContainerAllocator& _alloc)
    : type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator>  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetEdgeDirectionCreationTypeRequest_

typedef ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<std::allocator<void> > SetEdgeDirectionCreationTypeRequest;

typedef boost::shared_ptr< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest > SetEdgeDirectionCreationTypeRequestPtr;
typedef boost::shared_ptr< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest const> SetEdgeDirectionCreationTypeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f050a4d6c92f2aa063eced5177306b4";
  }

  static const char* value(const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f050a4d6c92f2aaULL;
  static const uint64_t static_value2 = 0x063eced5177306b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/SetEdgeDirectionCreationTypeRequest";
  }

  static const char* value(const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/EdgeDirectionCreationType type\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeDirectionCreationType\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2\n"
"\n"
"uint8 direction_type\n"
"\n"
;
  }

  static const char* value(const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetEdgeDirectionCreationTypeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::SetEdgeDirectionCreationTypeRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_SETEDGEDIRECTIONCREATIONTYPEREQUEST_H
