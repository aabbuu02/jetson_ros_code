// Generated by gencpp from file graph_creator_msgs/EdgeDirectionCreationType.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_EDGEDIRECTIONCREATIONTYPE_H
#define GRAPH_CREATOR_MSGS_MESSAGE_EDGEDIRECTIONCREATIONTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct EdgeDirectionCreationType_
{
  typedef EdgeDirectionCreationType_<ContainerAllocator> Type;

  EdgeDirectionCreationType_()
    : direction_type(0)  {
    }
  EdgeDirectionCreationType_(const ContainerAllocator& _alloc)
    : direction_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _direction_type_type;
  _direction_type_type direction_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EDGE_DIRECTION_CREATION_TYPE_FORWARD)
  #undef EDGE_DIRECTION_CREATION_TYPE_FORWARD
#endif
#if defined(_WIN32) && defined(EDGE_DIRECTION_CREATION_TYPE_REVERSE)
  #undef EDGE_DIRECTION_CREATION_TYPE_REVERSE
#endif
#if defined(_WIN32) && defined(EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL)
  #undef EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL
#endif

  enum {
    EDGE_DIRECTION_CREATION_TYPE_FORWARD = 0u,
    EDGE_DIRECTION_CREATION_TYPE_REVERSE = 1u,
    EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL = 2u,
  };


  typedef boost::shared_ptr< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> const> ConstPtr;

}; // struct EdgeDirectionCreationType_

typedef ::graph_creator_msgs::EdgeDirectionCreationType_<std::allocator<void> > EdgeDirectionCreationType;

typedef boost::shared_ptr< ::graph_creator_msgs::EdgeDirectionCreationType > EdgeDirectionCreationTypePtr;
typedef boost::shared_ptr< ::graph_creator_msgs::EdgeDirectionCreationType const> EdgeDirectionCreationTypeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator2> & rhs)
{
  return lhs.direction_type == rhs.direction_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72ffc1009e4ad91bac1a2f601f8e57c1";
  }

  static const char* value(const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72ffc1009e4ad91bULL;
  static const uint64_t static_value2 = 0xac1a2f601f8e57c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/EdgeDirectionCreationType";
  }

  static const char* value(const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2\n"
"\n"
"uint8 direction_type\n"
"\n"
;
  }

  static const char* value(const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.direction_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EdgeDirectionCreationType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "direction_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_EDGEDIRECTIONCREATIONTYPE_H
