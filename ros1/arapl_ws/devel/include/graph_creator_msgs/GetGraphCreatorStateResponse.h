// Generated by gencpp from file graph_creator_msgs/GetGraphCreatorStateResponse.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_GETGRAPHCREATORSTATERESPONSE_H
#define GRAPH_CREATOR_MSGS_MESSAGE_GETGRAPHCREATORSTATERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_creator_msgs/GraphCreatorState.h>

namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct GetGraphCreatorStateResponse_
{
  typedef GetGraphCreatorStateResponse_<ContainerAllocator> Type;

  GetGraphCreatorStateResponse_()
    : state()
    , success(false)
    , message()  {
    }
  GetGraphCreatorStateResponse_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , success(false)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGraphCreatorStateResponse_

typedef ::graph_creator_msgs::GetGraphCreatorStateResponse_<std::allocator<void> > GetGraphCreatorStateResponse;

typedef boost::shared_ptr< ::graph_creator_msgs::GetGraphCreatorStateResponse > GetGraphCreatorStateResponsePtr;
typedef boost::shared_ptr< ::graph_creator_msgs::GetGraphCreatorStateResponse const> GetGraphCreatorStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.success == rhs.success &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "258429896b8cdbd7d95bd163ecc5ab51";
  }

  static const char* value(const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x258429896b8cdbd7ULL;
  static const uint64_t static_value2 = 0xd95bd163ecc5ab51ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/GetGraphCreatorStateResponse";
  }

  static const char* value(const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/GraphCreatorState state\n"
"\n"
"bool success\n"
"string message\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/GraphCreatorState\n"
"graph_creator_msgs/GraphCreatorMode graph_creator_mode\n"
"graph_creator_msgs/EdgeCreationType edge_creation_type\n"
"graph_creator_msgs/EdgeDirectionCreationType edge_direction_creation_type\n"
"graph_creator_msgs/SnapPoseConfig snap_pose_config\n"
"bool all_vertices_locked\n"
"bool all_edges_locked\n"
"================================================================================\n"
"MSG: graph_creator_msgs/GraphCreatorMode\n"
"uint8 GRAPH_CREATOR_MODE_CREATE_VERTICES=0\n"
"uint8 GRAPH_CREATOR_MODE_CREATE_EDGES=1\n"
"\n"
"uint8 mode\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeCreationType\n"
"uint8 EDGE_CREATION_TYPE_STRAIGHT_LINE=0\n"
"uint8 EDGE_CREATION_TYPE_CUBIC_BEZIER=1\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeDirectionCreationType\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2\n"
"\n"
"uint8 direction_type\n"
"\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/SnapPoseConfig\n"
"bool enable_for_vertices            # Enable snap position and orientation for vertices\n"
"bool enable_for_edges               # Enable snap position and orientation for edge elements\n"
"\n"
"bool enable_position_snap           # Whether to enable position snap\n"
"bool enable_orientation_snap        # Whether to enable orientation snap\n"
"\n"
"float64 position_snap_grid_size     # Position snap grid size in meters\n"
"float64 orientation_snap_angle      # Orientation snap angle in radians \n"
;
  }

  static const char* value(const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.success);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGraphCreatorStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::GetGraphCreatorStateResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "state: ";
    Printer< ::graph_creator_msgs::GraphCreatorState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_GETGRAPHCREATORSTATERESPONSE_H
