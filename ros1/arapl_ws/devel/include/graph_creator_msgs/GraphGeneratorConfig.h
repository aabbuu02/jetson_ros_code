// Generated by gencpp from file graph_creator_msgs/GraphGeneratorConfig.msg
// DO NOT EDIT!


#ifndef GRAPH_CREATOR_MSGS_MESSAGE_GRAPHGENERATORCONFIG_H
#define GRAPH_CREATOR_MSGS_MESSAGE_GRAPHGENERATORCONFIG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <graph_creator_msgs/EdgeCreationType.h>
#include <graph_creator_msgs/EdgeDirectionCreationType.h>
#include <geometry_msgs/Pose.h>

namespace graph_creator_msgs
{
template <class ContainerAllocator>
struct GraphGeneratorConfig_
{
  typedef GraphGeneratorConfig_<ContainerAllocator> Type;

  GraphGeneratorConfig_()
    : generation_type(0)
    , edge_creation_type()
    , edge_direction_type()
    , ignore_vertex_orientation(false)
    , use_edge_count_threshold(false)
    , edge_count_threshold(0)
    , dxf_file_path()
    , scale_x(0.0)
    , scale_y(0.0)
    , start_pose()
    , rows(0)
    , columns(0)
    , row_spacing(0.0)
    , column_spacing(0.0)  {
    }
  GraphGeneratorConfig_(const ContainerAllocator& _alloc)
    : generation_type(0)
    , edge_creation_type(_alloc)
    , edge_direction_type(_alloc)
    , ignore_vertex_orientation(false)
    , use_edge_count_threshold(false)
    , edge_count_threshold(0)
    , dxf_file_path(_alloc)
    , scale_x(0.0)
    , scale_y(0.0)
    , start_pose(_alloc)
    , rows(0)
    , columns(0)
    , row_spacing(0.0)
    , column_spacing(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _generation_type_type;
  _generation_type_type generation_type;

   typedef  ::graph_creator_msgs::EdgeCreationType_<ContainerAllocator>  _edge_creation_type_type;
  _edge_creation_type_type edge_creation_type;

   typedef  ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator>  _edge_direction_type_type;
  _edge_direction_type_type edge_direction_type;

   typedef uint8_t _ignore_vertex_orientation_type;
  _ignore_vertex_orientation_type ignore_vertex_orientation;

   typedef uint8_t _use_edge_count_threshold_type;
  _use_edge_count_threshold_type use_edge_count_threshold;

   typedef uint32_t _edge_count_threshold_type;
  _edge_count_threshold_type edge_count_threshold;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dxf_file_path_type;
  _dxf_file_path_type dxf_file_path;

   typedef float _scale_x_type;
  _scale_x_type scale_x;

   typedef float _scale_y_type;
  _scale_y_type scale_y;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _start_pose_type;
  _start_pose_type start_pose;

   typedef uint32_t _rows_type;
  _rows_type rows;

   typedef uint32_t _columns_type;
  _columns_type columns;

   typedef float _row_spacing_type;
  _row_spacing_type row_spacing;

   typedef float _column_spacing_type;
  _column_spacing_type column_spacing;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GRAPH_GENERATION_TYPE_GRID)
  #undef GRAPH_GENERATION_TYPE_GRID
#endif
#if defined(_WIN32) && defined(GRAPH_GENERATION_TYPE_DXF)
  #undef GRAPH_GENERATION_TYPE_DXF
#endif

  enum {
    GRAPH_GENERATION_TYPE_GRID = 0u,
    GRAPH_GENERATION_TYPE_DXF = 1u,
  };


  typedef boost::shared_ptr< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> const> ConstPtr;

}; // struct GraphGeneratorConfig_

typedef ::graph_creator_msgs::GraphGeneratorConfig_<std::allocator<void> > GraphGeneratorConfig;

typedef boost::shared_ptr< ::graph_creator_msgs::GraphGeneratorConfig > GraphGeneratorConfigPtr;
typedef boost::shared_ptr< ::graph_creator_msgs::GraphGeneratorConfig const> GraphGeneratorConfigConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator2> & rhs)
{
  return lhs.generation_type == rhs.generation_type &&
    lhs.edge_creation_type == rhs.edge_creation_type &&
    lhs.edge_direction_type == rhs.edge_direction_type &&
    lhs.ignore_vertex_orientation == rhs.ignore_vertex_orientation &&
    lhs.use_edge_count_threshold == rhs.use_edge_count_threshold &&
    lhs.edge_count_threshold == rhs.edge_count_threshold &&
    lhs.dxf_file_path == rhs.dxf_file_path &&
    lhs.scale_x == rhs.scale_x &&
    lhs.scale_y == rhs.scale_y &&
    lhs.start_pose == rhs.start_pose &&
    lhs.rows == rhs.rows &&
    lhs.columns == rhs.columns &&
    lhs.row_spacing == rhs.row_spacing &&
    lhs.column_spacing == rhs.column_spacing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator1> & lhs, const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_creator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d549626c784b6f02d6bb8ede7bb25247";
  }

  static const char* value(const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd549626c784b6f02ULL;
  static const uint64_t static_value2 = 0xd6bb8ede7bb25247ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_creator_msgs/GraphGeneratorConfig";
  }

  static const char* value(const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 GRAPH_GENERATION_TYPE_GRID=0\n"
"uint8 GRAPH_GENERATION_TYPE_DXF=1\n"
"\n"
"uint8 generation_type\n"
"EdgeCreationType edge_creation_type\n"
"EdgeDirectionCreationType edge_direction_type\n"
"bool ignore_vertex_orientation                      # Ignore vertex orientation\n"
"bool use_edge_count_threshold                       # Use edge count threshold to ignore orientation\n"
"uint32 edge_count_threshold                         # Edge count threshold\n"
"\n"
"# For generating graph from DXF files\n"
"string dxf_file_path                                # File paths can be either relative to a package or absolute\n"
"float32 scale_x\n"
"float32 scale_y\n"
"\n"
"# For generating grid graphs\n"
"geometry_msgs/Pose start_pose\n"
"uint32 rows                                         # Rows are along Y-axis\n"
"uint32 columns                                      # Columns are along X-axis\n"
"float32 row_spacing                                 # Spacing between two vertices along the Y-axis\n"
"float32 column_spacing                              # Spacing between two vertics along the X-axis\n"
"\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeCreationType\n"
"uint8 EDGE_CREATION_TYPE_STRAIGHT_LINE=0\n"
"uint8 EDGE_CREATION_TYPE_CUBIC_BEZIER=1\n"
"\n"
"uint8 type\n"
"================================================================================\n"
"MSG: graph_creator_msgs/EdgeDirectionCreationType\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_FORWARD=0\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_REVERSE=1\n"
"uint8 EDGE_DIRECTION_CREATION_TYPE_BIDIRECTIONAL=2\n"
"\n"
"uint8 direction_type\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.generation_type);
      stream.next(m.edge_creation_type);
      stream.next(m.edge_direction_type);
      stream.next(m.ignore_vertex_orientation);
      stream.next(m.use_edge_count_threshold);
      stream.next(m.edge_count_threshold);
      stream.next(m.dxf_file_path);
      stream.next(m.scale_x);
      stream.next(m.scale_y);
      stream.next(m.start_pose);
      stream.next(m.rows);
      stream.next(m.columns);
      stream.next(m.row_spacing);
      stream.next(m.column_spacing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraphGeneratorConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_creator_msgs::GraphGeneratorConfig_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "generation_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.generation_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "edge_creation_type: ";
    Printer< ::graph_creator_msgs::EdgeCreationType_<ContainerAllocator> >::stream(s, indent + "  ", v.edge_creation_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "edge_direction_type: ";
    Printer< ::graph_creator_msgs::EdgeDirectionCreationType_<ContainerAllocator> >::stream(s, indent + "  ", v.edge_direction_type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ignore_vertex_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_vertex_orientation);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "use_edge_count_threshold: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_edge_count_threshold);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "edge_count_threshold: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.edge_count_threshold);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dxf_file_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dxf_file_path);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "scale_x: ";
    Printer<float>::stream(s, indent + "  ", v.scale_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "scale_y: ";
    Printer<float>::stream(s, indent + "  ", v.scale_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "start_pose: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.start_pose);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rows: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rows);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "columns: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.columns);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "row_spacing: ";
    Printer<float>::stream(s, indent + "  ", v.row_spacing);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "column_spacing: ";
    Printer<float>::stream(s, indent + "  ", v.column_spacing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_CREATOR_MSGS_MESSAGE_GRAPHGENERATORCONFIG_H
